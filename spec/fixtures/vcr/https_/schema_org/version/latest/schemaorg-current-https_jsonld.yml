---
http_interactions:
- request:
    method: get
    uri: https://schema.org/version/latest/schemaorg-current-https.jsonld
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Headers:
      - Accept
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET
      Date:
      - Sun, 14 Nov 2021 15:10:30 GMT
      Expires:
      - Sun, 14 Nov 2021 15:20:30 GMT
      Etag:
      - '"8aHR5A"'
      X-Cloud-Trace-Context:
      - 492fc449d60f1b53bd9294df754e0465
      Content-Type:
      - application/ld+json
      Server:
      - Google Frontend
      Cache-Control:
      - public, max-age=600
      Age:
      - '0'
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "@context": {
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "schema": "https://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "schema:NewsMediaOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "A News/Media organization such as a newspaper or TV station.",
      "rdfs:label": "NewsMediaOrganization",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:PlanAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of planning the execution of an event/task/action/reservation/plan to a future date.",
      "rdfs:label": "PlanAction",
      "rdfs:subClassOf": {
        "@id": "schema:OrganizeAction"
      }
    },
    {
      "@id": "schema:geoMidpoint",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the GeoCoordinates at the centre of a GeoShape e.g. GeoCircle.",
      "rdfs:label": "geoMidpoint",
      "schema:domainIncludes": {
        "@id": "schema:GeoCircle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:GeoCoordinates"
      }
    },
    {
      "@id": "schema:Nonprofit501c2",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c2: Non-profit type referring to Title-holding Corporations for Exempt Organizations.",
      "rdfs:label": "Nonprofit501c2",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:characterName",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of a character played in some acting or performing role, i.e. in a PerformanceRole.",
      "rdfs:label": "characterName",
      "schema:domainIncludes": {
        "@id": "schema:PerformanceRole"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EventCancelled",
      "@type": "schema:EventStatusType",
      "rdfs:comment": "The event has been cancelled. If the event has multiple startDate values, all are assumed to be cancelled. Either startDate or previousStartDate may be used to specify the event's cancelled date(s).",
      "rdfs:label": "EventCancelled"
    },
    {
      "@id": "schema:calories",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of calories.",
      "rdfs:label": "calories",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Energy"
      }
    },
    {
      "@id": "schema:menuAddOn",
      "@type": "rdf:Property",
      "rdfs:comment": "Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.",
      "rdfs:label": "menuAddOn",
      "schema:domainIncludes": {
        "@id": "schema:MenuItem"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MenuSection"
        },
        {
          "@id": "schema:MenuItem"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1541"
      }
    },
    {
      "@id": "schema:sizeSystem",
      "@type": "rdf:Property",
      "rdfs:comment": "The size system used to identify a product's size. Typically either a standard (for example, \"GS1\" or \"ISO-EN13402\"), country code (for example \"US\" or \"JP\"), or a measuring system (for example \"Metric\" or \"Imperial\").",
      "rdfs:label": "sizeSystem",
      "schema:domainIncludes": {
        "@id": "schema:SizeSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:SizeSystemEnumeration"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:codeRepository",
      "@type": "rdf:Property",
      "rdfs:comment": "Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).",
      "rdfs:label": "codeRepository",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:geo",
      "@type": "rdf:Property",
      "rdfs:comment": "The geo coordinates of the place.",
      "rdfs:label": "geo",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeoCoordinates"
        },
        {
          "@id": "schema:GeoShape"
        }
      ]
    },
    {
      "@id": "schema:postOp",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the postoperative procedures, care, and/or followups for this device.",
      "rdfs:label": "postOp",
      "schema:domainIncludes": {
        "@id": "schema:MedicalDevice"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BodyMeasurementHead",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Maximum girth of head above the ears. Used, for example, to fit hats.",
      "rdfs:label": "BodyMeasurementHead",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:broadcastChannelId",
      "@type": "rdf:Property",
      "rdfs:comment": "The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.",
      "rdfs:label": "broadcastChannelId",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:significantLink",
      "@type": "rdf:Property",
      "rdfs:comment": "One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.",
      "rdfs:label": "significantLink",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:ListenAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of consuming audio content.",
      "rdfs:label": "ListenAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:partOfSeason",
      "@type": "rdf:Property",
      "rdfs:comment": "The season to which this episode belongs.",
      "rdfs:label": "partOfSeason",
      "rdfs:subPropertyOf": {
        "@id": "schema:isPartOf"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:Episode"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWorkSeason"
      }
    },
    {
      "@id": "schema:bioChemSimilarity",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.",
      "rdfs:label": "bioChemSimilarity",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BioChemEntity"
      }
    },
    {
      "@id": "schema:TradeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.",
      "rdfs:label": "TradeAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:pattern",
      "@type": "rdf:Property",
      "rdfs:comment": "A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.",
      "rdfs:label": "pattern",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:Urologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with the diagnosis and treatment of diseases pertaining to the urinary tract and the urogenital system.",
      "rdfs:label": "Urologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:PresentationDigitalDocument",
      "@type": "rdfs:Class",
      "rdfs:comment": "A file containing slides or used for a presentation.",
      "rdfs:label": "PresentationDigitalDocument",
      "rdfs:subClassOf": {
        "@id": "schema:DigitalDocument"
      }
    },
    {
      "@id": "schema:exercisePlan",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The exercise plan used on this action.",
      "rdfs:label": "exercisePlan",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ExercisePlan"
      }
    },
    {
      "@id": "schema:creditText",
      "@type": "rdf:Property",
      "rdfs:comment": "Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.",
      "rdfs:label": "creditText",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2659"
      }
    },
    {
      "@id": "schema:Chiropractic",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "A system of medicine focused on the relationship between the body's structure, mainly the spine, and its functioning.",
      "rdfs:label": "Chiropractic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Reservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "Describes a reservation for travel, dining or an event. Some reservations require tickets. \\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].",
      "rdfs:label": "Reservation",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:Anesthesia",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to study of anesthetics and their application.",
      "rdfs:label": "Anesthesia",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:backstory",
      "@type": "rdf:Property",
      "rdfs:comment": "For an [[Article]], typically a [[NewsArticle]], the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc.",
      "rdfs:label": "backstory",
      "schema:domainIncludes": {
        "@id": "schema:Article"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1688"
        }
      ]
    },
    {
      "@id": "schema:WearableMeasurementHips",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the hip section, for example of a skirt",
      "rdfs:label": "WearableMeasurementHips",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:alignmentType",
      "@type": "rdf:Property",
      "rdfs:comment": "A category of alignment between the learning resource and the framework node. Recommended values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.",
      "rdfs:label": "alignmentType",
      "schema:domainIncludes": {
        "@id": "schema:AlignmentObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:geoEquals",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). \"Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other\" (a symmetric relationship)",
      "rdfs:label": "geoEquals",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:applicationSubCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Subcategory of the application, e.g. 'Arcade Game'.",
      "rdfs:label": "applicationSubCategory",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:safetyConsideration",
      "@type": "rdf:Property",
      "rdfs:comment": "Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.",
      "rdfs:label": "safetyConsideration",
      "schema:domainIncludes": {
        "@id": "schema:DietarySupplement"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:AlignmentObject",
      "@type": "rdfs:Class",
      "rdfs:comment": "An intangible item that describes an alignment between a learning resource and a node in an educational framework.\n\nShould not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.",
      "rdfs:label": "AlignmentObject",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_LRMIClass"
      }
    },
    {
      "@id": "schema:BedAndBreakfast",
      "@type": "rdfs:Class",
      "rdfs:comment": "Bed and breakfast.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "BedAndBreakfast",
      "rdfs:subClassOf": {
        "@id": "schema:LodgingBusiness"
      }
    },
    {
      "@id": "schema:BusinessAudience",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of characteristics belonging to businesses, e.g. who compose an item's target audience.",
      "rdfs:label": "BusinessAudience",
      "rdfs:subClassOf": {
        "@id": "schema:Audience"
      }
    },
    {
      "@id": "schema:subOrganization",
      "@type": "rdf:Property",
      "rdfs:comment": "A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.",
      "rdfs:label": "subOrganization",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:inverseOf": {
        "@id": "schema:parentOrganization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:articleSection",
      "@type": "rdf:Property",
      "rdfs:comment": "Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.",
      "rdfs:label": "articleSection",
      "schema:domainIncludes": {
        "@id": "schema:Article"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:JoinAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent joins an event/group with participants/friends at a location.\\n\\nRelated actions:\\n\\n* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\\n* [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\\n* [[FollowAction]]: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.",
      "rdfs:label": "JoinAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:numberOfBedrooms",
      "@type": "rdf:Property",
      "rdfs:comment": "The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].",
      "rdfs:label": "numberOfBedrooms",
      "schema:domainIncludes": [
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:ApartmentComplex"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:MedicalTest",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any medical test, typically performed for diagnostic purposes.",
      "rdfs:label": "MedicalTest",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Person",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://xmlns.com/foaf/0.1/Person"
      },
      "rdfs:comment": "A person (alive, dead, undead, or fictional).",
      "rdfs:label": "Person",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:contactPoint",
      "@type": "rdf:Property",
      "rdfs:comment": "A contact point for a person or organization.",
      "rdfs:label": "contactPoint",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:HealthInsurancePlan"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:ContactPoint"
      }
    },
    {
      "@id": "schema:BodyMeasurementBust",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Maximum girth of bust. Used, for example, to fit women's suits.",
      "rdfs:label": "BodyMeasurementBust",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:worstRating",
      "@type": "rdf:Property",
      "rdfs:comment": "The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.",
      "rdfs:label": "worstRating",
      "schema:domainIncludes": {
        "@id": "schema:Rating"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:MedicalCode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A code for a medical entity.",
      "rdfs:label": "MedicalCode",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CategoryCode"
        },
        {
          "@id": "schema:MedicalIntangible"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Enumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Lists or enumerations—for example, a list of cuisines or music genres, etc.",
      "rdfs:label": "Enumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:publicAccess",
      "@type": "rdf:Property",
      "rdfs:comment": "A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value",
      "rdfs:label": "publicAccess",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:customerRemorseReturnFees",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of return fees if the product is returned due to customer remorse.",
      "rdfs:label": "customerRemorseReturnFees",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnFeesEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:Musculoskeletal",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of muscles, ligaments and skeletal system.",
      "rdfs:label": "Musculoskeletal",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:experienceRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of skills and experience needed for the position or Occupation.",
      "rdfs:label": "experienceRequirements",
      "schema:domainIncludes": [
        {
          "@id": "schema:Occupation"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:OccupationalExperienceRequirements"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:BroadcastRelease",
      "@type": "schema:MusicAlbumReleaseType",
      "rdfs:comment": "BroadcastRelease.",
      "rdfs:label": "BroadcastRelease",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:Electrician",
      "@type": "rdfs:Class",
      "rdfs:comment": "An electrician.",
      "rdfs:label": "Electrician",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:legislationPassedBy",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#passed_by"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#passed_by"
      },
      "rdfs:comment": "The person or organization that originally passed or made the law : typically parliament (for primary legislation) or government (for secondary legislation). This indicates the \"legal author\" of the law, as opposed to its physical author.",
      "rdfs:label": "legislationPassedBy",
      "rdfs:subPropertyOf": {
        "@id": "schema:creator"
      },
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:mainEntityOfPage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.",
      "rdfs:label": "mainEntityOfPage",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:inverseOf": {
        "@id": "schema:mainEntity"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:orderDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Date order was placed.",
      "rdfs:label": "orderDate",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:BodyMeasurementWaist",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Girth of natural waistline (between hip bones and lower ribs). Used, for example, to fit pants.",
      "rdfs:label": "BodyMeasurementWaist",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:trackingNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "Shipper tracking number.",
      "rdfs:label": "trackingNumber",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:LeisureTimeActivity",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Any physical activity engaged in for recreational purposes. Examples may include ballroom dancing, roller skating, canoeing, fishing, etc.",
      "rdfs:label": "LeisureTimeActivity",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Podiatric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "Podiatry is the care of the human foot, especially the diagnosis and treatment of foot disorders.",
      "rdfs:label": "Podiatric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:CancelAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of asserting that a future event/action is no longer going to happen.\\n\\nRelated actions:\\n\\n* [[ConfirmAction]]: The antonym of CancelAction.",
      "rdfs:label": "CancelAction",
      "rdfs:subClassOf": {
        "@id": "schema:PlanAction"
      }
    },
    {
      "@id": "schema:issuedThrough",
      "@type": "rdf:Property",
      "rdfs:comment": "The service through with the permit was granted.",
      "rdfs:label": "issuedThrough",
      "schema:domainIncludes": {
        "@id": "schema:Permit"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:NotYetRecruiting",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Not yet recruiting.",
      "rdfs:label": "NotYetRecruiting",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:AssignAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of allocating an action/event/task to some destination (someone or something).",
      "rdfs:label": "AssignAction",
      "rdfs:subClassOf": {
        "@id": "schema:AllocateAction"
      }
    },
    {
      "@id": "schema:hiringOrganization",
      "@type": "rdf:Property",
      "rdfs:comment": "Organization offering the job position.",
      "rdfs:label": "hiringOrganization",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:MediaReview",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.\n    For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is\n    a work in progress. While the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and others working\n    to combat misinformation, the specific structures for representing media objects, their versions and publication context, is still evolving. Similarly, best practices for the relationship between [[MediaReview]] and [[ClaimReview]] markup has not yet been finalized.",
      "rdfs:label": "MediaReview",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:Airport",
      "@type": "rdfs:Class",
      "rdfs:comment": "An airport.",
      "rdfs:label": "Airport",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:Quiz",
      "@type": "rdfs:Class",
      "rdfs:comment": "Quiz: A test of knowledge, skills and abilities.",
      "rdfs:label": "Quiz",
      "rdfs:subClassOf": {
        "@id": "schema:LearningResource"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2611"
      }
    },
    {
      "@id": "schema:Retail",
      "@type": "schema:DrugCostCategory",
      "rdfs:comment": "The drug's cost represents the retail cost of the drug.",
      "rdfs:label": "Retail",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:directApply",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.",
      "rdfs:label": "directApply",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2907"
      }
    },
    {
      "@id": "schema:increasesRiskOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The condition, complication, etc. influenced by this factor.",
      "rdfs:label": "increasesRiskOf",
      "schema:domainIncludes": {
        "@id": "schema:MedicalRiskFactor"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:Dentist",
      "@type": "rdfs:Class",
      "rdfs:comment": "A dentist.",
      "rdfs:label": "Dentist",
      "rdfs:subClassOf": [
        {
          "@id": "schema:LocalBusiness"
        },
        {
          "@id": "schema:MedicalOrganization"
        },
        {
          "@id": "schema:MedicalBusiness"
        }
      ]
    },
    {
      "@id": "schema:includedDataCatalog",
      "@type": "rdf:Property",
      "rdfs:comment": "A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').",
      "rdfs:label": "includedDataCatalog",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataCatalog"
      },
      "schema:supersededBy": {
        "@id": "schema:includedInDataCatalog"
      }
    },
    {
      "@id": "schema:Synagogue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A synagogue.",
      "rdfs:label": "Synagogue",
      "rdfs:subClassOf": {
        "@id": "schema:PlaceOfWorship"
      }
    },
    {
      "@id": "schema:Order",
      "@type": "rdfs:Class",
      "rdfs:comment": "An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.",
      "rdfs:label": "Order",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:BikeStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bike store.",
      "rdfs:label": "BikeStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:Embassy",
      "@type": "rdfs:Class",
      "rdfs:comment": "An embassy.",
      "rdfs:label": "Embassy",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentBuilding"
      }
    },
    {
      "@id": "schema:OccupationalActivity",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Any physical activity engaged in for job-related purposes. Examples may include waiting tables, maid service, carrying a mailbag, picking fruits or vegetables, construction work, etc.",
      "rdfs:label": "OccupationalActivity",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ChooseAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a preference from a set of options or a large or unbounded set of choices/options.",
      "rdfs:label": "ChooseAction",
      "rdfs:subClassOf": {
        "@id": "schema:AssessAction"
      }
    },
    {
      "@id": "schema:SomeProducts",
      "@type": "rdfs:Class",
      "rdfs:comment": "A placeholder for multiple similar products of the same kind.",
      "rdfs:label": "SomeProducts",
      "rdfs:subClassOf": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:Nonprofit501c5",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c5: Non-profit type referring to Labor, Agricultural and Horticultural Organizations.",
      "rdfs:label": "Nonprofit501c5",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:GamePlayMode",
      "@type": "rdfs:Class",
      "rdfs:comment": "Indicates whether this game is multi-player, co-op or single-player.",
      "rdfs:label": "GamePlayMode",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:DistanceFee",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the distance fee (e.g., price per km or mile) part of the total price for an offered product, for example a car rental.",
      "rdfs:label": "DistanceFee",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:duplicateTherapy",
      "@type": "rdf:Property",
      "rdfs:comment": "A therapy that duplicates or overlaps this one.",
      "rdfs:label": "duplicateTherapy",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTherapy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTherapy"
      }
    },
    {
      "@id": "schema:numberOfBathroomsTotal",
      "@type": "rdf:Property",
      "rdfs:comment": "The total integer number of bathrooms in a some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): \"The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.\". See also [[numberOfRooms]].",
      "rdfs:label": "numberOfBathroomsTotal",
      "schema:domainIncludes": [
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:Accommodation"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:MediaReviewItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "Represents an item or group of closely related items treated as a unit for the sake of evaluation in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.",
      "rdfs:label": "MediaReviewItem",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:BenefitsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about the benefits and advantages of usage or utilization of topic.",
      "rdfs:label": "BenefitsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:NewCondition",
      "@type": "schema:OfferItemCondition",
      "rdfs:comment": "Indicates that the item is new.",
      "rdfs:label": "NewCondition"
    },
    {
      "@id": "schema:Nose",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Nose function assessment with clinical examination.",
      "rdfs:label": "Nose",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Head",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Head assessment with clinical examination.",
      "rdfs:label": "Head",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:domainIncludes",
      "@type": "rdf:Property",
      "rdfs:comment": "Relates a property to a class that is (one of) the type(s) the property is expected to be used on.",
      "rdfs:label": "domainIncludes",
      "schema:domainIncludes": {
        "@id": "schema:Property"
      },
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Class"
      }
    },
    {
      "@id": "schema:BookmarkAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent bookmarks/flags/labels/tags/marks an object.",
      "rdfs:label": "BookmarkAction",
      "rdfs:subClassOf": {
        "@id": "schema:OrganizeAction"
      }
    },
    {
      "@id": "schema:annualPercentageRate",
      "@type": "rdf:Property",
      "rdfs:comment": "The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.",
      "rdfs:label": "annualPercentageRate",
      "schema:domainIncludes": {
        "@id": "schema:FinancialProduct"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:ReturnLabelDownloadAndPrint",
      "@type": "schema:ReturnLabelSourceEnumeration",
      "rdfs:comment": "Indicated that a return label must be downloaded and printed by the customer.",
      "rdfs:label": "ReturnLabelDownloadAndPrint",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:legislationConsolidates",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#consolidates"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#consolidates"
      },
      "rdfs:comment": "Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change.",
      "rdfs:label": "legislationConsolidates",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:torque",
      "@type": "rdf:Property",
      "rdfs:comment": "The torque (turning force) of the vehicle's engine.\\n\\nTypical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch\\n\\n* Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the [[valueReference]] property.\\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "torque",
      "schema:domainIncludes": {
        "@id": "schema:EngineSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:subEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.",
      "rdfs:label": "subEvent",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:inverseOf": {
        "@id": "schema:superEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:Saturday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Friday and Sunday.",
      "rdfs:label": "Saturday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q131"
      }
    },
    {
      "@id": "schema:sender",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The participant who is at the sending end of the action.",
      "rdfs:label": "sender",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Message"
        },
        {
          "@id": "schema:ReceiveAction"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Audience"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:repetitions",
      "@type": "rdf:Property",
      "rdfs:comment": "Number of times one should repeat the activity.",
      "rdfs:label": "repetitions",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:about",
      "@type": "rdf:Property",
      "rdfs:comment": "The subject matter of the content.",
      "rdfs:label": "about",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:CommunicateAction"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:subjectOf"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1670"
      }
    },
    {
      "@id": "schema:text",
      "@type": "rdf:Property",
      "rdfs:comment": "The textual content of this CreativeWork.",
      "rdfs:label": "text",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Nonprofit501c18",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c18: Non-profit type referring to Employee Funded Pension Trust (created before 25 June 1959).",
      "rdfs:label": "Nonprofit501c18",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:hasMeasurement",
      "@type": "rdf:Property",
      "rdfs:comment": "A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.",
      "rdfs:label": "hasMeasurement",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:SizeSpecification"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:cholesterolContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of milligrams of cholesterol.",
      "rdfs:label": "cholesterolContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:timeToComplete",
      "@type": "rdf:Property",
      "rdfs:comment": "The expected length of time to complete the program if attending full-time.",
      "rdfs:label": "timeToComplete",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:OfflineTemporarily",
      "@type": "schema:GameServerStatus",
      "rdfs:comment": "Game server status: OfflineTemporarily. Server is offline now but it can be online soon.",
      "rdfs:label": "OfflineTemporarily"
    },
    {
      "@id": "schema:arrivalStation",
      "@type": "rdf:Property",
      "rdfs:comment": "The station where the train trip ends.",
      "rdfs:label": "arrivalStation",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:TrainStation"
      }
    },
    {
      "@id": "schema:risks",
      "@type": "rdf:Property",
      "rdfs:comment": "Specific physiologic risks associated to the diet plan.",
      "rdfs:label": "risks",
      "schema:domainIncludes": {
        "@id": "schema:Diet"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:recommendedIntake",
      "@type": "rdf:Property",
      "rdfs:comment": "Recommended intake of this supplement for a given population as defined by a specific recommending authority.",
      "rdfs:label": "recommendedIntake",
      "schema:domainIncludes": {
        "@id": "schema:DietarySupplement"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:RecommendedDoseSchedule"
      }
    },
    {
      "@id": "schema:geoDisjoint",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries.\" (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM))",
      "rdfs:label": "geoDisjoint",
      "schema:domainIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:epidemiology",
      "@type": "rdf:Property",
      "rdfs:comment": "The characteristics of associated patients, such as age, gender, race etc.",
      "rdfs:label": "epidemiology",
      "schema:domainIncludes": [
        {
          "@id": "schema:PhysicalActivity"
        },
        {
          "@id": "schema:MedicalCondition"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Zoo",
      "@type": "rdfs:Class",
      "rdfs:comment": "A zoo.",
      "rdfs:label": "Zoo",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:permittedUsage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indications regarding the permitted usage of the accommodation.",
      "rdfs:label": "permittedUsage",
      "schema:domainIncludes": {
        "@id": "schema:Accommodation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:domiciledMortgage",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether borrower is a resident of the jurisdiction where the property is located.",
      "rdfs:label": "domiciledMortgage",
      "schema:domainIncludes": {
        "@id": "schema:MortgageLoan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:option",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The options subject to this action.",
      "rdfs:label": "option",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:ChooseAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:actionOption"
      }
    },
    {
      "@id": "schema:reservationId",
      "@type": "rdf:Property",
      "rdfs:comment": "A unique identifier for the reservation.",
      "rdfs:label": "reservationId",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:LegalValueLevel",
      "@type": "rdfs:Class",
      "http://www.w3.org/2004/02/skos/core#closeMatch": {
        "@id": "http://data.europa.eu/eli/ontology#LegalValue"
      },
      "rdfs:comment": "A list of possible levels for the legal validity of a legislation.",
      "rdfs:label": "LegalValueLevel",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:recipeInstructions",
      "@type": "rdf:Property",
      "rdfs:comment": "A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.",
      "rdfs:label": "recipeInstructions",
      "rdfs:subPropertyOf": {
        "@id": "schema:step"
      },
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:BookSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A series of books. Included books can be indicated with the hasPart property.",
      "rdfs:label": "BookSeries",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      }
    },
    {
      "@id": "schema:BodyMeasurementInsideLeg",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Inside leg (measured between crotch and soles of feet). Used, for example, to fit pants.",
      "rdfs:label": "BodyMeasurementInsideLeg",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Park",
      "@type": "rdfs:Class",
      "rdfs:comment": "A park.",
      "rdfs:label": "Park",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:DrugCostCategory",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerated categories of medical drug costs.",
      "rdfs:label": "DrugCostCategory",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:UnincorporatedAssociationCharity",
      "@type": "schema:UKNonprofitType",
      "rdfs:comment": "UnincorporatedAssociationCharity: Non-profit type referring to a charitable company that is not incorporated (UK).",
      "rdfs:label": "UnincorporatedAssociationCharity",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:SeatingMap",
      "@type": "schema:MapCategoryType",
      "rdfs:comment": "A seating map.",
      "rdfs:label": "SeatingMap"
    },
    {
      "@id": "schema:Nonprofit501f",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501f: Non-profit type referring to Cooperative Service Organizations.",
      "rdfs:label": "Nonprofit501f",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:FoodEstablishment",
      "@type": "rdfs:Class",
      "rdfs:comment": "A food-related business.",
      "rdfs:label": "FoodEstablishment",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:typicalTest",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical test typically performed given this condition.",
      "rdfs:label": "typicalTest",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTest"
      }
    },
    {
      "@id": "schema:dateDeleted",
      "@type": "rdf:Property",
      "rdfs:comment": "The datetime the item was removed from the DataFeed.",
      "rdfs:label": "dateDeleted",
      "schema:domainIncludes": {
        "@id": "schema:DataFeedItem"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:character",
      "@type": "rdf:Property",
      "rdfs:comment": "Fictional person connected with a creative work.",
      "rdfs:label": "character",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:cookTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "cookTime",
      "rdfs:subPropertyOf": {
        "@id": "schema:performTime"
      },
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:suggestedGender",
      "@type": "rdf:Property",
      "rdfs:comment": "The suggested gender of the intended person or audience, for example \"male\", \"female\", or \"unisex\".",
      "rdfs:label": "suggestedGender",
      "schema:domainIncludes": [
        {
          "@id": "schema:SizeSpecification"
        },
        {
          "@id": "schema:PeopleAudience"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GenderType"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:actors",
      "@type": "rdf:Property",
      "rdfs:comment": "An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.",
      "rdfs:label": "actors",
      "schema:domainIncludes": [
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:RadioSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:actor"
      }
    },
    {
      "@id": "schema:geoTouches",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points.\" (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM) )",
      "rdfs:label": "geoTouches",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:LendAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\\n\\nRelated actions:\\n\\n* [[BorrowAction]]: Reciprocal of LendAction.",
      "rdfs:label": "LendAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:legislationChanges",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#changes"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#changes"
      },
      "rdfs:comment": "Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the <a href=\"/legislationConsolidates\">legislationConsolidates</a> property.",
      "rdfs:label": "legislationChanges",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:skills",
      "@type": "rdf:Property",
      "rdfs:comment": "A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.",
      "rdfs:label": "skills",
      "schema:domainIncludes": [
        {
          "@id": "schema:JobPosting"
        },
        {
          "@id": "schema:Occupation"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2322"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        }
      ]
    },
    {
      "@id": "schema:includesObject",
      "@type": "rdf:Property",
      "rdfs:comment": "This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].",
      "rdfs:label": "includesObject",
      "schema:domainIncludes": [
        {
          "@id": "schema:ProductCollection"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:TypeAndQuantityNode"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DrugCost",
      "@type": "rdfs:Class",
      "rdfs:comment": "The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.",
      "rdfs:label": "DrugCost",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:priceRange",
      "@type": "rdf:Property",
      "rdfs:comment": "The price range of the business, for example ```$$$```.",
      "rdfs:label": "priceRange",
      "schema:domainIncludes": {
        "@id": "schema:LocalBusiness"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:artworkSurface",
      "@type": "rdf:Property",
      "rdfs:comment": "The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.",
      "rdfs:label": "artworkSurface",
      "schema:domainIncludes": {
        "@id": "schema:VisualArtwork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:processorRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Processor architecture required to run the application (e.g. IA64).",
      "rdfs:label": "processorRequirements",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Demand",
      "@type": "rdfs:Class",
      "rdfs:comment": "A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.",
      "rdfs:label": "Demand",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:issueNumber",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/issue"
      },
      "rdfs:comment": "Identifies the issue of publication; for example, \"iii\" or \"2\".",
      "rdfs:label": "issueNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:position"
      },
      "schema:domainIncludes": {
        "@id": "schema:PublicationIssue"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:offers",
      "@type": "rdf:Property",
      "rdfs:comment": "An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.\n      ",
      "rdfs:label": "offers",
      "schema:domainIncludes": [
        {
          "@id": "schema:Trip"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:AggregateOffer"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:MenuItem"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:itemOffered"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:InStoreOnly",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is available only at physical locations.",
      "rdfs:label": "InStoreOnly"
    },
    {
      "@id": "schema:SportsActivityLocation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sports location, such as a playing field.",
      "rdfs:label": "SportsActivityLocation",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:UserReview",
      "@type": "rdfs:Class",
      "rdfs:comment": "A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].",
      "rdfs:label": "UserReview",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1589"
      }
    },
    {
      "@id": "schema:BusinessEntityType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#Business\\n* http://purl.org/goodrelations/v1#Enduser\\n* http://purl.org/goodrelations/v1#PublicInstitution\\n* http://purl.org/goodrelations/v1#Reseller\n\t  ",
      "rdfs:label": "BusinessEntityType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:LocationFeatureSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.",
      "rdfs:label": "LocationFeatureSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:PropertyValue"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:meetsEmissionStandard",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates that the vehicle meets the respective emission standard.",
      "rdfs:label": "meetsEmissionStandard",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:BookStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bookstore.",
      "rdfs:label": "BookStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:StagesHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Stages that can be observed from a topic.",
      "rdfs:label": "StagesHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:TherapeuticProcedure",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/277132007"
      },
      "rdfs:comment": "A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.",
      "rdfs:label": "TherapeuticProcedure",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:contactlessPayment",
      "@type": "rdf:Property",
      "rdfs:comment": "A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology.",
      "rdfs:label": "contactlessPayment",
      "schema:domainIncludes": {
        "@id": "schema:PaymentCard"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:LegislativeBuilding",
      "@type": "rdfs:Class",
      "rdfs:comment": "A legislative building&#x2014;for example, the state capitol.",
      "rdfs:label": "LegislativeBuilding",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentBuilding"
      }
    },
    {
      "@id": "schema:estimatedSalary",
      "@type": "rdf:Property",
      "rdfs:comment": "An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.",
      "rdfs:label": "estimatedSalary",
      "schema:domainIncludes": [
        {
          "@id": "schema:Occupation"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:MonetaryAmountDistribution"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:WebPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.",
      "rdfs:label": "WebPage",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:SizeSystemMetric",
      "@type": "schema:SizeSystemEnumeration",
      "rdfs:comment": "Metric size system.",
      "rdfs:label": "SizeSystemMetric",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:LowLactoseDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet appropriate for people with lactose intolerance.",
      "rdfs:label": "LowLactoseDiet"
    },
    {
      "@id": "schema:Statement",
      "@type": "rdfs:Class",
      "rdfs:comment": "A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about, can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property to capture the text of the statement.",
      "rdfs:label": "Statement",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2912"
      }
    },
    {
      "@id": "schema:XRay",
      "@type": "schema:MedicalImagingTechnique",
      "rdfs:comment": "X-ray imaging.",
      "rdfs:label": "XRay",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:PaymentPastDue",
      "@type": "schema:PaymentStatusType",
      "rdfs:comment": "The payment is due and considered late.",
      "rdfs:label": "PaymentPastDue"
    },
    {
      "@id": "schema:SelfCareHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Self care actions or measures that can be taken to sooth, health or avoid a topic. This may be carried at home and can be carried/managed by the person itself.",
      "rdfs:label": "SelfCareHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:Clip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short TV or radio program or a segment/part of a program.",
      "rdfs:label": "Clip",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:prescribingInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "Link to prescribing information for the drug.",
      "rdfs:label": "prescribingInfo",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:tributary",
      "@type": "rdf:Property",
      "rdfs:comment": "The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.",
      "rdfs:label": "tributary",
      "schema:domainIncludes": {
        "@id": "schema:Vein"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:customerRemorseReturnShippingFeesAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of shipping costs if a product is returned due to customer remorse. Applicable when property [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].",
      "rdfs:label": "customerRemorseReturnShippingFeesAmount",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:WearableSizeGroupPlus",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Plus\" for wearables.",
      "rdfs:label": "WearableSizeGroupPlus",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:SideEffectsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Side effects that can be observed from the usage of the topic.",
      "rdfs:label": "SideEffectsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:locationCreated",
      "@type": "rdf:Property",
      "rdfs:comment": "The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.",
      "rdfs:label": "locationCreated",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:announcementLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the SpecialAnnouncement. For example, a specific testing facility or business with special opening hours. For a larger geographic region like a quarantine of an entire region, use [[spatialCoverage]].",
      "rdfs:label": "announcementLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:spatialCoverage"
      },
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:LocalBusiness"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2514"
      }
    },
    {
      "@id": "schema:doorTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time admission will commence.",
      "rdfs:label": "doorTime",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Time"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:colleagues",
      "@type": "rdf:Property",
      "rdfs:comment": "A colleague of the person.",
      "rdfs:label": "colleagues",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:colleague"
      }
    },
    {
      "@id": "schema:Room",
      "@type": "rdfs:Class",
      "rdfs:comment": "A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Room\">http://en.wikipedia.org/wiki/Room</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Room",
      "rdfs:subClassOf": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:exceptDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take place. The property allows exceptions to\n      a [[Schedule]] to be specified. If an exception is specified as a [[DateTime]] then only the event that would have started at that specific date and time\n      should be excluded from the schedule. If an exception is specified as a [[Date]] then any event that is scheduled for that 24 hour period should be\n      excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.",
      "rdfs:label": "exceptDate",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:VideoGameSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A video game series.",
      "rdfs:label": "VideoGameSeries",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      }
    },
    {
      "@id": "schema:additionalType",
      "@type": "rdf:Property",
      "rdfs:comment": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
      "rdfs:label": "additionalType",
      "rdfs:subPropertyOf": {
        "@id": "rdf:type"
      },
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:StrengthTraining",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Physical activity that is engaged in to improve muscle and bone strength. Also referred to as resistance training.",
      "rdfs:label": "StrengthTraining",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:result",
      "@type": "rdf:Property",
      "rdfs:comment": "The result produced in the action. e.g. John wrote *a book*.",
      "rdfs:label": "result",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:knownVehicleDamages",
      "@type": "rdf:Property",
      "rdfs:comment": "A textual description of known damages, both repaired and unrepaired.",
      "rdfs:label": "knownVehicleDamages",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:thumbnail",
      "@type": "rdf:Property",
      "rdfs:comment": "Thumbnail image for an image or video.",
      "rdfs:label": "thumbnail",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:ImageObject"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:ImageObject"
      }
    },
    {
      "@id": "schema:OccupationalExperienceRequirements",
      "@type": "rdfs:Class",
      "rdfs:comment": "Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].",
      "rdfs:label": "OccupationalExperienceRequirements",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2681"
      }
    },
    {
      "@id": "schema:broadcastFrequency",
      "@type": "rdf:Property",
      "rdfs:comment": "The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. \"87 FM\".",
      "rdfs:label": "broadcastFrequency",
      "schema:domainIncludes": [
        {
          "@id": "schema:BroadcastService"
        },
        {
          "@id": "schema:BroadcastChannel"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:BroadcastFrequencySpecification"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:SpeechPathology",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The scientific study and treatment of defects, disorders, and malfunctions of speech and voice, as stuttering, lisping, or lalling, and of language disturbances, as aphasia or delayed language acquisition.",
      "rdfs:label": "SpeechPathology",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:object",
      "@type": "rdf:Property",
      "rdfs:comment": "The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*.",
      "rdfs:label": "object",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:MolecularEntity",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": {
        "@id": "http://bioschemas.org"
      },
      "rdfs:comment": "Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.",
      "rdfs:label": "MolecularEntity",
      "rdfs:subClassOf": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:numTracks",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of tracks in this album or playlist.",
      "rdfs:label": "numTracks",
      "schema:domainIncludes": {
        "@id": "schema:MusicPlaylist"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:isBasedOnUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.",
      "rdfs:label": "isBasedOnUrl",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:isBasedOn"
      }
    },
    {
      "@id": "schema:Gastroenterologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of digestive system.",
      "rdfs:label": "Gastroenterologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:WearableMeasurementBack",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the back section, for example of a jacket",
      "rdfs:label": "WearableMeasurementBack",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:numberOfDoors",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of doors.\\n\\nTypical unit code(s): C62",
      "rdfs:label": "numberOfDoors",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:loanMortgageMandateAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.",
      "rdfs:label": "loanMortgageMandateAmount",
      "schema:domainIncludes": {
        "@id": "schema:MortgageLoan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:multipleValues",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether multiple values are allowed for the property.  Default is false.",
      "rdfs:label": "multipleValues",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:openingHours",
      "@type": "rdf:Property",
      "rdfs:comment": "The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\\n\\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \\n* Here is an example: <code>&lt;time itemprop=\"openingHours\" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.",
      "rdfs:label": "openingHours",
      "schema:domainIncludes": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:LocalBusiness"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ReimbursementCap",
      "@type": "schema:DrugCostCategory",
      "rdfs:comment": "The drug's cost represents the maximum reimbursement paid by an insurer for the drug.",
      "rdfs:label": "ReimbursementCap",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:BusinessSupport",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "BusinessSupport: this is a benefit for supporting businesses.",
      "rdfs:label": "BusinessSupport",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:lesser",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is lesser than the object.",
      "rdfs:label": "lesser",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:jobTitle",
      "@type": "rdf:Property",
      "rdfs:comment": "The job title of the person (for example, Financial Manager).",
      "rdfs:label": "jobTitle",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2192"
      }
    },
    {
      "@id": "schema:ActivationFee",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the activation fee part of the total price for an offered product, for example a cellphone contract.",
      "rdfs:label": "ActivationFee",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:areaServed",
      "@type": "rdf:Property",
      "rdfs:comment": "The geographic area where a service or offered item is provided.",
      "rdfs:label": "areaServed",
      "schema:domainIncludes": [
        {
          "@id": "schema:DeliveryChargeSpecification"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:AdministrativeArea"
        }
      ]
    },
    {
      "@id": "schema:specialOpeningHoursSpecification",
      "@type": "rdf:Property",
      "rdfs:comment": "The special opening hours of a certain place.\\n\\nUse this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].\n      ",
      "rdfs:label": "specialOpeningHoursSpecification",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      }
    },
    {
      "@id": "schema:paymentDue",
      "@type": "rdf:Property",
      "rdfs:comment": "The date that payment is due.",
      "rdfs:label": "paymentDue",
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:supersededBy": {
        "@id": "schema:paymentDueDate"
      }
    },
    {
      "@id": "schema:serverStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "Status of a game server.",
      "rdfs:label": "serverStatus",
      "schema:domainIncludes": {
        "@id": "schema:GameServer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:GameServerStatus"
      }
    },
    {
      "@id": "schema:color",
      "@type": "rdf:Property",
      "rdfs:comment": "The color of the product.",
      "rdfs:label": "color",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:CorrectionComment",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[comment]] that corrects [[CreativeWork]].",
      "rdfs:label": "CorrectionComment",
      "rdfs:subClassOf": {
        "@id": "schema:Comment"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1950"
      }
    },
    {
      "@id": "schema:ReturnMethodEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates several types of product return methods.",
      "rdfs:label": "ReturnMethodEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:Residence",
      "@type": "rdfs:Class",
      "rdfs:comment": "The place where a person lives.",
      "rdfs:label": "Residence",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:medicalSpecialty",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical specialty of the provider.",
      "rdfs:label": "medicalSpecialty",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalOrganization"
        },
        {
          "@id": "schema:MedicalClinic"
        },
        {
          "@id": "schema:Physician"
        },
        {
          "@id": "schema:Hospital"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalSpecialty"
      }
    },
    {
      "@id": "schema:Manuscript",
      "@type": "rdfs:Class",
      "rdfs:comment": "A book, document, or piece of music written by hand rather than typed or printed.",
      "rdfs:label": "Manuscript",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1448"
      }
    },
    {
      "@id": "schema:SiteNavigationElement",
      "@type": "rdfs:Class",
      "rdfs:comment": "A navigation element of the page.",
      "rdfs:label": "SiteNavigationElement",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:SheetMusic",
      "@type": "rdfs:Class",
      "rdfs:comment": "Printed music, as opposed to performed or recorded music.",
      "rdfs:label": "SheetMusic",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1448"
      }
    },
    {
      "@id": "schema:diagnosis",
      "@type": "rdf:Property",
      "rdfs:comment": "One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.",
      "rdfs:label": "diagnosis",
      "schema:domainIncludes": [
        {
          "@id": "schema:Patient"
        },
        {
          "@id": "schema:DDxElement"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalCondition"
      }
    },
    {
      "@id": "schema:cvdNumVentUse",
      "@type": "rdf:Property",
      "rdfs:comment": "numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.",
      "rdfs:label": "cvdNumVentUse",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:RsvpResponseNo",
      "@type": "schema:RsvpResponseType",
      "rdfs:comment": "The invitee will not attend.",
      "rdfs:label": "RsvpResponseNo"
    },
    {
      "@id": "schema:riskFactor",
      "@type": "rdf:Property",
      "rdfs:comment": "A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition.",
      "rdfs:label": "riskFactor",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalRiskFactor"
      }
    },
    {
      "@id": "schema:DataType",
      "@type": "rdfs:Class",
      "rdfs:comment": "The basic data types such as Integers, Strings, etc.",
      "rdfs:label": "DataType",
      "rdfs:subClassOf": {
        "@id": "rdfs:Class"
      }
    },
    {
      "@id": "schema:AutoPartsStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "An auto parts store.",
      "rdfs:label": "AutoPartsStore",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Store"
        },
        {
          "@id": "schema:AutomotiveBusiness"
        }
      ]
    },
    {
      "@id": "schema:RadioEpisode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A radio episode which can be part of a series or season.",
      "rdfs:label": "RadioEpisode",
      "rdfs:subClassOf": {
        "@id": "schema:Episode"
      }
    },
    {
      "@id": "schema:isPartOf",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.",
      "rdfs:label": "isPartOf",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:hasPart"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:loanRepaymentForm",
      "@type": "rdf:Property",
      "rdfs:comment": "A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment.",
      "rdfs:label": "loanRepaymentForm",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:Season",
      "@type": "rdfs:Class",
      "rdfs:comment": "A media season e.g. tv, radio, video game etc.",
      "rdfs:label": "Season",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:supersededBy": {
        "@id": "schema:CreativeWorkSeason"
      }
    },
    {
      "@id": "schema:HalalDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet conforming to Islamic dietary practices.",
      "rdfs:label": "HalalDiet"
    },
    {
      "@id": "schema:ingredients",
      "@type": "rdf:Property",
      "rdfs:comment": "A single ingredient used in the recipe, e.g. sugar, flour or garlic.",
      "rdfs:label": "ingredients",
      "rdfs:subPropertyOf": {
        "@id": "schema:supply"
      },
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:recipeIngredient"
      }
    },
    {
      "@id": "schema:clinicalPharmacology",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).",
      "rdfs:label": "clinicalPharmacology",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:DaySpa",
      "@type": "rdfs:Class",
      "rdfs:comment": "A day spa.",
      "rdfs:label": "DaySpa",
      "rdfs:subClassOf": {
        "@id": "schema:HealthAndBeautyBusiness"
      }
    },
    {
      "@id": "schema:percentile75",
      "@type": "rdf:Property",
      "rdfs:comment": "The 75th percentile value.",
      "rdfs:label": "percentile75",
      "schema:domainIncludes": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:AnalysisNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.",
      "rdfs:label": "AnalysisNewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:NewsArticle"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:energyEfficiencyScaleMax",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.",
      "rdfs:label": "energyEfficiencyScaleMax",
      "schema:domainIncludes": {
        "@id": "schema:EnergyConsumptionDetails"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EUEnergyEfficiencyEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:hasMenuSection",
      "@type": "rdf:Property",
      "rdfs:comment": "A subgrouping of the menu (by dishes, course, serving time period, etc.).",
      "rdfs:label": "hasMenuSection",
      "schema:domainIncludes": [
        {
          "@id": "schema:Menu"
        },
        {
          "@id": "schema:MenuSection"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:MenuSection"
      }
    },
    {
      "@id": "schema:StudioAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "StudioAlbum.",
      "rdfs:label": "StudioAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:ReturnShippingFees",
      "@type": "schema:ReturnFeesEnumeration",
      "rdfs:comment": "Specifies that the customer must pay the return shipping costs when returning a product",
      "rdfs:label": "ReturnShippingFees",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:actionableFeedbackPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.",
      "rdfs:label": "actionableFeedbackPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:NewsMediaOrganization"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:containsSeason",
      "@type": "rdf:Property",
      "rdfs:comment": "A season that is part of the media series.",
      "rdfs:label": "containsSeason",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasPart"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:RadioSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWorkSeason"
      }
    },
    {
      "@id": "schema:polygon",
      "@type": "rdf:Property",
      "rdfs:comment": "A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.",
      "rdfs:label": "polygon",
      "schema:domainIncludes": {
        "@id": "schema:GeoShape"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:valueMaxLength",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the allowed range for number of characters in a literal value.",
      "rdfs:label": "valueMaxLength",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:parentOrganization",
      "@type": "rdf:Property",
      "rdfs:comment": "The larger organization that this organization is a [[subOrganization]] of, if any.",
      "rdfs:label": "parentOrganization",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:inverseOf": {
        "@id": "schema:subOrganization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:materialExtent",
      "@type": "rdf:Property",
      "rdfs:comment": {
        "@language": "en",
        "@value": "The quantity of the materials being described or an expression of the physical space they occupy."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "materialExtent"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1759"
      }
    },
    {
      "@id": "schema:Energy",
      "@type": "rdfs:Class",
      "rdfs:comment": "Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.",
      "rdfs:label": "Energy",
      "rdfs:subClassOf": {
        "@id": "schema:Quantity"
      }
    },
    {
      "@id": "schema:DeactivateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).",
      "rdfs:label": "DeactivateAction",
      "rdfs:subClassOf": {
        "@id": "schema:ControlAction"
      }
    },
    {
      "@id": "schema:discount",
      "@type": "rdf:Property",
      "rdfs:comment": "Any discount applied (to an Order).",
      "rdfs:label": "discount",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:contentReferenceTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.",
      "rdfs:label": "contentReferenceTime",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1050"
      }
    },
    {
      "@id": "schema:MusicAlbum",
      "@type": "rdfs:Class",
      "rdfs:comment": "A collection of music tracks.",
      "rdfs:label": "MusicAlbum",
      "rdfs:subClassOf": {
        "@id": "schema:MusicPlaylist"
      }
    },
    {
      "@id": "schema:isPartOfBioChemEntity",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity. ",
      "rdfs:label": "isPartOfBioChemEntity",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:inverseOf": {
        "@id": "schema:hasBioChemEntityPart"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BioChemEntity"
      }
    },
    {
      "@id": "schema:vehicleSpecialUsage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.",
      "rdfs:label": "vehicleSpecialUsage",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CarUsageType"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:TravelAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants.",
      "rdfs:label": "TravelAction",
      "rdfs:subClassOf": {
        "@id": "schema:MoveAction"
      }
    },
    {
      "@id": "schema:installUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "URL at which the app may be installed, if different from the URL of the item.",
      "rdfs:label": "installUrl",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:healthcareReportingData",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of [[Dataset]].",
      "rdfs:label": "healthcareReportingData",
      "schema:domainIncludes": {
        "@id": "schema:Hospital"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Dataset"
        },
        {
          "@id": "schema:CDCPMDRecord"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:programMembershipUsed",
      "@type": "rdf:Property",
      "rdfs:comment": "Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.",
      "rdfs:label": "programMembershipUsed",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ProgramMembership"
      }
    },
    {
      "@id": "schema:nationality",
      "@type": "rdf:Property",
      "rdfs:comment": "Nationality of the person.",
      "rdfs:label": "nationality",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Country"
      }
    },
    {
      "@id": "schema:availableDeliveryMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The delivery method(s) available for this offer.",
      "rdfs:label": "availableDeliveryMethod",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DeliveryMethod"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Permit",
      "@type": "rdfs:Class",
      "rdfs:comment": "A permit issued by an organization, e.g. a parking pass.",
      "rdfs:label": "Permit",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:honorificPrefix",
      "@type": "rdf:Property",
      "rdfs:comment": "An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.",
      "rdfs:label": "honorificPrefix",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:recipeCuisine",
      "@type": "rdf:Property",
      "rdfs:comment": "The cuisine of the recipe (for example, French or Ethiopian).",
      "rdfs:label": "recipeCuisine",
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Gynecologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to the health care of women, particularly in the diagnosis and treatment of disorders affecting the female reproductive system.",
      "rdfs:label": "Gynecologic",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:albumProductionType",
      "@type": "rdf:Property",
      "rdfs:comment": "Classification of the album by it's type of content: soundtrack, live album, studio album, etc.",
      "rdfs:label": "albumProductionType",
      "schema:domainIncludes": {
        "@id": "schema:MusicAlbum"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbumProductionType"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:maintainer",
      "@type": "rdf:Property",
      "rdfs:comment": "A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on \"upstream\" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.\n      ",
      "rdfs:label": "maintainer",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2311"
      }
    },
    {
      "@id": "schema:additionalNumberOfGuests",
      "@type": "rdf:Property",
      "rdfs:comment": "If responding yes, the number of guests who will attend in addition to the invitee.",
      "rdfs:label": "additionalNumberOfGuests",
      "schema:domainIncludes": {
        "@id": "schema:RsvpAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:workLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A contact location for a person's place of work.",
      "rdfs:label": "workLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:ContactPoint"
        }
      ]
    },
    {
      "@id": "schema:numberedPosition",
      "@type": "rdf:Property",
      "rdfs:comment": "A number associated with a role in an organization, for example, the number on an athlete's jersey.",
      "rdfs:label": "numberedPosition",
      "schema:domainIncludes": {
        "@id": "schema:OrganizationRole"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:EffectivenessHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about the effectiveness-related aspects of a health topic.",
      "rdfs:label": "EffectivenessHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:WholesaleStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A wholesale store.",
      "rdfs:label": "WholesaleStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:membershipNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "A unique identifier for the membership.",
      "rdfs:label": "membershipNumber",
      "schema:domainIncludes": {
        "@id": "schema:ProgramMembership"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:FundingScheme",
      "@type": "rdfs:Class",
      "rdfs:comment": "A FundingScheme combines organizational, project and policy aspects of grant-based funding\n    that sets guidelines, principles and mechanisms to support other kinds of projects and activities.\n    Funding is typically organized via [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA, ...",
      "rdfs:label": "FundingScheme",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        }
      ]
    },
    {
      "@id": "schema:Recommendation",
      "@type": "rdfs:Class",
      "rdfs:comment": "[[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.",
      "rdfs:label": "Recommendation",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2405"
      }
    },
    {
      "@id": "schema:Clinician",
      "@type": "schema:MedicalAudienceType",
      "rdfs:comment": "Medical clinicians, including practicing physicians and other medical professionals involved in clinical practice.",
      "rdfs:label": "Clinician",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:medicineSystem",
      "@type": "rdf:Property",
      "rdfs:comment": "The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.",
      "rdfs:label": "medicineSystem",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicineSystem"
      }
    },
    {
      "@id": "schema:usesDevice",
      "@type": "rdf:Property",
      "rdfs:comment": "Device used to perform the test.",
      "rdfs:label": "usesDevice",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalDevice"
      }
    },
    {
      "@id": "schema:typicalAgeRange",
      "@type": "rdf:Property",
      "rdfs:comment": "The typical expected age range, e.g. '7-9', '11-'.",
      "rdfs:label": "typicalAgeRange",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:author",
      "@type": "rdf:Property",
      "rdfs:comment": "The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.",
      "rdfs:label": "author",
      "schema:domainIncludes": [
        {
          "@id": "schema:Rating"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:inStoreReturnsOffered",
      "@type": "rdf:Property",
      "rdfs:comment": "Are in-store returns offered? (for more advanced return methods use the [[returnMethod]] property)",
      "rdfs:label": "inStoreReturnsOffered",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:collectionSize",
      "@type": "rdf:Property",
      "rdfs:comment": {
        "@language": "en",
        "@value": "The number of items in the [[Collection]]."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "collectionSize"
      },
      "schema:domainIncludes": {
        "@id": "schema:Collection"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1759"
      }
    },
    {
      "@id": "schema:MarryAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of marrying a person.",
      "rdfs:label": "MarryAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:isAccessoryOrSparePartFor",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to another product (or multiple products) for which this product is an accessory or spare part.",
      "rdfs:label": "isAccessoryOrSparePartFor",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DataDownload",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://www.w3.org/ns/dcat#Distribution"
      },
      "rdfs:comment": "A dataset in downloadable form.",
      "rdfs:label": "DataDownload",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_DatasetClass"
      }
    },
    {
      "@id": "schema:associatedMediaReview",
      "@type": "rdf:Property",
      "rdfs:comment": "An associated [[MediaReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].",
      "rdfs:label": "associatedMediaReview",
      "rdfs:subPropertyOf": {
        "@id": "schema:associatedReview"
      },
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:BoatReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for boat travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "BoatReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1755"
      }
    },
    {
      "@id": "schema:HinduTemple",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Hindu temple.",
      "rdfs:label": "HinduTemple",
      "rdfs:subClassOf": {
        "@id": "schema:PlaceOfWorship"
      }
    },
    {
      "@id": "schema:Diagnostic",
      "@type": "schema:MedicalDevicePurpose",
      "rdfs:comment": "A medical device used for diagnostic purposes.",
      "rdfs:label": "Diagnostic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:serviceOutput",
      "@type": "rdf:Property",
      "rdfs:comment": "The tangible thing generated by the service, e.g. a passport, permit, etc.",
      "rdfs:label": "serviceOutput",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:Nerve",
      "@type": "rdfs:Class",
      "rdfs:comment": "A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.",
      "rdfs:label": "Nerve",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:requiredMaxAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Audiences defined by a person's maximum age.",
      "rdfs:label": "requiredMaxAge",
      "schema:domainIncludes": {
        "@id": "schema:PeopleAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:DrivingSchoolVehicleUsage",
      "@type": "schema:CarUsageType",
      "rdfs:comment": "Indicates the usage of the vehicle for driving school.",
      "rdfs:label": "DrivingSchoolVehicleUsage",
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:TelevisionStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A television station.",
      "rdfs:label": "TelevisionStation",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:shippingLabel",
      "@type": "rdf:Property",
      "rdfs:comment": "Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).",
      "rdfs:label": "shippingLabel",
      "schema:domainIncludes": [
        {
          "@id": "schema:ShippingRateSettings"
        },
        {
          "@id": "schema:OfferShippingDetails"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:language",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The language used on this action.",
      "rdfs:label": "language",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:CommunicateAction"
        },
        {
          "@id": "schema:WriteAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Language"
      },
      "schema:supersededBy": {
        "@id": "schema:inLanguage"
      }
    },
    {
      "@id": "schema:Osteopathic",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "A system of medicine focused on promoting the body's innate ability to heal itself.",
      "rdfs:label": "Osteopathic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:underName",
      "@type": "rdf:Property",
      "rdfs:comment": "The person or organization the reservation or ticket is for.",
      "rdfs:label": "underName",
      "schema:domainIncludes": [
        {
          "@id": "schema:Ticket"
        },
        {
          "@id": "schema:Reservation"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:WearableSizeGroupMens",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Mens\" for wearables.",
      "rdfs:label": "WearableSizeGroupMens",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:CollectionPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Collection page.",
      "rdfs:label": "CollectionPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:Question",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.",
      "rdfs:label": "Question",
      "rdfs:subClassOf": {
        "@id": "schema:Comment"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_QAStackExchange"
      }
    },
    {
      "@id": "schema:serialNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.",
      "rdfs:label": "serialNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:IndividualProduct"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Substance",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/105590001"
      },
      "rdfs:comment": "Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.",
      "rdfs:label": "Substance",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:dateline",
      "@type": "rdf:Property",
      "rdfs:comment": "A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.\n\nStructured representations of dateline-related information can also be expressed more explicitly using [[locationCreated]] (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use [[contentLocation]].\n\nDateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: \"BEIRUT, Lebanon, June 2.\", \"Paris, France\", \"December 19, 2017 11:43AM Reporting from Washington\", \"Beijing/Moscow\", \"QUEZON CITY, Philippines\".\n      ",
      "rdfs:label": "dateline",
      "schema:domainIncludes": {
        "@id": "schema:NewsArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:OnlineOnly",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is available only online.",
      "rdfs:label": "OnlineOnly"
    },
    {
      "@id": "schema:transitTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The typical delay the order has been sent for delivery and the goods reach the final customer. Typical properties: minValue, maxValue, unitCode (d for DAY).",
      "rdfs:label": "transitTime",
      "schema:domainIncludes": {
        "@id": "schema:ShippingDeliveryTime"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:alumniOf",
      "@type": "rdf:Property",
      "rdfs:comment": "An organization that the person is an alumni of.",
      "rdfs:label": "alumniOf",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:inverseOf": {
        "@id": "schema:alumni"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:EducationalOrganization"
        }
      ]
    },
    {
      "@id": "schema:contentType",
      "@type": "rdf:Property",
      "rdfs:comment": "The supported content type(s) for an EntryPoint response.",
      "rdfs:label": "contentType",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:benefits",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of benefits associated with the job.",
      "rdfs:label": "benefits",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:jobBenefits"
      }
    },
    {
      "@id": "schema:childMinAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Minimal age of the child.",
      "rdfs:label": "childMinAge",
      "schema:domainIncludes": {
        "@id": "schema:ParentAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:funder",
      "@type": "rdf:Property",
      "rdfs:comment": "A person or organization that supports (sponsors) something through some kind of financial contribution.",
      "rdfs:label": "funder",
      "rdfs:subPropertyOf": {
        "@id": "schema:sponsor"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:MonetaryGrant"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:Accommodation",
      "@type": "rdfs:Class",
      "rdfs:comment": "An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.\nFor more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Accommodation",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:cvdNumTotBeds",
      "@type": "rdf:Property",
      "rdfs:comment": "numtotbeds - ALL HOSPITAL BEDS: Total number of all Inpatient and outpatient beds, including all staffed,ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.",
      "rdfs:label": "cvdNumTotBeds",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:globalLocationNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.",
      "rdfs:label": "globalLocationNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:GasStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A gas station.",
      "rdfs:label": "GasStation",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:archiveHeld",
      "@type": "rdf:Property",
      "rdfs:comment": {
        "@language": "en",
        "@value": "Collection, [fonds](https://en.wikipedia.org/wiki/Fonds), or item held, kept or maintained by an [[ArchiveOrganization]]."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "archiveHeld"
      },
      "schema:domainIncludes": {
        "@id": "schema:ArchiveOrganization"
      },
      "schema:inverseOf": {
        "@id": "schema:holdingArchive"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ArchiveComponent"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1758"
      }
    },
    {
      "@id": "schema:Pediatric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that specializes in the care of infants, children and adolescents.",
      "rdfs:label": "Pediatric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EvidenceLevelC",
      "@type": "schema:MedicalEvidenceLevel",
      "rdfs:comment": "Only consensus opinion of experts, case studies, or standard-of-care.",
      "rdfs:label": "EvidenceLevelC",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MultiPlayer",
      "@type": "schema:GamePlayMode",
      "rdfs:comment": "Play mode: MultiPlayer. Requiring or allowing multiple human players to play simultaneously.",
      "rdfs:label": "MultiPlayer"
    },
    {
      "@id": "schema:ItemListUnordered",
      "@type": "schema:ItemListOrderType",
      "rdfs:comment": "An ItemList ordered with no explicit order.",
      "rdfs:label": "ItemListUnordered"
    },
    {
      "@id": "schema:numberOfPartialBathrooms",
      "@type": "rdf:Property",
      "rdfs:comment": "Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field). ",
      "rdfs:label": "numberOfPartialBathrooms",
      "schema:domainIncludes": [
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:FloorPlan"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:Message",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single message from a sender to one or more organizations or people.",
      "rdfs:label": "Message",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:TennisComplex",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tennis complex.",
      "rdfs:label": "TennisComplex",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:doesNotShip",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates when shipping to a particular [[shippingDestination]] is not available.",
      "rdfs:label": "doesNotShip",
      "schema:domainIncludes": [
        {
          "@id": "schema:OfferShippingDetails"
        },
        {
          "@id": "schema:ShippingRateSettings"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:MedicalContraindication",
      "@type": "rdfs:Class",
      "rdfs:comment": "A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but that these risks may be outweighed by other considerations or mitigated by other measures).",
      "rdfs:label": "MedicalContraindication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:cvdNumC19Died",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.",
      "rdfs:label": "cvdNumC19Died",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:legislationDate",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#date_document"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#date_document"
      },
      "rdfs:comment": "The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force.",
      "rdfs:label": "legislationDate",
      "rdfs:subPropertyOf": {
        "@id": "schema:dateCreated"
      },
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:MediaGallery",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Media gallery page. A mixed-media page that can contains media such as images, videos, and other multimedia.",
      "rdfs:label": "MediaGallery",
      "rdfs:subClassOf": {
        "@id": "schema:CollectionPage"
      }
    },
    {
      "@id": "schema:RegisterAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of registering to be a user of a service, product or web page.\\n\\nRelated actions:\\n\\n* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\\n* [FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.",
      "rdfs:label": "RegisterAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:AmpStory",
      "@type": "rdfs:Class",
      "rdfs:comment": "A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.",
      "rdfs:label": "AmpStory",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2646"
      }
    },
    {
      "@id": "schema:typicalCreditsPerTerm",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.",
      "rdfs:label": "typicalCreditsPerTerm",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:StructuredValue"
        },
        {
          "@id": "schema:Integer"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:illustrator",
      "@type": "rdf:Property",
      "rdfs:comment": "The illustrator of the book.",
      "rdfs:label": "illustrator",
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:ExercisePlan",
      "@type": "rdfs:Class",
      "rdfs:comment": "Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.",
      "rdfs:label": "ExercisePlan",
      "rdfs:subClassOf": [
        {
          "@id": "schema:PhysicalActivity"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ChildCare",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Childcare center.",
      "rdfs:label": "ChildCare",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:MediaManipulationRatingEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": " Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.",
      "rdfs:label": "MediaManipulationRatingEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:stage",
      "@type": "rdf:Property",
      "rdfs:comment": "The stage of the condition, if applicable.",
      "rdfs:label": "stage",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalConditionStage"
      }
    },
    {
      "@id": "schema:productID",
      "@type": "rdf:Property",
      "rdfs:comment": "The product identifier, such as ISBN. For example: ``` meta itemprop=\"productID\" content=\"isbn:123-456-789\" ```.",
      "rdfs:label": "productID",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ComedyClub",
      "@type": "rdfs:Class",
      "rdfs:comment": "A comedy club.",
      "rdfs:label": "ComedyClub",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:speakable",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.\n\nThe *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:\n\n1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.\n\n2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the [[cssSelector]] property.\n\n3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.\n\n\nFor more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this\nwe define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.\n         ",
      "rdfs:label": "speakable",
      "schema:domainIncludes": [
        {
          "@id": "schema:Article"
        },
        {
          "@id": "schema:WebPage"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:SpeakableSpecification"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1389"
      }
    },
    {
      "@id": "schema:SendAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:\\n\\n* [[ReceiveAction]]: The reciprocal of SendAction.\\n* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).",
      "rdfs:label": "SendAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:yearBuilt",
      "@type": "rdf:Property",
      "rdfs:comment": "The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field). ",
      "rdfs:label": "yearBuilt",
      "schema:domainIncludes": {
        "@id": "schema:Accommodation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:preOp",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the workup, testing, and other preparations required before implanting this device.",
      "rdfs:label": "preOp",
      "schema:domainIncludes": {
        "@id": "schema:MedicalDevice"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Thesis",
      "@type": "rdfs:Class",
      "rdfs:comment": "A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.",
      "rdfs:label": "Thesis",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:source": {
        "@id": "http://www.productontology.org/id/Thesis"
      }
    },
    {
      "@id": "schema:ShortStory",
      "@type": "rdfs:Class",
      "rdfs:comment": "Short story or tale. A brief work of literature, usually written in narrative prose.",
      "rdfs:label": "ShortStory",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1976"
      }
    },
    {
      "@id": "schema:ScheduleAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "Scheduling future actions, events, or tasks.\\n\\nRelated actions:\\n\\n* [[ReserveAction]]: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.",
      "rdfs:label": "ScheduleAction",
      "rdfs:subClassOf": {
        "@id": "schema:PlanAction"
      }
    },
    {
      "@id": "schema:model",
      "@type": "rdf:Property",
      "rdfs:comment": "The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.",
      "rdfs:label": "model",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:ProductModel"
        }
      ]
    },
    {
      "@id": "schema:Ayurvedic",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "A system of medicine that originated in India over thousands of years and that focuses on integrating and balancing the body, mind, and spirit.",
      "rdfs:label": "Ayurvedic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:depth",
      "@type": "rdf:Property",
      "rdfs:comment": "The depth of the item.",
      "rdfs:label": "depth",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:VisualArtwork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Distance"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Nonprofit501c26",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c26: Non-profit type referring to State-Sponsored Organizations Providing Health Coverage for High-Risk Individuals.",
      "rdfs:label": "Nonprofit501c26",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:workPresented",
      "@type": "rdf:Property",
      "rdfs:comment": "The movie presented during this event.",
      "rdfs:label": "workPresented",
      "rdfs:subPropertyOf": {
        "@id": "schema:workFeatured"
      },
      "schema:domainIncludes": {
        "@id": "schema:ScreeningEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Movie"
      }
    },
    {
      "@id": "schema:hasDriveThroughService",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.",
      "rdfs:label": "hasDriveThroughService",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:exchangeRateSpread",
      "@type": "rdf:Property",
      "rdfs:comment": "The difference between the price at which a broker or other intermediary buys and sells foreign currency.",
      "rdfs:label": "exchangeRateSpread",
      "schema:domainIncludes": {
        "@id": "schema:ExchangeRateSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:maximumAttendeeCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The total number of individuals that may attend an event or venue.",
      "rdfs:label": "maximumAttendeeCapacity",
      "schema:domainIncludes": [
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:inPlaylist",
      "@type": "rdf:Property",
      "rdfs:comment": "The playlist to which this recording belongs.",
      "rdfs:label": "inPlaylist",
      "schema:domainIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicPlaylist"
      }
    },
    {
      "@id": "schema:RadiationTherapy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A process of care using radiation aimed at improving a health condition.",
      "rdfs:label": "RadiationTherapy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTherapy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:naturalProgression",
      "@type": "rdf:Property",
      "rdfs:comment": "The expected progression of the condition if it is not treated and allowed to progress naturally.",
      "rdfs:label": "naturalProgression",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:numberOfSeasons",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of seasons in this series.",
      "rdfs:label": "numberOfSeasons",
      "schema:domainIncludes": [
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:employees",
      "@type": "rdf:Property",
      "rdfs:comment": "People working for this organization.",
      "rdfs:label": "employees",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:employee"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.",
      "rdfs:label": "EUEnergyEfficiencyEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:EnergyEfficiencyEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:predecessorOf",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer from a previous, often discontinued variant of the product to its newer variant.",
      "rdfs:label": "predecessorOf",
      "schema:domainIncludes": {
        "@id": "schema:ProductModel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ProductModel"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:departurePlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "The platform from which the train departs.",
      "rdfs:label": "departurePlatform",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:expires",
      "@type": "rdf:Property",
      "rdfs:comment": "Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.",
      "rdfs:label": "expires",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:seatNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The location of the reserved seat (e.g., 27).",
      "rdfs:label": "seatNumber",
      "schema:domainIncludes": {
        "@id": "schema:Seat"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:DiscoverAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of discovering/finding an object.",
      "rdfs:label": "DiscoverAction",
      "rdfs:subClassOf": {
        "@id": "schema:FindAction"
      }
    },
    {
      "@id": "schema:Monday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Sunday and Tuesday.",
      "rdfs:label": "Monday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q105"
      }
    },
    {
      "@id": "schema:estimatesRiskOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The condition, complication, or symptom whose risk is being estimated.",
      "rdfs:label": "estimatesRiskOf",
      "schema:domainIncludes": {
        "@id": "schema:MedicalRiskEstimator"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:RecommendedDoseSchedule",
      "@type": "rdfs:Class",
      "rdfs:comment": "A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.",
      "rdfs:label": "RecommendedDoseSchedule",
      "rdfs:subClassOf": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:cutoffTime",
      "@type": "rdf:Property",
      "rdfs:comment": "Order cutoff time allows merchants to describe the time after which they will no longer process orders received on that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property is expected to be most typically used via the [[ShippingRateSettings]] publication pattern. The time is indicated using the ISO-8601 Time format, e.g. \"23:30:00-05:00\" would represent 6:30 pm Eastern Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).",
      "rdfs:label": "cutoffTime",
      "schema:domainIncludes": {
        "@id": "schema:ShippingDeliveryTime"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Time"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:requiredCollateral",
      "@type": "rdf:Property",
      "rdfs:comment": "Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)",
      "rdfs:label": "requiredCollateral",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:weight",
      "@type": "rdf:Property",
      "rdfs:comment": "The weight of the product or person.",
      "rdfs:label": "weight",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:gtin13",
      "@type": "rdf:Property",
      "rdfs:comment": "The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
      "rdfs:label": "gtin13",
      "rdfs:subPropertyOf": [
        {
          "@id": "schema:identifier"
        },
        {
          "@id": "schema:gtin"
        }
      ],
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:PartiallyInForce",
      "@type": "schema:LegalForceStatus",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#InForce-partiallyInForce"
      },
      "rdfs:comment": "Indicates that parts of the legislation are in force, and parts are not.",
      "rdfs:label": "PartiallyInForce",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:energyEfficiencyScaleMin",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.",
      "rdfs:label": "energyEfficiencyScaleMin",
      "schema:domainIncludes": {
        "@id": "schema:EnergyConsumptionDetails"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EUEnergyEfficiencyEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:providerMobility",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the mobility of a provided service (e.g. 'static', 'dynamic').",
      "rdfs:label": "providerMobility",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:sizeGroup",
      "@type": "rdf:Property",
      "rdfs:comment": "The size group (also known as \"size type\") for a product's size. Size groups are common in the fashion industry to define size segments and suggested audiences for wearable products. Multiple values can be combined, for example \"men's big and tall\", \"petite maternity\" or \"regular\"",
      "rdfs:label": "sizeGroup",
      "schema:domainIncludes": {
        "@id": "schema:SizeSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:SizeGroupEnumeration"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:BankOrCreditUnion",
      "@type": "rdfs:Class",
      "rdfs:comment": "Bank or credit union.",
      "rdfs:label": "BankOrCreditUnion",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialService"
      }
    },
    {
      "@id": "schema:MedicalSymptom",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.",
      "rdfs:label": "MedicalSymptom",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalSignOrSymptom"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:HealthAspectEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].",
      "rdfs:label": "HealthAspectEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:itemShipped",
      "@type": "rdf:Property",
      "rdfs:comment": "Item(s) being shipped.",
      "rdfs:label": "itemShipped",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Product"
      }
    },
    {
      "@id": "schema:abridged",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether the book is an abridged edition.",
      "rdfs:label": "abridged",
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:diversityPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.",
      "rdfs:label": "diversityPolicy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:NewsMediaOrganization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:scheduleTimezone",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given. The value provided should be among those listed in the IANA Time Zone Database.",
      "rdfs:label": "scheduleTimezone",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:MathSolver",
      "@type": "rdfs:Class",
      "rdfs:comment": "A math solver which is capable of solving a subset of mathematical problems.",
      "rdfs:label": "MathSolver",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2740"
      }
    },
    {
      "@id": "schema:candidate",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The candidate subject of this action.",
      "rdfs:label": "candidate",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:VoteAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:functionalClass",
      "@type": "rdf:Property",
      "rdfs:comment": "The degree of mobility the joint allows.",
      "rdfs:label": "functionalClass",
      "schema:domainIncludes": {
        "@id": "schema:Joint"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:MedicalEntity"
        }
      ]
    },
    {
      "@id": "schema:ReturnFeesCustomerResponsibility",
      "@type": "schema:ReturnFeesEnumeration",
      "rdfs:comment": "Specifies that product returns must be paid for, and are the responsibility of, the customer.",
      "rdfs:label": "ReturnFeesCustomerResponsibility",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:VinylFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "VinylFormat.",
      "rdfs:label": "VinylFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:priceValidUntil",
      "@type": "rdf:Property",
      "rdfs:comment": "The date after which the price is no longer available.",
      "rdfs:label": "priceValidUntil",
      "schema:domainIncludes": {
        "@id": "schema:Offer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:DigitalAudioTapeFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "DigitalAudioTapeFormat.",
      "rdfs:label": "DigitalAudioTapeFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:MedicalSign",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.",
      "rdfs:label": "MedicalSign",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalSignOrSymptom"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:discountCode",
      "@type": "rdf:Property",
      "rdfs:comment": "Code used to redeem a discount.",
      "rdfs:label": "discountCode",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BodyMeasurementWeight",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Body weight. Used, for example, to measure pantyhose.",
      "rdfs:label": "BodyMeasurementWeight",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:userInteractionCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.",
      "rdfs:label": "userInteractionCount",
      "schema:domainIncludes": {
        "@id": "schema:InteractionCounter"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:genre",
      "@type": "rdf:Property",
      "rdfs:comment": "Genre of the creative work, broadcast channel or group.",
      "rdfs:label": "genre",
      "schema:domainIncludes": [
        {
          "@id": "schema:MusicGroup"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:BroadcastChannel"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:contactType",
      "@type": "rdf:Property",
      "rdfs:comment": "A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.",
      "rdfs:label": "contactType",
      "schema:domainIncludes": {
        "@id": "schema:ContactPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:workTranslation",
      "@type": "rdf:Property",
      "rdfs:comment": "A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.",
      "rdfs:label": "workTranslation",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:translationOfWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:nerve",
      "@type": "rdf:Property",
      "rdfs:comment": "The underlying innervation associated with the muscle.",
      "rdfs:label": "nerve",
      "schema:domainIncludes": {
        "@id": "schema:Muscle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Nerve"
      }
    },
    {
      "@id": "schema:Mass",
      "@type": "rdfs:Class",
      "rdfs:comment": "Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.",
      "rdfs:label": "Mass",
      "rdfs:subClassOf": {
        "@id": "schema:Quantity"
      }
    },
    {
      "@id": "schema:duringMedia",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object representing the circumstances while performing this direction.",
      "rdfs:label": "duringMedia",
      "schema:domainIncludes": {
        "@id": "schema:HowToDirection"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:MediaObject"
        }
      ]
    },
    {
      "@id": "schema:FinancialProduct",
      "@type": "rdfs:Class",
      "rdfs:comment": "A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.",
      "rdfs:label": "FinancialProduct",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:SoftwareApplication",
      "@type": "rdfs:Class",
      "rdfs:comment": "A software application.",
      "rdfs:label": "SoftwareApplication",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:WearableSizeSystemEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates common size systems specific for wearable products",
      "rdfs:label": "WearableSizeSystemEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:SizeSystemEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Flexibility",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Physical activity that is engaged in to improve joint and muscle flexibility.",
      "rdfs:label": "Flexibility",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:PalliativeProcedure",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.",
      "rdfs:label": "PalliativeProcedure",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalTherapy"
        },
        {
          "@id": "schema:MedicalProcedure"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:reviewCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The count of total number of reviews.",
      "rdfs:label": "reviewCount",
      "schema:domainIncludes": {
        "@id": "schema:AggregateRating"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:TravelAgency",
      "@type": "rdfs:Class",
      "rdfs:comment": "A travel agency.",
      "rdfs:label": "TravelAgency",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:RecyclingCenter",
      "@type": "rdfs:Class",
      "rdfs:comment": "A recycling center.",
      "rdfs:label": "RecyclingCenter",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:readonlyValue",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a \"hidden\" input in an HTML form.",
      "rdfs:label": "readonlyValue",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:photo",
      "@type": "rdf:Property",
      "rdfs:comment": "A photograph of this place.",
      "rdfs:label": "photo",
      "rdfs:subPropertyOf": {
        "@id": "schema:image"
      },
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Photograph"
        },
        {
          "@id": "schema:ImageObject"
        }
      ]
    },
    {
      "@id": "schema:TaxiReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for a taxi.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "TaxiReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:sport",
      "@type": "rdf:Property",
      "rdfs:comment": "A type of sport (e.g. Baseball).",
      "rdfs:label": "sport",
      "schema:domainIncludes": [
        {
          "@id": "schema:SportsOrganization"
        },
        {
          "@id": "schema:SportsEvent"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1951"
      }
    },
    {
      "@id": "schema:ComicCoverArt",
      "@type": "rdfs:Class",
      "rdfs:comment": "The artwork on the cover of a comic.",
      "rdfs:label": "ComicCoverArt",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CoverArt"
        },
        {
          "@id": "schema:ComicStory"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:departureBusStop",
      "@type": "rdf:Property",
      "rdfs:comment": "The stop or station from which the bus departs.",
      "rdfs:label": "departureBusStop",
      "schema:domainIncludes": {
        "@id": "schema:BusTrip"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:BusStop"
        },
        {
          "@id": "schema:BusStation"
        }
      ]
    },
    {
      "@id": "schema:valueMinLength",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the minimum allowed range for number of characters in a literal value.",
      "rdfs:label": "valueMinLength",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:ProductModel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A datasheet or vendor specification of a product (in the sense of a prototypical description).",
      "rdfs:label": "ProductModel",
      "rdfs:subClassOf": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:recipe",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The recipe/instructions used to perform the action.",
      "rdfs:label": "recipe",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": {
        "@id": "schema:CookAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Recipe"
      }
    },
    {
      "@id": "schema:healthPlanCoinsuranceOption",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?",
      "rdfs:label": "healthPlanCoinsuranceOption",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanCostSharingSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:originatesFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The vasculature the lymphatic structure originates, or afferents, from.",
      "rdfs:label": "originatesFrom",
      "schema:domainIncludes": {
        "@id": "schema:LymphaticVessel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Vessel"
      }
    },
    {
      "@id": "schema:cvdNumC19HOPats",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.",
      "rdfs:label": "cvdNumC19HOPats",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:productionDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date of production of the item, e.g. vehicle.",
      "rdfs:label": "productionDate",
      "schema:domainIncludes": [
        {
          "@id": "schema:Vehicle"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:WearableSizeSystemContinental",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Continental size system for wearables.",
      "rdfs:label": "WearableSizeSystemContinental",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:aggregateRating",
      "@type": "rdf:Property",
      "rdfs:comment": "The overall rating, based on a collection of reviews or ratings, of the item.",
      "rdfs:label": "aggregateRating",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Brand"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:AggregateRating"
      }
    },
    {
      "@id": "schema:boardingPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of boarding policy used by the airline (e.g. zone-based or group-based).",
      "rdfs:label": "boardingPolicy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Flight"
        },
        {
          "@id": "schema:Airline"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:BoardingPolicyType"
      }
    },
    {
      "@id": "schema:DietNutrition",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "Dietetic and nutrition as a medical specialty.",
      "rdfs:label": "DietNutrition",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:administrationRoute",
      "@type": "rdf:Property",
      "rdfs:comment": "A route by which this drug may be administered, e.g. 'oral'.",
      "rdfs:label": "administrationRoute",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:mileageFromOdometer",
      "@type": "rdf:Property",
      "rdfs:comment": "The total distance travelled by the particular vehicle since its initial production, as read from its odometer.\\n\\nTypical unit code(s): KMT for kilometers, SMI for statute miles",
      "rdfs:label": "mileageFromOdometer",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:eligibleCustomerType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type(s) of customers for which the given offer is valid.",
      "rdfs:label": "eligibleCustomerType",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:BusinessEntityType"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DeliveryMethod",
      "@type": "rdfs:Class",
      "rdfs:comment": "A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\\n* http://purl.org/goodrelations/v1#DeliveryModeMail\\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\\n* http://purl.org/goodrelations/v1#DHL\\n* http://purl.org/goodrelations/v1#FederalExpress\\n* http://purl.org/goodrelations/v1#UPS\n        ",
      "rdfs:label": "DeliveryMethod",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:containedIn",
      "@type": "rdf:Property",
      "rdfs:comment": "The basic containment relation between a place and one that contains it.",
      "rdfs:label": "containedIn",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      },
      "schema:supersededBy": {
        "@id": "schema:containedInPlace"
      }
    },
    {
      "@id": "schema:targetPopulation",
      "@type": "rdf:Property",
      "rdfs:comment": "Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.",
      "rdfs:label": "targetPopulation",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:DoseSchedule"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:audienceType",
      "@type": "rdf:Property",
      "rdfs:comment": "The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).",
      "rdfs:label": "audienceType",
      "schema:domainIncludes": {
        "@id": "schema:Audience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:MerchantReturnPolicy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].",
      "rdfs:label": "MerchantReturnPolicy",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:PropertyValue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\\n\\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.\n    ",
      "rdfs:label": "PropertyValue",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:postalCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The postal code. For example, 94043.",
      "rdfs:label": "postalCode",
      "schema:domainIncludes": [
        {
          "@id": "schema:PostalAddress"
        },
        {
          "@id": "schema:DefinedRegion"
        },
        {
          "@id": "schema:GeoCoordinates"
        },
        {
          "@id": "schema:GeoShape"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:quarantineGuidelines",
      "@type": "rdf:Property",
      "rdfs:comment": "Guidelines about quarantine rules, e.g. in the context of a pandemic.",
      "rdfs:label": "quarantineGuidelines",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:WritePermission",
      "@type": "schema:DigitalDocumentPermissionType",
      "rdfs:comment": "Permission to write or edit the document.",
      "rdfs:label": "WritePermission"
    },
    {
      "@id": "schema:knowsLanguage",
      "@type": "rdf:Property",
      "rdfs:comment": "Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).",
      "rdfs:label": "knowsLanguage",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Language"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1688"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:episodeNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "Position of the episode within an ordered group of episodes.",
      "rdfs:label": "episodeNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:position"
      },
      "schema:domainIncludes": {
        "@id": "schema:Episode"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Integer"
        }
      ]
    },
    {
      "@id": "schema:embeddedTextCaption",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.",
      "rdfs:label": "embeddedTextCaption",
      "rdfs:subPropertyOf": {
        "@id": "schema:caption"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:ImageObject"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:AudioObject"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:Apartment",
      "@type": "rdfs:Class",
      "rdfs:comment": "An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Apartment\">http://en.wikipedia.org/wiki/Apartment</a>).",
      "rdfs:label": "Apartment",
      "rdfs:subClassOf": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:MedicalObservationalStudy",
      "@type": "rdfs:Class",
      "rdfs:comment": "An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.",
      "rdfs:label": "MedicalObservationalStudy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalStudy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:courseWorkload",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, \"2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week\".",
      "rdfs:label": "courseWorkload",
      "schema:domainIncludes": {
        "@id": "schema:CourseInstance"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1909"
      }
    },
    {
      "@id": "schema:transmissionMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.",
      "rdfs:label": "transmissionMethod",
      "schema:domainIncludes": {
        "@id": "schema:InfectiousDisease"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BowlingAlley",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bowling alley.",
      "rdfs:label": "BowlingAlley",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:album",
      "@type": "rdf:Property",
      "rdfs:comment": "A music album.",
      "rdfs:label": "album",
      "schema:domainIncludes": {
        "@id": "schema:MusicGroup"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbum"
      }
    },
    {
      "@id": "schema:PriceSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.",
      "rdfs:label": "PriceSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:bitrate",
      "@type": "rdf:Property",
      "rdfs:comment": "The bitrate of the media object.",
      "rdfs:label": "bitrate",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:MayTreatHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Related topics may be treated by a Topic.",
      "rdfs:label": "MayTreatHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:EnergyEfficiencyEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates energy efficiency levels (also known as \"classes\" or \"ratings\") and certifications that are part of several international energy efficiency standards.",
      "rdfs:label": "EnergyEfficiencyEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:acrissCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.",
      "rdfs:label": "acrissCode",
      "schema:domainIncludes": [
        {
          "@id": "schema:BusOrCoach"
        },
        {
          "@id": "schema:Car"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:netWorth",
      "@type": "rdf:Property",
      "rdfs:comment": "The total financial value of the person as calculated by subtracting assets from liabilities.",
      "rdfs:label": "netWorth",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ]
    },
    {
      "@id": "schema:spokenByCharacter",
      "@type": "rdf:Property",
      "rdfs:comment": "The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork.",
      "rdfs:label": "spokenByCharacter",
      "schema:domainIncludes": {
        "@id": "schema:Quotation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/271"
      }
    },
    {
      "@id": "schema:PayAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent pays a price to a participant.",
      "rdfs:label": "PayAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:paymentMethodId",
      "@type": "rdf:Property",
      "rdfs:comment": "An identifier for the method of payment used (e.g. the last 4 digits of the credit card).",
      "rdfs:label": "paymentMethodId",
      "schema:domainIncludes": [
        {
          "@id": "schema:Order"
        },
        {
          "@id": "schema:Invoice"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:FDAcategoryX",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation by the US FDA signifying that studies in animals or humans have demonstrated fetal abnormalities and/or there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience, and the risks involved in use of the drug in pregnant women clearly outweigh potential benefits.",
      "rdfs:label": "FDAcategoryX",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:vehicleIdentificationNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.",
      "rdfs:label": "vehicleIdentificationNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:serialNumber"
      },
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:clincalPharmacology",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).",
      "rdfs:label": "clincalPharmacology",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:clinicalPharmacology"
      }
    },
    {
      "@id": "schema:studyLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "The location in which the study is taking/took place.",
      "rdfs:label": "studyLocation",
      "schema:domainIncludes": {
        "@id": "schema:MedicalStudy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:DiabeticDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet appropriate for people with diabetes.",
      "rdfs:label": "DiabeticDiet"
    },
    {
      "@id": "schema:HinduDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet conforming to Hindu dietary practices, in particular, beef-free.",
      "rdfs:label": "HinduDiet"
    },
    {
      "@id": "schema:screenshot",
      "@type": "rdf:Property",
      "rdfs:comment": "A link to a screenshot image of the app.",
      "rdfs:label": "screenshot",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:ImageObject"
        }
      ]
    },
    {
      "@id": "schema:ConfirmAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of notifying someone that a future event/action is going to happen as expected.\\n\\nRelated actions:\\n\\n* [[CancelAction]]: The antonym of ConfirmAction.",
      "rdfs:label": "ConfirmAction",
      "rdfs:subClassOf": {
        "@id": "schema:InformAction"
      }
    },
    {
      "@id": "schema:subTest",
      "@type": "rdf:Property",
      "rdfs:comment": "A component test of the panel.",
      "rdfs:label": "subTest",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTestPanel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTest"
      }
    },
    {
      "@id": "schema:award",
      "@type": "rdf:Property",
      "rdfs:comment": "An award won by or for this item.",
      "rdfs:label": "award",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:fatContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of fat.",
      "rdfs:label": "fatContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:attendees",
      "@type": "rdf:Property",
      "rdfs:comment": "A person attending the event.",
      "rdfs:label": "attendees",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:attendee"
      }
    },
    {
      "@id": "schema:healthPlanDrugOption",
      "@type": "rdf:Property",
      "rdfs:comment": "TODO.",
      "rdfs:label": "healthPlanDrugOption",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:cvdFacilityCounty",
      "@type": "rdf:Property",
      "rdfs:comment": "Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]] to identify the facility. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.",
      "rdfs:label": "cvdFacilityCounty",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:seriousAdverseOutcome",
      "@type": "rdf:Property",
      "rdfs:comment": "A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.",
      "rdfs:label": "seriousAdverseOutcome",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalDevice"
        },
        {
          "@id": "schema:MedicalTherapy"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:DefinedRegion",
      "@type": "rdfs:Class",
      "rdfs:comment": "A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.\n\nExamples: a delivery destination when shopping. Region where regional pricing is configured.\n\nRequirement 1:\nCountry: US\nStates: \"NY\", \"CA\"\n\nRequirement 2:\nCountry: US\nPostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}\n{ [12345, 12345], [78945, 78945], }\nRegion = state, canton, prefecture, autonomous community...\n",
      "rdfs:label": "DefinedRegion",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:EnergyStarEnergyEfficiencyEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Used to indicate whether a product is EnergyStar certified.",
      "rdfs:label": "EnergyStarEnergyEfficiencyEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:EnergyEfficiencyEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:PerformingArtsTheater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A theater or other performing art center.",
      "rdfs:label": "PerformingArtsTheater",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:governmentBenefitsInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.",
      "rdfs:label": "governmentBenefitsInfo",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:GovernmentService"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:Number",
      "@type": [
        "rdfs:Class",
        "schema:DataType"
      ],
      "rdfs:comment": "Data type: Number.\\n\\nUsage guidelines:\\n\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "Number"
    },
    {
      "@id": "schema:evidenceOrigin",
      "@type": "rdf:Property",
      "rdfs:comment": "Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.",
      "rdfs:label": "evidenceOrigin",
      "schema:domainIncludes": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:hasMolecularFunction",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/BioChemEntity"
      },
      "rdfs:comment": "Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.",
      "rdfs:label": "hasMolecularFunction",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ]
    },
    {
      "@id": "schema:Blog",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a \"weblog\". Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloqually referred to by the same term.",
      "rdfs:label": "Blog",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:assemblyVersion",
      "@type": "rdf:Property",
      "rdfs:comment": "Associated product/technology version. e.g., .NET Framework 4.5.",
      "rdfs:label": "assemblyVersion",
      "schema:domainIncludes": {
        "@id": "schema:APIReference"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:processingTime",
      "@type": "rdf:Property",
      "rdfs:comment": "Estimated processing time for the service using this channel.",
      "rdfs:label": "processingTime",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:ShareAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of distributing content to people for their amusement or edification.",
      "rdfs:label": "ShareAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:AerobicActivity",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Physical activity of relatively low intensity that depends primarily on the aerobic energy-generating process; during activity, the aerobic metabolism uses oxygen to adequately meet energy demands during exercise.",
      "rdfs:label": "AerobicActivity",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:WorkersUnion",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.",
      "rdfs:label": "WorkersUnion",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/243"
      }
    },
    {
      "@id": "schema:iupacName",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied Chemistry (IUPAC).",
      "rdfs:label": "iupacName",
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:FinancialService",
      "@type": "rdfs:Class",
      "rdfs:comment": "Financial services business.",
      "rdfs:label": "FinancialService",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:temporalCoverage",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/temporal"
      },
      "rdfs:comment": "The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In\n      the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written \"2011/2012\"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.\n      Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via \"1939/1945\".\n\nOpen-ended date ranges can be written with \"..\" in place of the end date. For example, \"2015-11/..\" indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.",
      "rdfs:label": "temporalCoverage",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:device",
      "@type": "rdf:Property",
      "rdfs:comment": "Device required to run the application. Used in cases where a specific make/model is required to run the application.",
      "rdfs:label": "device",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:availableOnDevice"
      }
    },
    {
      "@id": "schema:gameLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "Real or fictional location of the game (or part of game).",
      "rdfs:label": "gameLocation",
      "schema:domainIncludes": [
        {
          "@id": "schema:Game"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:PostalAddress"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:RealEstateAgent",
      "@type": "rdfs:Class",
      "rdfs:comment": "A real-estate agent.",
      "rdfs:label": "RealEstateAgent",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:MenuSection",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.",
      "rdfs:label": "MenuSection",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:MusicRecording",
      "@type": "rdfs:Class",
      "rdfs:comment": "A music recording (track), usually a single song.",
      "rdfs:label": "MusicRecording",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:WearableSizeGroupBoys",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Boys\" for wearables.",
      "rdfs:label": "WearableSizeGroupBoys",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:DanceEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: A social dance.",
      "rdfs:label": "DanceEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:ResearchProject",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Research project.",
      "rdfs:label": "ResearchProject",
      "rdfs:subClassOf": {
        "@id": "schema:Project"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        }
      ]
    },
    {
      "@id": "schema:relatedTo",
      "@type": "rdf:Property",
      "rdfs:comment": "The most generic familial relation.",
      "rdfs:label": "relatedTo",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:ComicStory",
      "@type": "rdfs:Class",
      "rdfs:comment": "The term \"story\" is any indivisible, re-printable\n    \tunit of a comic, including the interior stories, covers, and backmatter. Most\n    \tcomics have at least two stories: a cover (ComicCoverArt) and an interior story.",
      "rdfs:label": "ComicStory",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:WearableSizeGroupInfants",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Infants\" for wearables.",
      "rdfs:label": "WearableSizeGroupInfants",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:CommunicateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.",
      "rdfs:label": "CommunicateAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:shippingDestination",
      "@type": "rdf:Property",
      "rdfs:comment": "indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.",
      "rdfs:label": "shippingDestination",
      "schema:domainIncludes": [
        {
          "@id": "schema:OfferShippingDetails"
        },
        {
          "@id": "schema:DeliveryTimeSettings"
        },
        {
          "@id": "schema:ShippingRateSettings"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DefinedRegion"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:ScreeningEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "A screening of a movie or other video.",
      "rdfs:label": "ScreeningEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:MapCategoryType",
      "@type": "rdfs:Class",
      "rdfs:comment": "An enumeration of several kinds of Map.",
      "rdfs:label": "MapCategoryType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:resultReview",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of result. The review that resulted in the performing of the action.",
      "rdfs:label": "resultReview",
      "rdfs:subPropertyOf": {
        "@id": "schema:result"
      },
      "schema:domainIncludes": {
        "@id": "schema:ReviewAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      }
    },
    {
      "@id": "schema:BlogPosting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A blog post.",
      "rdfs:label": "BlogPosting",
      "rdfs:subClassOf": {
        "@id": "schema:SocialMediaPosting"
      }
    },
    {
      "@id": "schema:coverageEndTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.",
      "rdfs:label": "coverageEndTime",
      "schema:domainIncludes": {
        "@id": "schema:LiveBlogPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:AnaerobicActivity",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Physical activity that is of high-intensity which utilizes the anaerobic metabolism of the body.",
      "rdfs:label": "AnaerobicActivity",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MedicalSpecialty",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.",
      "rdfs:label": "MedicalSpecialty",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalEnumeration"
        },
        {
          "@id": "schema:Specialty"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:healthPlanMarketingUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL that goes directly to the plan brochure for the specific standard plan or plan variation.",
      "rdfs:label": "healthPlanMarketingUrl",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:MedicalCause",
      "@type": "rdfs:Class",
      "rdfs:comment": "The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.",
      "rdfs:label": "MedicalCause",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:byDay",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified using either [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax for byDay recurrence rules.",
      "rdfs:label": "byDay",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DayOfWeek"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:AutoRepair",
      "@type": "rdfs:Class",
      "rdfs:comment": "Car repair business.",
      "rdfs:label": "AutoRepair",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:MobileApplication",
      "@type": "rdfs:Class",
      "rdfs:comment": "A software application designed specifically to work well on a mobile device such as a telephone.",
      "rdfs:label": "MobileApplication",
      "rdfs:subClassOf": {
        "@id": "schema:SoftwareApplication"
      }
    },
    {
      "@id": "schema:hasPart",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).",
      "rdfs:label": "hasPart",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:isPartOf"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:Campground",
      "@type": "rdfs:Class",
      "rdfs:comment": "A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically containing individual [[CampingPitch]] locations. \\n\\n\nIn British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\\n\\n\n\nSee also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).\n",
      "rdfs:label": "Campground",
      "rdfs:subClassOf": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:CivicStructure"
        }
      ],
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:foundingLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "The place where the Organization was founded.",
      "rdfs:label": "foundingLocation",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:Nonprofit501c4",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c4: Non-profit type referring to Civic Leagues, Social Welfare Organizations, and Local Associations of Employees.",
      "rdfs:label": "Nonprofit501c4",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:requiredQuantity",
      "@type": "rdf:Property",
      "rdfs:comment": "The required quantity of the item(s).",
      "rdfs:label": "requiredQuantity",
      "schema:domainIncludes": {
        "@id": "schema:HowToItem"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:DigitalDocumentPermissionType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of permission which can be granted for accessing a digital document.",
      "rdfs:label": "DigitalDocumentPermissionType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:availableStrength",
      "@type": "rdf:Property",
      "rdfs:comment": "An available dosage strength for the drug.",
      "rdfs:label": "availableStrength",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DrugStrength"
      }
    },
    {
      "@id": "schema:trackingUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "Tracking url for the parcel delivery.",
      "rdfs:label": "trackingUrl",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:Online",
      "@type": "schema:GameServerStatus",
      "rdfs:comment": "Game server status: Online. Server is available.",
      "rdfs:label": "Online"
    },
    {
      "@id": "schema:positiveNotes",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), positive considerations - either as unstructured text, or a list.",
      "rdfs:label": "positiveNotes",
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:ListItem"
        },
        {
          "@id": "schema:ItemList"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2832"
      }
    },
    {
      "@id": "schema:suggestedAge",
      "@type": "rdf:Property",
      "rdfs:comment": "The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.",
      "rdfs:label": "suggestedAge",
      "schema:domainIncludes": [
        {
          "@id": "schema:SizeSpecification"
        },
        {
          "@id": "schema:PeopleAudience"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:DryCleaningOrLaundry",
      "@type": "rdfs:Class",
      "rdfs:comment": "A dry-cleaning business.",
      "rdfs:label": "DryCleaningOrLaundry",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:trailer",
      "@type": "rdf:Property",
      "rdfs:comment": "The trailer of a movie or tv/radio series, season, episode, etc.",
      "rdfs:label": "trailer",
      "schema:domainIncludes": [
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:VideoObject"
      }
    },
    {
      "@id": "schema:LiquorStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.",
      "rdfs:label": "LiquorStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:SizeSystemImperial",
      "@type": "schema:SizeSystemEnumeration",
      "rdfs:comment": "Imperial size system.",
      "rdfs:label": "SizeSystemImperial",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:branchOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical)[[branch]].",
      "rdfs:label": "branchOf",
      "schema:domainIncludes": {
        "@id": "schema:LocalBusiness"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:supersededBy": {
        "@id": "schema:parentOrganization"
      }
    },
    {
      "@id": "schema:rangeIncludes",
      "@type": "rdf:Property",
      "rdfs:comment": "Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.",
      "rdfs:label": "rangeIncludes",
      "schema:domainIncludes": {
        "@id": "schema:Property"
      },
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Class"
      }
    },
    {
      "@id": "schema:NonprofitType",
      "@type": "rdfs:Class",
      "rdfs:comment": "NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.",
      "rdfs:label": "NonprofitType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:interactionType",
      "@type": "rdf:Property",
      "rdfs:comment": "The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.",
      "rdfs:label": "interactionType",
      "schema:domainIncludes": {
        "@id": "schema:InteractionCounter"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:activeIngredient",
      "@type": "rdf:Property",
      "rdfs:comment": "An active ingredient, typically chemical compounds and/or biologic substances.",
      "rdfs:label": "activeIngredient",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:DrugStrength"
        },
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:Substance"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:serviceLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "The location (e.g. civic structure, local business, etc.) where a person can go to access the service.",
      "rdfs:label": "serviceLocation",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:HealthPlanNetwork",
      "@type": "rdfs:Class",
      "rdfs:comment": "A US-style health insurance plan network. ",
      "rdfs:label": "HealthPlanNetwork",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:MedicalScholarlyArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A scholarly article in the medical domain.",
      "rdfs:label": "MedicalScholarlyArticle",
      "rdfs:subClassOf": {
        "@id": "schema:ScholarlyArticle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:SelfStorage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A self-storage facility.",
      "rdfs:label": "SelfStorage",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:stageAsNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The stage represented as a number, e.g. 3.",
      "rdfs:label": "stageAsNumber",
      "schema:domainIncludes": {
        "@id": "schema:MedicalConditionStage"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:SoftwareSourceCode",
      "@type": "rdfs:Class",
      "rdfs:comment": "Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.",
      "rdfs:label": "SoftwareSourceCode",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:episodes",
      "@type": "rdf:Property",
      "rdfs:comment": "An episode of a TV/radio series or season.",
      "rdfs:label": "episodes",
      "schema:domainIncludes": [
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Episode"
      },
      "schema:supersededBy": {
        "@id": "schema:episode"
      }
    },
    {
      "@id": "schema:accessibilitySummary",
      "@type": "rdf:Property",
      "rdfs:comment": "A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as \"short descriptions are present but long descriptions will be needed for non-visual users\" or \"short descriptions are present and no long descriptions are needed.\"",
      "rdfs:label": "accessibilitySummary",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1100"
      }
    },
    {
      "@id": "schema:Researcher",
      "@type": "rdfs:Class",
      "rdfs:comment": "Researchers.",
      "rdfs:label": "Researcher",
      "rdfs:subClassOf": {
        "@id": "schema:Audience"
      }
    },
    {
      "@id": "schema:Nonprofit501c8",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c8: Non-profit type referring to Fraternal Beneficiary Societies and Associations.",
      "rdfs:label": "Nonprofit501c8",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:numberOfAxles",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of axles.\\n\\nTypical unit code(s): C62",
      "rdfs:label": "numberOfAxles",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:WearableSizeSystemBR",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Brazilian size system for wearables.",
      "rdfs:label": "WearableSizeSystemBR",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:PriceTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates different price types, for example list price, invoice price, and sale price.",
      "rdfs:label": "PriceTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:ccRecipient",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of recipient. The recipient copied on a message.",
      "rdfs:label": "ccRecipient",
      "rdfs:subPropertyOf": {
        "@id": "schema:recipient"
      },
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:DefenceEstablishment",
      "@type": "rdfs:Class",
      "rdfs:comment": "A defence establishment, such as an army or navy base.",
      "rdfs:label": "DefenceEstablishment",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentBuilding"
      }
    },
    {
      "@id": "schema:Nonprofit501q",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501q: Non-profit type referring to Credit Counseling Organizations.",
      "rdfs:label": "Nonprofit501q",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:originalMediaLink",
      "@type": "rdf:Property",
      "rdfs:comment": "Link to the page containing an original version of the content, or directly to an online copy of the original [[MediaObject]] content, e.g. video file.",
      "rdfs:label": "originalMediaLink",
      "schema:domainIncludes": {
        "@id": "schema:MediaReview"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:WebPage"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:BodyMeasurementHips",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Girth of hips (measured around the buttocks). Used, for example, to fit skirts.",
      "rdfs:label": "BodyMeasurementHips",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:LocalBusiness",
      "@type": "rdfs:Class",
      "http://www.w3.org/2004/02/skos/core#closeMatch": {
        "@id": "http://www.w3.org/ns/regorg#RegisteredOrganization"
      },
      "rdfs:comment": "A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.",
      "rdfs:label": "LocalBusiness",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Place"
        }
      ]
    },
    {
      "@id": "schema:availability",
      "@type": "rdf:Property",
      "rdfs:comment": "The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.",
      "rdfs:label": "availability",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:ItemAvailability"
      }
    },
    {
      "@id": "schema:cvdNumC19OverflowPats",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.",
      "rdfs:label": "cvdNumC19OverflowPats",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:blogPosts",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a post that is part of a [[Blog]]. Note that historically, what we term a \"Blog\" was once known as a \"weblog\", and that what we term a \"BlogPosting\" is now often colloquially referred to as a \"blog\".",
      "rdfs:label": "blogPosts",
      "schema:domainIncludes": {
        "@id": "schema:Blog"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BlogPosting"
      },
      "schema:supersededBy": {
        "@id": "schema:blogPost"
      }
    },
    {
      "@id": "schema:BioChemEntity",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": {
        "@id": "http://bioschemas.org"
      },
      "rdfs:comment": "Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.",
      "rdfs:label": "BioChemEntity",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:TireShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tire shop.",
      "rdfs:label": "TireShop",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:Hostel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hostel - cheap accommodation, often in shared dormitories.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Hostel",
      "rdfs:subClassOf": {
        "@id": "schema:LodgingBusiness"
      }
    },
    {
      "@id": "schema:sensoryRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.",
      "rdfs:label": "sensoryRequirement",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2384"
      }
    },
    {
      "@id": "schema:NutritionInformation",
      "@type": "rdfs:Class",
      "rdfs:comment": "Nutritional information about the recipe.",
      "rdfs:label": "NutritionInformation",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      }
    },
    {
      "@id": "schema:EducationalOccupationalProgram",
      "@type": "rdfs:Class",
      "rdfs:comment": "A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).",
      "rdfs:label": "EducationalOccupationalProgram",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:releaseOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The album this is a release of.",
      "rdfs:label": "releaseOf",
      "schema:domainIncludes": {
        "@id": "schema:MusicRelease"
      },
      "schema:inverseOf": {
        "@id": "schema:albumRelease"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbum"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:RadioClip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short radio program or a segment/part of a radio program.",
      "rdfs:label": "RadioClip",
      "rdfs:subClassOf": {
        "@id": "schema:Clip"
      }
    },
    {
      "@id": "schema:Nonprofit501c25",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c25: Non-profit type referring to Real Property Title-Holding Corporations or Trusts with Multiple Parents.",
      "rdfs:label": "Nonprofit501c25",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:reviewAspect",
      "@type": "rdf:Property",
      "rdfs:comment": "This Review or Rating is relevant to this part or facet of the itemReviewed.",
      "rdfs:label": "reviewAspect",
      "schema:domainIncludes": [
        {
          "@id": "schema:Review"
        },
        {
          "@id": "schema:Rating"
        },
        {
          "@id": "schema:Guide"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1689"
      }
    },
    {
      "@id": "schema:textValue",
      "@type": "rdf:Property",
      "rdfs:comment": "Text value being annotated.",
      "rdfs:label": "textValue",
      "schema:domainIncludes": {
        "@id": "schema:PronounceableText"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2108"
      }
    },
    {
      "@id": "schema:Nonprofit501c1",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c1: Non-profit type referring to Corporations Organized Under Act of Congress, including Federal Credit Unions and National Farm Loan Associations.",
      "rdfs:label": "Nonprofit501c1",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:renegotiableLoan",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the terms for payment of interest can be renegotiated during the life of the loan.",
      "rdfs:label": "renegotiableLoan",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:TransferAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.",
      "rdfs:label": "TransferAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:DataFeedItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single item within a larger data feed.",
      "rdfs:label": "DataFeedItem",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:albumReleaseType",
      "@type": "rdf:Property",
      "rdfs:comment": "The kind of release which this album is: single, EP or album.",
      "rdfs:label": "albumReleaseType",
      "schema:domainIncludes": {
        "@id": "schema:MusicAlbum"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbumReleaseType"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:FastFoodRestaurant",
      "@type": "rdfs:Class",
      "rdfs:comment": "A fast-food restaurant.",
      "rdfs:label": "FastFoodRestaurant",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:ticketNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The unique identifier for the ticket.",
      "rdfs:label": "ticketNumber",
      "schema:domainIncludes": {
        "@id": "schema:Ticket"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ApprovedIndication",
      "@type": "rdfs:Class",
      "rdfs:comment": "An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.",
      "rdfs:label": "ApprovedIndication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIndication"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:accessModeSufficient",
      "@type": "rdf:Property",
      "rdfs:comment": "A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual.\n      ",
      "rdfs:label": "accessModeSufficient",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ItemList"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1100"
      }
    },
    {
      "@id": "schema:ExhibitionEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...",
      "rdfs:label": "ExhibitionEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryE",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class E as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryE",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:DVDFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "DVDFormat.",
      "rdfs:label": "DVDFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:ReadPermission",
      "@type": "schema:DigitalDocumentPermissionType",
      "rdfs:comment": "Permission to read or view the document.",
      "rdfs:label": "ReadPermission"
    },
    {
      "@id": "schema:WearableSizeSystemEN13402",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "EN 13402 (joint European standard for size labelling of clothes).",
      "rdfs:label": "WearableSizeSystemEN13402",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:gtin8",
      "@type": "rdf:Property",
      "rdfs:comment": "The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
      "rdfs:label": "gtin8",
      "rdfs:subPropertyOf": [
        {
          "@id": "schema:gtin"
        },
        {
          "@id": "schema:identifier"
        }
      ],
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:valueAddedTaxIncluded",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.",
      "rdfs:label": "valueAddedTaxIncluded",
      "schema:domainIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:PaymentDeclined",
      "@type": "schema:PaymentStatusType",
      "rdfs:comment": "The payee received the payment, but it was declined for some reason.",
      "rdfs:label": "PaymentDeclined"
    },
    {
      "@id": "schema:arrivalBusStop",
      "@type": "rdf:Property",
      "rdfs:comment": "The stop or station from which the bus arrives.",
      "rdfs:label": "arrivalBusStop",
      "schema:domainIncludes": {
        "@id": "schema:BusTrip"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:BusStop"
        },
        {
          "@id": "schema:BusStation"
        }
      ]
    },
    {
      "@id": "schema:Neck",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Neck assessment with clinical examination.",
      "rdfs:label": "Neck",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Nonprofit501c28",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c28: Non-profit type referring to National Railroad Retirement Investment Trusts.",
      "rdfs:label": "Nonprofit501c28",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:Dermatologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "Something relating to or practicing dermatology.",
      "rdfs:label": "Dermatologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:supersededBy": {
        "@id": "schema:Dermatology"
      }
    },
    {
      "@id": "schema:WearableSizeGroupJuniors",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Juniors\" for wearables.",
      "rdfs:label": "WearableSizeGroupJuniors",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Ultrasound",
      "@type": "schema:MedicalImagingTechnique",
      "rdfs:comment": "Ultrasound imaging.",
      "rdfs:label": "Ultrasound",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:validFor",
      "@type": "rdf:Property",
      "rdfs:comment": "The duration of validity of a permit or similar thing.",
      "rdfs:label": "validFor",
      "schema:domainIncludes": [
        {
          "@id": "schema:EducationalOccupationalCredential"
        },
        {
          "@id": "schema:Permit"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:byMonthDay",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-31.",
      "rdfs:label": "byMonthDay",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:pregnancyWarning",
      "@type": "rdf:Property",
      "rdfs:comment": "Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.",
      "rdfs:label": "pregnancyWarning",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:nsn",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]]. ",
      "rdfs:label": "nsn",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2126"
      }
    },
    {
      "@id": "schema:SuspendAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).",
      "rdfs:label": "SuspendAction",
      "rdfs:subClassOf": {
        "@id": "schema:ControlAction"
      }
    },
    {
      "@id": "schema:Dentistry",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A branch of medicine that is involved in the dental care.",
      "rdfs:label": "Dentistry",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:headline",
      "@type": "rdf:Property",
      "rdfs:comment": "Headline of the article.",
      "rdfs:label": "headline",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:contentUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "Actual bytes of the media object, for example the image file or video file.",
      "rdfs:label": "contentUrl",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:procedure",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the procedure involved in setting up, using, and/or installing the device.",
      "rdfs:label": "procedure",
      "schema:domainIncludes": {
        "@id": "schema:MedicalDevice"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:educationalAlignment",
      "@type": "rdf:Property",
      "rdfs:comment": "An alignment to an established educational framework.\n\nThis property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.",
      "rdfs:label": "educationalAlignment",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:LearningResource"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:AlignmentObject"
      }
    },
    {
      "@id": "schema:itemDefectReturnShippingFeesAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]] equals [[ReturnShippingFees]].",
      "rdfs:label": "itemDefectReturnShippingFeesAmount",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:blogPost",
      "@type": "rdf:Property",
      "rdfs:comment": "A posting that is part of this blog.",
      "rdfs:label": "blogPost",
      "schema:domainIncludes": {
        "@id": "schema:Blog"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BlogPosting"
      }
    },
    {
      "@id": "schema:TakeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\\n\\nRelated actions:\\n\\n* [[GiveAction]]: The reciprocal of TakeAction.\\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.",
      "rdfs:label": "TakeAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:departureTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The expected departure time.",
      "rdfs:label": "departureTime",
      "schema:domainIncludes": {
        "@id": "schema:Trip"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Time"
        }
      ]
    },
    {
      "@id": "schema:BreadcrumbList",
      "@type": "rdfs:Class",
      "rdfs:comment": "A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\\n\\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the \"top\" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.\n      ",
      "rdfs:label": "BreadcrumbList",
      "rdfs:subClassOf": {
        "@id": "schema:ItemList"
      }
    },
    {
      "@id": "schema:tracks",
      "@type": "rdf:Property",
      "rdfs:comment": "A music recording (track)&#x2014;usually a single song.",
      "rdfs:label": "tracks",
      "schema:domainIncludes": [
        {
          "@id": "schema:MusicPlaylist"
        },
        {
          "@id": "schema:MusicGroup"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:supersededBy": {
        "@id": "schema:track"
      }
    },
    {
      "@id": "schema:WearableMeasurementTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates common types of measurement for wearables products.",
      "rdfs:label": "WearableMeasurementTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:MeasurementTypeEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:accessCode",
      "@type": "rdf:Property",
      "rdfs:comment": "Password, PIN, or access code needed for delivery (e.g. from a locker).",
      "rdfs:label": "accessCode",
      "schema:domainIncludes": {
        "@id": "schema:DeliveryEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:termsOfService",
      "@type": "rdf:Property",
      "rdfs:comment": "Human-readable terms of service documentation.",
      "rdfs:label": "termsOfService",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1423"
      }
    },
    {
      "@id": "schema:TripleBlindedTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial design in which neither the researcher, the person administering the therapy nor the patient knows the details of the treatment the patient was randomly assigned to.",
      "rdfs:label": "TripleBlindedTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:AskPublicNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.",
      "rdfs:label": "AskPublicNewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:NewsArticle"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:procedureType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of procedure, for example Surgical, Noninvasive, or Percutaneous.",
      "rdfs:label": "procedureType",
      "schema:domainIncludes": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalProcedureType"
      }
    },
    {
      "@id": "schema:orderDelivery",
      "@type": "rdf:Property",
      "rdfs:comment": "The delivery of the parcel related to this order or order item.",
      "rdfs:label": "orderDelivery",
      "schema:domainIncludes": [
        {
          "@id": "schema:Order"
        },
        {
          "@id": "schema:OrderItem"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:ParcelDelivery"
      }
    },
    {
      "@id": "schema:leaseLength",
      "@type": "rdf:Property",
      "rdfs:comment": "Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.",
      "rdfs:label": "leaseLength",
      "schema:domainIncludes": [
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:RealEstateListing"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Duration"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:participant",
      "@type": "rdf:Property",
      "rdfs:comment": "Other co-agents that participated in the action indirectly. e.g. John wrote a book with *Steve*.",
      "rdfs:label": "participant",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:UseAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of applying an object to its intended purpose.",
      "rdfs:label": "UseAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:guideline",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical guideline related to this entity.",
      "rdfs:label": "guideline",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalGuideline"
      }
    },
    {
      "@id": "schema:printSection",
      "@type": "rdf:Property",
      "rdfs:comment": "If this NewsArticle appears in print, this field indicates the print section in which the article appeared.",
      "rdfs:label": "printSection",
      "schema:domainIncludes": {
        "@id": "schema:NewsArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:SchoolDistrict",
      "@type": "rdfs:Class",
      "rdfs:comment": "A School District is an administrative area for the administration of schools.",
      "rdfs:label": "SchoolDistrict",
      "rdfs:subClassOf": {
        "@id": "schema:AdministrativeArea"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2500"
      }
    },
    {
      "@id": "schema:WearableSizeGroupMaternity",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Maternity\" for wearables.",
      "rdfs:label": "WearableSizeGroupMaternity",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:loanType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of a loan or credit.",
      "rdfs:label": "loanType",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:ComicIssue",
      "@type": "rdfs:Class",
      "rdfs:comment": "Individual comic issues are serially published as\n    \tpart of a larger series. For the sake of consistency, even one-shot issues\n    \tbelong to a series comprised of a single issue. All comic issues can be\n    \tuniquely identified by: the combination of the name and volume number of the\n    \tseries to which the issue belongs; the issue number; and the variant\n    \tdescription of the issue (if any).",
      "rdfs:label": "ComicIssue",
      "rdfs:subClassOf": {
        "@id": "schema:PublicationIssue"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:beforeMedia",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object representing the circumstances before performing this direction.",
      "rdfs:label": "beforeMedia",
      "schema:domainIncludes": {
        "@id": "schema:HowToDirection"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:MediaObject"
        }
      ]
    },
    {
      "@id": "schema:flightDistance",
      "@type": "rdf:Property",
      "rdfs:comment": "The distance of the flight.",
      "rdfs:label": "flightDistance",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Distance"
        }
      ]
    },
    {
      "@id": "schema:jobImmediateStart",
      "@type": "rdf:Property",
      "rdfs:comment": "An indicator as to whether a position is available for an immediate start.",
      "rdfs:label": "jobImmediateStart",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2244"
      }
    },
    {
      "@id": "schema:Withdrawn",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Withdrawn.",
      "rdfs:label": "Withdrawn",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MedicalEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.",
      "rdfs:label": "MedicalEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:healthPlanPharmacyCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "The category or type of pharmacy associated with this cost sharing.",
      "rdfs:label": "healthPlanPharmacyCategory",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanCostSharingSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:ActionAccessSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of requirements that a must be fulfilled in order to perform an Action.",
      "rdfs:label": "ActionAccessSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:accountId",
      "@type": "rdf:Property",
      "rdfs:comment": "The identifier for the account the payment will be applied to.",
      "rdfs:label": "accountId",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WebPageElement",
      "@type": "rdfs:Class",
      "rdfs:comment": "A web page element, like a table or an image.",
      "rdfs:label": "WebPageElement",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:healthPlanNetworkTier",
      "@type": "rdf:Property",
      "rdfs:comment": "The tier(s) for this network.",
      "rdfs:label": "healthPlanNetworkTier",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanNetwork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:Nonprofit501c16",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c16: Non-profit type referring to Cooperative Organizations to Finance Crop Operations.",
      "rdfs:label": "Nonprofit501c16",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:QuantitativeValueDistribution",
      "@type": "rdfs:Class",
      "rdfs:comment": "A statistical distribution of values.",
      "rdfs:label": "QuantitativeValueDistribution",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:breastfeedingWarning",
      "@type": "rdf:Property",
      "rdfs:comment": "Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.",
      "rdfs:label": "breastfeedingWarning",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Nonprofit501c11",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c11: Non-profit type referring to Teachers' Retirement Fund Associations.",
      "rdfs:label": "Nonprofit501c11",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:physicalRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.",
      "rdfs:label": "physicalRequirement",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2384"
      }
    },
    {
      "@id": "schema:usesHealthPlanIdStandard",
      "@type": "rdf:Property",
      "rdfs:comment": "The standard for interpreting thePlan ID. The preferred is \"HIOS\". See the Centers for Medicare & Medicaid Services for more details.",
      "rdfs:label": "usesHealthPlanIdStandard",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:ComputerStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A computer store.",
      "rdfs:label": "ComputerStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:hospitalAffiliation",
      "@type": "rdf:Property",
      "rdfs:comment": "A hospital with which the physician or office is affiliated.",
      "rdfs:label": "hospitalAffiliation",
      "schema:domainIncludes": {
        "@id": "schema:Physician"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Hospital"
      }
    },
    {
      "@id": "schema:amount",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of money.",
      "rdfs:label": "amount",
      "schema:domainIncludes": [
        {
          "@id": "schema:MoneyTransfer"
        },
        {
          "@id": "schema:DatedMoneySpecification"
        },
        {
          "@id": "schema:InvestmentOrDeposit"
        },
        {
          "@id": "schema:LoanOrCredit"
        },
        {
          "@id": "schema:MonetaryGrant"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        }
      ]
    },
    {
      "@id": "schema:acquiredFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The organization or person from which the product was acquired.",
      "rdfs:label": "acquiredFrom",
      "schema:domainIncludes": {
        "@id": "schema:OwnershipInfo"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:broadcastSignalModulation",
      "@type": "rdf:Property",
      "rdfs:comment": "The modulation (e.g. FM, AM, etc) used by a particular broadcast service.",
      "rdfs:label": "broadcastSignalModulation",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastFrequencySpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2111"
      }
    },
    {
      "@id": "schema:fuelConsumption",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).\\n\\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use [[unitText]] to indicate the unit of measurement, e.g. L/100 km.\\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\\n* Note 3: Often, the absolute value is useful only when related to driving speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use [[valueReference]] to link the value for the fuel consumption to another value.",
      "rdfs:label": "fuelConsumption",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:composer",
      "@type": "rdf:Property",
      "rdfs:comment": "The person or organization who wrote a composition, or who is the composer of a work performed at some event.",
      "rdfs:label": "composer",
      "schema:domainIncludes": [
        {
          "@id": "schema:MusicComposition"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:MedicalWebPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A web page that provides medical information.",
      "rdfs:label": "MedicalWebPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:diseaseSpreadStatistics",
      "@type": "rdf:Property",
      "rdfs:comment": "Statistical information about the spread of a disease, either as [[WebContent]], or\n  described directly as a [[Dataset]], or the specific [[Observation]]s in the dataset. When a [[WebContent]] URL is\n  provided, the page indicated might also contain more such markup.",
      "rdfs:label": "diseaseSpreadStatistics",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Observation"
        },
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Dataset"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:operatingSystem",
      "@type": "rdf:Property",
      "rdfs:comment": "Operating systems supported (Windows 7, OSX 10.6, Android 1.6).",
      "rdfs:label": "operatingSystem",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:jobLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A (typically single) geographic location associated with the job position.",
      "rdfs:label": "jobLocation",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:hasDefinedTerm",
      "@type": "rdf:Property",
      "rdfs:comment": "A Defined Term contained in this term set.",
      "rdfs:label": "hasDefinedTerm",
      "schema:domainIncludes": [
        {
          "@id": "schema:Taxon"
        },
        {
          "@id": "schema:DefinedTermSet"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DefinedTerm"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:GameServerStatus",
      "@type": "rdfs:Class",
      "rdfs:comment": "Status of a game server.",
      "rdfs:label": "GameServerStatus",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:numberOfEpisodes",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of episodes in this season or series.",
      "rdfs:label": "numberOfEpisodes",
      "schema:domainIncludes": [
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:HealthClub",
      "@type": "rdfs:Class",
      "rdfs:comment": "A health club.",
      "rdfs:label": "HealthClub",
      "rdfs:subClassOf": [
        {
          "@id": "schema:SportsActivityLocation"
        },
        {
          "@id": "schema:HealthAndBeautyBusiness"
        }
      ]
    },
    {
      "@id": "schema:OpenTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial design in which the researcher knows the full details of the treatment, and so does the patient.",
      "rdfs:label": "OpenTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ReservationCancelled",
      "@type": "schema:ReservationStatusType",
      "rdfs:comment": "The status for a previously confirmed reservation that is now cancelled.",
      "rdfs:label": "ReservationCancelled"
    },
    {
      "@id": "schema:Physiotherapy",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The practice of treatment of disease, injury, or deformity by physical methods such as massage, heat treatment, and exercise rather than by drugs or surgery..",
      "rdfs:label": "Physiotherapy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:honorificSuffix",
      "@type": "rdf:Property",
      "rdfs:comment": "An honorific suffix following a Person's name such as M.D. /PhD/MSCSW.",
      "rdfs:label": "honorificSuffix",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:transFatContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of trans fat.",
      "rdfs:label": "transFatContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:RejectAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of rejecting to/adopting an object.\\n\\nRelated actions:\\n\\n* [[AcceptAction]]: The antonym of RejectAction.",
      "rdfs:label": "RejectAction",
      "rdfs:subClassOf": {
        "@id": "schema:AllocateAction"
      }
    },
    {
      "@id": "schema:publishingPrinciples",
      "@type": "rdf:Property",
      "rdfs:comment": "The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].\n\nWhile such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.\n",
      "rdfs:label": "publishingPrinciples",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:videoQuality",
      "@type": "rdf:Property",
      "rdfs:comment": "The quality of the video.",
      "rdfs:label": "videoQuality",
      "schema:domainIncludes": {
        "@id": "schema:VideoObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:hasMenuItem",
      "@type": "rdf:Property",
      "rdfs:comment": "A food or drink item contained in a menu or menu section.",
      "rdfs:label": "hasMenuItem",
      "schema:domainIncludes": [
        {
          "@id": "schema:Menu"
        },
        {
          "@id": "schema:MenuSection"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:MenuItem"
      }
    },
    {
      "@id": "schema:busNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The unique identifier for the bus.",
      "rdfs:label": "busNumber",
      "schema:domainIncludes": {
        "@id": "schema:BusTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:TrainReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for train travel.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "TrainReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:GovernmentBuilding",
      "@type": "rdfs:Class",
      "rdfs:comment": "A government building.",
      "rdfs:label": "GovernmentBuilding",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:XPathType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Text representing an XPath (typically but not necessarily version 1.0).",
      "rdfs:label": "XPathType",
      "rdfs:subClassOf": {
        "@id": "schema:Text"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1672"
      }
    },
    {
      "@id": "schema:discountCurrency",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency of the discount.\\n\\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. \"BTC\"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. \"Ithaca HOUR\".",
      "rdfs:label": "discountCurrency",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:isLiveBroadcast",
      "@type": "rdf:Property",
      "rdfs:comment": "True if the broadcast is of a live event.",
      "rdfs:label": "isLiveBroadcast",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:modifiedTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The date and time the reservation was modified.",
      "rdfs:label": "modifiedTime",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:MedicalRiskEstimator",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any rule set or interactive tool for estimating the risk of developing a complication or condition.",
      "rdfs:label": "MedicalRiskEstimator",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:layoutImage",
      "@type": "rdf:Property",
      "rdfs:comment": "A schematic image showing the floorplan layout.",
      "rdfs:label": "layoutImage",
      "rdfs:subPropertyOf": {
        "@id": "schema:image"
      },
      "schema:domainIncludes": {
        "@id": "schema:FloorPlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:ImageObject"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2690"
      }
    },
    {
      "@id": "schema:EventAttendanceModeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.",
      "rdfs:label": "EventAttendanceModeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:smiles",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "A specification in form of a line notation for describing the structure of chemical species using short ASCII strings.  Double bond stereochemistry \\ indicators may need to be escaped in the string in formats where the backslash is an escape character.",
      "rdfs:label": "smiles",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasRepresentation"
      },
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:cvdNumBeds",
      "@type": "rdf:Property",
      "rdfs:comment": "numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.",
      "rdfs:label": "cvdNumBeds",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:Action",
      "@type": "rdfs:Class",
      "rdfs:comment": "An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\\n\\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).",
      "rdfs:label": "Action",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_ActionCollabClass"
      }
    },
    {
      "@id": "schema:AMRadioChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A radio channel that uses AM.",
      "rdfs:label": "AMRadioChannel",
      "rdfs:subClassOf": {
        "@id": "schema:RadioChannel"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:isicV4",
      "@type": "rdf:Property",
      "rdfs:comment": "The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.",
      "rdfs:label": "isicV4",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Nonprofit501c12",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c12: Non-profit type referring to Benevolent Life Insurance Associations, Mutual Ditch or Irrigation Companies, Mutual or Cooperative Telephone Companies.",
      "rdfs:label": "Nonprofit501c12",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:Vein",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of blood vessel that specifically carries blood to the heart.",
      "rdfs:label": "Vein",
      "rdfs:subClassOf": {
        "@id": "schema:Vessel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ticketToken",
      "@type": "rdf:Property",
      "rdfs:comment": "Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.",
      "rdfs:label": "ticketToken",
      "schema:domainIncludes": {
        "@id": "schema:Ticket"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:PaidLeave",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "PaidLeave: this is a benefit for paid leave.",
      "rdfs:label": "PaidLeave",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:LiveBlogPosting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event through continuous updates.",
      "rdfs:label": "LiveBlogPosting",
      "rdfs:subClassOf": {
        "@id": "schema:BlogPosting"
      }
    },
    {
      "@id": "schema:SalePrice",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents a sale price (usually active for a limited period) of an offered product.",
      "rdfs:label": "SalePrice",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:engineType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of engine or engines powering the vehicle.",
      "rdfs:label": "engineType",
      "schema:domainIncludes": {
        "@id": "schema:EngineSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:LikeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.",
      "rdfs:label": "LikeAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:LegalService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\\n\\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\\(s).",
      "rdfs:label": "LegalService",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:branch",
      "@type": "rdf:Property",
      "rdfs:comment": "The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].",
      "rdfs:label": "branch",
      "schema:domainIncludes": {
        "@id": "schema:Nerve"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:supersededBy": {
        "@id": "schema:arterialBranch"
      }
    },
    {
      "@id": "schema:longitude",
      "@type": "rdf:Property",
      "rdfs:comment": "The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
      "rdfs:label": "longitude",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeoCoordinates"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:comment",
      "@type": "rdf:Property",
      "rdfs:comment": "Comments, typically from users.",
      "rdfs:label": "comment",
      "schema:domainIncludes": [
        {
          "@id": "schema:RsvpAction"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Comment"
      }
    },
    {
      "@id": "schema:MusicEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Music event.",
      "rdfs:label": "MusicEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:smokingAllowed",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.",
      "rdfs:label": "smokingAllowed",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:url",
      "@type": "rdf:Property",
      "rdfs:comment": "URL of the item.",
      "rdfs:label": "url",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:eligibleTransactionVolume",
      "@type": "rdf:Property",
      "rdfs:comment": "The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.",
      "rdfs:label": "eligibleTransactionVolume",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:study",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical study or trial related to this entity.",
      "rdfs:label": "study",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalStudy"
      }
    },
    {
      "@id": "schema:isbn",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/isbn"
      },
      "rdfs:comment": "The ISBN of the book.",
      "rdfs:label": "isbn",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:birthPlace",
      "@type": "rdf:Property",
      "rdfs:comment": "The place where the person was born.",
      "rdfs:label": "birthPlace",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:softwareAddOn",
      "@type": "rdf:Property",
      "rdfs:comment": "Additional content for a software application.",
      "rdfs:label": "softwareAddOn",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SoftwareApplication"
      }
    },
    {
      "@id": "schema:artEdition",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example \"20\").",
      "rdfs:label": "artEdition",
      "schema:domainIncludes": {
        "@id": "schema:VisualArtwork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:codeValue",
      "@type": "rdf:Property",
      "rdfs:comment": "A short textual code that uniquely identifies the value.",
      "rdfs:label": "codeValue",
      "rdfs:subPropertyOf": {
        "@id": "schema:termCode"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalCode"
        },
        {
          "@id": "schema:CategoryCode"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:parent",
      "@type": "rdf:Property",
      "rdfs:comment": "A parent of this person.",
      "rdfs:label": "parent",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:ReturnLabelSourceEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates several types of return labels for product returns.",
      "rdfs:label": "ReturnLabelSourceEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:SkiResort",
      "@type": "rdfs:Class",
      "rdfs:comment": "A ski resort.",
      "rdfs:label": "SkiResort",
      "rdfs:subClassOf": [
        {
          "@id": "schema:SportsActivityLocation"
        },
        {
          "@id": "schema:Resort"
        }
      ]
    },
    {
      "@id": "schema:expectedPrognosis",
      "@type": "rdf:Property",
      "rdfs:comment": "The likely outcome in either the short term or long term of the medical condition.",
      "rdfs:label": "expectedPrognosis",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:itinerary",
      "@type": "rdf:Property",
      "rdfs:comment": "Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is important use [[ItemList]] to specify that order (see examples).",
      "rdfs:label": "itinerary",
      "schema:domainIncludes": {
        "@id": "schema:Trip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        }
      ]
    },
    {
      "@id": "schema:audio",
      "@type": "rdf:Property",
      "rdfs:comment": "An embedded audio object.",
      "rdfs:label": "audio",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:AudioObject"
        },
        {
          "@id": "schema:MusicRecording"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2420"
      }
    },
    {
      "@id": "schema:DrinkAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of swallowing liquids.",
      "rdfs:label": "DrinkAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:loanPaymentAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of money to pay in a single payment.",
      "rdfs:label": "loanPaymentAmount",
      "schema:domainIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:MedicalIntangible",
      "@type": "rdfs:Class",
      "rdfs:comment": "A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.",
      "rdfs:label": "MedicalIntangible",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:vehicleInteriorColor",
      "@type": "rdf:Property",
      "rdfs:comment": "The color or color combination of the interior of the vehicle.",
      "rdfs:label": "vehicleInteriorColor",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:Nursing",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A health profession of a person formally educated and trained in the care of the sick or infirm person.",
      "rdfs:label": "Nursing",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:PaymentCard",
      "@type": "rdfs:Class",
      "rdfs:comment": "A payment method using a credit, debit, store or other card to associate the payment with an account.",
      "rdfs:label": "PaymentCard",
      "rdfs:subClassOf": [
        {
          "@id": "schema:PaymentMethod"
        },
        {
          "@id": "schema:FinancialProduct"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:ProfilePage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Profile page.",
      "rdfs:label": "ProfilePage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:DayOfWeek",
      "@type": "rdfs:Class",
      "rdfs:comment": "The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.\n\nOriginally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.\n      ",
      "rdfs:label": "DayOfWeek",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:duration",
      "@type": "rdf:Property",
      "rdfs:comment": "The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "duration",
      "schema:domainIncludes": [
        {
          "@id": "schema:Audiobook"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Schedule"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:MusicRelease"
        },
        {
          "@id": "schema:QuantitativeValueDistribution"
        },
        {
          "@id": "schema:MusicRecording"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
        }
      ]
    },
    {
      "@id": "schema:Organization",
      "@type": "rdfs:Class",
      "rdfs:comment": "An organization such as a school, NGO, corporation, club, etc.",
      "rdfs:label": "Organization",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:MusicRelease",
      "@type": "rdfs:Class",
      "rdfs:comment": "A MusicRelease is a specific release of a music album.",
      "rdfs:label": "MusicRelease",
      "rdfs:subClassOf": {
        "@id": "schema:MusicPlaylist"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:membershipPointsEarned",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (e.g. stars, miles, etc.)",
      "rdfs:label": "membershipPointsEarned",
      "schema:domainIncludes": {
        "@id": "schema:ProgramMembership"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2085"
      }
    },
    {
      "@id": "schema:Painting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A painting.",
      "rdfs:label": "Painting",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryA2Plus",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class A++ as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryA2Plus",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:MixedEventAttendanceMode",
      "@type": "schema:EventAttendanceModeEnumeration",
      "rdfs:comment": "MixedEventAttendanceMode - an event that is conducted as a combination of both offline and online modes.",
      "rdfs:label": "MixedEventAttendanceMode",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:video",
      "@type": "rdf:Property",
      "rdfs:comment": "An embedded video object.",
      "rdfs:label": "video",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:Clip"
        }
      ]
    },
    {
      "@id": "schema:BackOrder",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is available on back order.",
      "rdfs:label": "BackOrder"
    },
    {
      "@id": "schema:ArriveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.",
      "rdfs:label": "ArriveAction",
      "rdfs:subClassOf": {
        "@id": "schema:MoveAction"
      }
    },
    {
      "@id": "schema:itemListElement",
      "@type": "rdf:Property",
      "rdfs:comment": "For itemListElement values, you can use simple strings (e.g. \"Peter\", \"Paul\", \"Mary\"), existing entities, or use ListItem.\\n\\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\\n\\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.",
      "rdfs:label": "itemListElement",
      "schema:domainIncludes": {
        "@id": "schema:ItemList"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        },
        {
          "@id": "schema:ListItem"
        }
      ]
    },
    {
      "@id": "schema:billingPeriod",
      "@type": "rdf:Property",
      "rdfs:comment": "The time interval used to compute the invoice.",
      "rdfs:label": "billingPeriod",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:CleaningFee",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the cleaning fee part of the total price for an offered product, for example a vacation rental.",
      "rdfs:label": "CleaningFee",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:Pharmacy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A pharmacy or drugstore.",
      "rdfs:label": "Pharmacy",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalBusiness"
        },
        {
          "@id": "schema:MedicalOrganization"
        }
      ]
    },
    {
      "@id": "schema:sourceOrganization",
      "@type": "rdf:Property",
      "rdfs:comment": "The Organization on whose behalf the creator was working.",
      "rdfs:label": "sourceOrganization",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:NightClub",
      "@type": "rdfs:Class",
      "rdfs:comment": "A nightclub or discotheque.",
      "rdfs:label": "NightClub",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:Nonprofit501k",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501k: Non-profit type referring to Child Care Organizations.",
      "rdfs:label": "Nonprofit501k",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:Nonprofit501c17",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c17: Non-profit type referring to Supplemental Unemployment Benefit Trusts.",
      "rdfs:label": "Nonprofit501c17",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:travelBans",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about travel bans, e.g. in the context of a pandemic.",
      "rdfs:label": "travelBans",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:OwnershipInfo",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value providing information about when a certain organization or person owned a certain product.",
      "rdfs:label": "OwnershipInfo",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:studyDesign",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifics about the observational study design (enumerated).",
      "rdfs:label": "studyDesign",
      "schema:domainIncludes": {
        "@id": "schema:MedicalObservationalStudy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalObservationalStudyDesign"
      }
    },
    {
      "@id": "schema:distance",
      "@type": "rdf:Property",
      "rdfs:comment": "The distance travelled, e.g. exercising or travelling.",
      "rdfs:label": "distance",
      "schema:domainIncludes": [
        {
          "@id": "schema:TravelAction"
        },
        {
          "@id": "schema:ExerciseAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Distance"
      }
    },
    {
      "@id": "schema:MonetaryGrant",
      "@type": "rdfs:Class",
      "rdfs:comment": "A monetary grant.",
      "rdfs:label": "MonetaryGrant",
      "rdfs:subClassOf": {
        "@id": "schema:Grant"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        }
      ]
    },
    {
      "@id": "schema:ComicSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sequential publication of comic stories under a\n    \tunifying title, for example \"The Amazing Spider-Man\" or \"Groo the\n    \tWanderer\".",
      "rdfs:label": "ComicSeries",
      "rdfs:subClassOf": {
        "@id": "schema:Periodical"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:MediaObject",
      "@type": "rdfs:Class",
      "rdfs:comment": "A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).",
      "rdfs:label": "MediaObject",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:isGift",
      "@type": "rdf:Property",
      "rdfs:comment": "Was the offer accepted as a gift for someone other than the buyer.",
      "rdfs:label": "isGift",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:streetAddress",
      "@type": "rdf:Property",
      "rdfs:comment": "The street address. For example, 1600 Amphitheatre Pkwy.",
      "rdfs:label": "streetAddress",
      "schema:domainIncludes": {
        "@id": "schema:PostalAddress"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:costCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "The category of cost, such as wholesale, retail, reimbursement cap, etc.",
      "rdfs:label": "costCategory",
      "schema:domainIncludes": {
        "@id": "schema:DrugCost"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DrugCostCategory"
      }
    },
    {
      "@id": "schema:ImageObject",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.org/dc/dcmitype/Image"
      },
      "rdfs:comment": "An image file.",
      "rdfs:label": "ImageObject",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      }
    },
    {
      "@id": "schema:PaymentDue",
      "@type": "schema:PaymentStatusType",
      "rdfs:comment": "The payment is due, but still within an acceptable time to be received.",
      "rdfs:label": "PaymentDue"
    },
    {
      "@id": "schema:TaxiVehicleUsage",
      "@type": "schema:CarUsageType",
      "rdfs:comment": "Indicates the usage of the car as a taxi.",
      "rdfs:label": "TaxiVehicleUsage",
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:offersPrescriptionByMail",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether prescriptions can be delivered by mail.",
      "rdfs:label": "offersPrescriptionByMail",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanFormulary"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:colorist",
      "@type": "rdf:Property",
      "rdfs:comment": "The individual who adds color to inked drawings.",
      "rdfs:label": "colorist",
      "schema:domainIncludes": [
        {
          "@id": "schema:VisualArtwork"
        },
        {
          "@id": "schema:ComicIssue"
        },
        {
          "@id": "schema:ComicStory"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:member",
      "@type": "rdf:Property",
      "rdfs:comment": "A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.",
      "rdfs:label": "member",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ProgramMembership"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:memberOf"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:pregnancyCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Pregnancy category of this drug.",
      "rdfs:label": "pregnancyCategory",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DrugPregnancyCategory"
      }
    },
    {
      "@id": "schema:CardiovascularExam",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Cardiovascular system assessment withclinical examination.",
      "rdfs:label": "CardiovascularExam",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:LeftHandDriving",
      "@type": "schema:SteeringPositionValue",
      "rdfs:comment": "The steering position is on the left side of the vehicle (viewed from the main direction of driving).",
      "rdfs:label": "LeftHandDriving",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:OrderInTransit",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing that an order is in transit.",
      "rdfs:label": "OrderInTransit"
    },
    {
      "@id": "schema:inCodeSet",
      "@type": "rdf:Property",
      "rdfs:comment": "A [[CategoryCodeSet]] that contains this category code.",
      "rdfs:label": "inCodeSet",
      "rdfs:subPropertyOf": {
        "@id": "schema:inDefinedTermSet"
      },
      "schema:domainIncludes": {
        "@id": "schema:CategoryCode"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CategoryCodeSet"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:discusses",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the CreativeWork associated with the UserComment.",
      "rdfs:label": "discusses",
      "schema:domainIncludes": {
        "@id": "schema:UserComments"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:MedicalTestPanel",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any collection of tests commonly ordered together.",
      "rdfs:label": "MedicalTestPanel",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:applicationSuite",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of the application suite to which the application belongs (e.g. Excel belongs to Office).",
      "rdfs:label": "applicationSuite",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WearableSizeSystemUS",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "United States size system for wearables.",
      "rdfs:label": "WearableSizeSystemUS",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:opens",
      "@type": "rdf:Property",
      "rdfs:comment": "The opening hour of the place or service on the given day(s) of the week.",
      "rdfs:label": "opens",
      "schema:domainIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Time"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DefinedTermSet",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.",
      "rdfs:label": "DefinedTermSet",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:HyperTocEntry",
      "@type": "rdfs:Class",
      "rdfs:comment": "A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].",
      "rdfs:label": "HyperTocEntry",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2766"
      }
    },
    {
      "@id": "schema:availableTest",
      "@type": "rdf:Property",
      "rdfs:comment": "A diagnostic test or procedure offered by this lab.",
      "rdfs:label": "availableTest",
      "schema:domainIncludes": {
        "@id": "schema:DiagnosticLab"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTest"
      }
    },
    {
      "@id": "schema:healthPlanCopay",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether The copay amount.",
      "rdfs:label": "healthPlanCopay",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanCostSharingSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:toRecipient",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of recipient. The recipient who was directly sent the message.",
      "rdfs:label": "toRecipient",
      "rdfs:subPropertyOf": {
        "@id": "schema:recipient"
      },
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Audience"
        }
      ]
    },
    {
      "@id": "schema:gender",
      "@type": "rdf:Property",
      "rdfs:comment": "Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of \"Mixed\".",
      "rdfs:label": "gender",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:SportsTeam"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:GenderType"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2341"
      }
    },
    {
      "@id": "schema:ratingCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The count of total number of ratings.",
      "rdfs:label": "ratingCount",
      "schema:domainIncludes": {
        "@id": "schema:AggregateRating"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:WatchAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of consuming dynamic/moving visual content.",
      "rdfs:label": "WatchAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:departureGate",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifier of the flight's departure gate.",
      "rdfs:label": "departureGate",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Report",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Report generated by governmental or non-governmental organization.",
      "rdfs:label": "Report",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      }
    },
    {
      "@id": "schema:Notary",
      "@type": "rdfs:Class",
      "rdfs:comment": "A notary.",
      "rdfs:label": "Notary",
      "rdfs:subClassOf": {
        "@id": "schema:LegalService"
      }
    },
    {
      "@id": "schema:MedicalIndication",
      "@type": "rdfs:Class",
      "rdfs:comment": "A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.",
      "rdfs:label": "MedicalIndication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Specialty",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.",
      "rdfs:label": "Specialty",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:Distillery",
      "@type": "rdfs:Class",
      "rdfs:comment": "A distillery.",
      "rdfs:label": "Distillery",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/743"
      }
    },
    {
      "@id": "schema:yearsInOperation",
      "@type": "rdf:Property",
      "rdfs:comment": "The age of the business.",
      "rdfs:label": "yearsInOperation",
      "schema:domainIncludes": {
        "@id": "schema:BusinessAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      }
    },
    {
      "@id": "schema:QuantitativeValue",
      "@type": "rdfs:Class",
      "rdfs:comment": " A point value or interval for product characteristics and other purposes.",
      "rdfs:label": "QuantitativeValue",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:DepartmentStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A department store.",
      "rdfs:label": "DepartmentStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:TVSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "CreativeWorkSeries dedicated to TV broadcast and associated online delivery.",
      "rdfs:label": "TVSeries",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:CreativeWorkSeries"
        }
      ]
    },
    {
      "@id": "schema:InformAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of notifying someone of information pertinent to them, with no expectation of a response.",
      "rdfs:label": "InformAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:AnatomicalStructure",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.",
      "rdfs:label": "AnatomicalStructure",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:significantLinks",
      "@type": "rdf:Property",
      "rdfs:comment": "The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.",
      "rdfs:label": "significantLinks",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:supersededBy": {
        "@id": "schema:significantLink"
      }
    },
    {
      "@id": "schema:ScreeningHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about how to screen or further filter a topic.",
      "rdfs:label": "ScreeningHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:OutOfStock",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is out of stock.",
      "rdfs:label": "OutOfStock"
    },
    {
      "@id": "schema:amenityFeature",
      "@type": "rdf:Property",
      "rdfs:comment": "An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.",
      "rdfs:label": "amenityFeature",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:FloorPlan"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:LocationFeatureSpecification"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:expectedArrivalFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The earliest date the package may arrive.",
      "rdfs:label": "expectedArrivalFrom",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:QAPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).",
      "rdfs:label": "QAPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:seatingCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.\\n\\nTypical unit code(s): C62 for persons ",
      "rdfs:label": "seatingCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:howPerformed",
      "@type": "rdf:Property",
      "rdfs:comment": "How the procedure is performed.",
      "rdfs:label": "howPerformed",
      "schema:domainIncludes": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:RentalCarReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for a rental car.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.",
      "rdfs:label": "RentalCarReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:LockerDelivery",
      "@type": "schema:DeliveryMethod",
      "rdfs:comment": "A DeliveryMethod in which an item is made available via locker.",
      "rdfs:label": "LockerDelivery"
    },
    {
      "@id": "schema:recipient",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The participant who is at the receiving end of the action.",
      "rdfs:label": "recipient",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:AuthorizeAction"
        },
        {
          "@id": "schema:GiveAction"
        },
        {
          "@id": "schema:Message"
        },
        {
          "@id": "schema:ReturnAction"
        },
        {
          "@id": "schema:DonateAction"
        },
        {
          "@id": "schema:CommunicateAction"
        },
        {
          "@id": "schema:TipAction"
        },
        {
          "@id": "schema:PayAction"
        },
        {
          "@id": "schema:SendAction"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Audience"
        }
      ]
    },
    {
      "@id": "schema:MedicalSignOrSymptom",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.",
      "rdfs:label": "MedicalSignOrSymptom",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EmployerReview",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or former employee of that organization.",
      "rdfs:label": "EmployerReview",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1589"
      }
    },
    {
      "@id": "schema:DataCatalog",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://www.w3.org/ns/dcat#Catalog"
      },
      "rdfs:comment": "A collection of datasets.",
      "rdfs:label": "DataCatalog",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_DatasetClass"
      }
    },
    {
      "@id": "schema:availableThrough",
      "@type": "rdf:Property",
      "rdfs:comment": "After this date, the item will no longer be available for pickup.",
      "rdfs:label": "availableThrough",
      "schema:domainIncludes": {
        "@id": "schema:DeliveryEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:benefitsSummaryUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation.",
      "rdfs:label": "benefitsSummaryUrl",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:NewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.\n\nA more detailed overview of [schema.org News markup](/docs/news.html) is also available.\n",
      "rdfs:label": "NewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP-draws"
        }
      ]
    },
    {
      "@id": "schema:ParentalSupport",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "ParentalSupport: this is a benefit for parental support.",
      "rdfs:label": "ParentalSupport",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:RefundTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates several kinds of product return refund types.",
      "rdfs:label": "RefundTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:MerchantReturnNotPermitted",
      "@type": "schema:MerchantReturnEnumeration",
      "rdfs:comment": "Specifies that product returns are not permitted.",
      "rdfs:label": "MerchantReturnNotPermitted",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:applicationStartDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date at which the program begins collecting applications for the next enrollment cycle.",
      "rdfs:label": "applicationStartDate",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:acceptedPaymentMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The payment method(s) accepted by seller for this offer.",
      "rdfs:label": "acceptedPaymentMethod",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:LoanOrCredit"
        },
        {
          "@id": "schema:PaymentMethod"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryB",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class B as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryB",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:ClothingStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A clothing store.",
      "rdfs:label": "ClothingStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:identifyingExam",
      "@type": "rdf:Property",
      "rdfs:comment": "A physical examination that can identify this sign.",
      "rdfs:label": "identifyingExam",
      "schema:domainIncludes": {
        "@id": "schema:MedicalSign"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PhysicalExam"
      }
    },
    {
      "@id": "schema:AutoRental",
      "@type": "rdfs:Class",
      "rdfs:comment": "A car rental business.",
      "rdfs:label": "AutoRental",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:RoofingContractor",
      "@type": "rdfs:Class",
      "rdfs:comment": "A roofing contractor.",
      "rdfs:label": "RoofingContractor",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:hasRepresentation",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "A common representation such as a protein sequence or chemical structure for this entity. For images use schema.org/image.",
      "rdfs:label": "hasRepresentation",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ]
    },
    {
      "@id": "schema:familyName",
      "@type": "rdf:Property",
      "rdfs:comment": "Family name. In the U.S., the last name of a Person.",
      "rdfs:label": "familyName",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:LimitedAvailability",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item has limited availability.",
      "rdfs:label": "LimitedAvailability"
    },
    {
      "@id": "schema:Nonprofit501c20",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c20: Non-profit type referring to Group Legal Services Plan Organizations.",
      "rdfs:label": "Nonprofit501c20",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:SportsOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.",
      "rdfs:label": "SportsOrganization",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:TaxiService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.",
      "rdfs:label": "TaxiService",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:Wholesale",
      "@type": "schema:DrugCostCategory",
      "rdfs:comment": "The drug's cost represents the wholesale acquisition cost of the drug.",
      "rdfs:label": "Wholesale",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:includedComposition",
      "@type": "rdf:Property",
      "rdfs:comment": "Smaller compositions included in this work (e.g. a movement in a symphony).",
      "rdfs:label": "includedComposition",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:businessFunction",
      "@type": "rdf:Property",
      "rdfs:comment": "The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.",
      "rdfs:label": "businessFunction",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:TypeAndQuantityNode"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:BusinessFunction"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:HowToSection",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).",
      "rdfs:label": "HowToSection",
      "rdfs:subClassOf": [
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:ListItem"
        }
      ]
    },
    {
      "@id": "schema:Endocrine",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of endocrine glands and their secretions.",
      "rdfs:label": "Endocrine",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Terminated",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Terminated.",
      "rdfs:label": "Terminated",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:School",
      "@type": "rdfs:Class",
      "rdfs:comment": "A school.",
      "rdfs:label": "School",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:MusicStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A music store.",
      "rdfs:label": "MusicStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:incentives",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of bonus and commission compensation aspects of the job.",
      "rdfs:label": "incentives",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:incentiveCompensation"
      }
    },
    {
      "@id": "schema:WearableMeasurementCollar",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the collar, for example of a shirt",
      "rdfs:label": "WearableMeasurementCollar",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:ExerciseGym",
      "@type": "rdfs:Class",
      "rdfs:comment": "A gym.",
      "rdfs:label": "ExerciseGym",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:EngineSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.",
      "rdfs:label": "EngineSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:shippingRate",
      "@type": "rdf:Property",
      "rdfs:comment": "The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.",
      "rdfs:label": "shippingRate",
      "schema:domainIncludes": [
        {
          "@id": "schema:OfferShippingDetails"
        },
        {
          "@id": "schema:ShippingRateSettings"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:fundedItem",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates an item funded or sponsored through a [[Grant]].",
      "rdfs:label": "fundedItem",
      "schema:domainIncludes": {
        "@id": "schema:Grant"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1950"
        }
      ]
    },
    {
      "@id": "schema:MixtapeAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "MixtapeAlbum.",
      "rdfs:label": "MixtapeAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:byArtist",
      "@type": "rdf:Property",
      "rdfs:comment": "The artist that performed this album or recording.",
      "rdfs:label": "byArtist",
      "schema:domainIncludes": [
        {
          "@id": "schema:MusicRecording"
        },
        {
          "@id": "schema:MusicAlbum"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:MusicGroup"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:Product",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.",
      "rdfs:label": "Product",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:naics",
      "@type": "rdf:Property",
      "rdfs:comment": "The North American Industry Classification System (NAICS) code for a particular organization or business person.",
      "rdfs:label": "naics",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:vendor",
      "@type": "rdf:Property",
      "rdfs:comment": "'vendor' is an earlier term for 'seller'.",
      "rdfs:label": "vendor",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:BuyAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:seller"
      }
    },
    {
      "@id": "schema:relatedLink",
      "@type": "rdf:Property",
      "rdfs:comment": "A link related to this web page, for example to other related web pages.",
      "rdfs:label": "relatedLink",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:alternateName",
      "@type": "rdf:Property",
      "rdfs:comment": "An alias for the item.",
      "rdfs:label": "alternateName",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:SafetyHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about the safety-related aspects of a health topic.",
      "rdfs:label": "SafetyHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:sameAs",
      "@type": "rdf:Property",
      "rdfs:comment": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.",
      "rdfs:label": "sameAs",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:translator",
      "@type": "rdf:Property",
      "rdfs:comment": "Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.",
      "rdfs:label": "translator",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:ItemList",
      "@type": "rdfs:Class",
      "rdfs:comment": "A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.",
      "rdfs:label": "ItemList",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:Resort",
      "@type": "rdfs:Class",
      "rdfs:comment": "A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Resort\">http://en.wikipedia.org/wiki/Resort</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n    ",
      "rdfs:label": "Resort",
      "rdfs:subClassOf": {
        "@id": "schema:LodgingBusiness"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:ControlAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent controls a device or application.",
      "rdfs:label": "ControlAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:InfectiousDisease",
      "@type": "rdfs:Class",
      "rdfs:comment": "An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.",
      "rdfs:label": "InfectiousDisease",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:runtimePlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).",
      "rdfs:label": "runtimePlatform",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:muscleAction",
      "@type": "rdf:Property",
      "rdfs:comment": "The movement the muscle generates.",
      "rdfs:label": "muscleAction",
      "schema:domainIncludes": {
        "@id": "schema:Muscle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EvidenceLevelB",
      "@type": "schema:MedicalEvidenceLevel",
      "rdfs:comment": "Data derived from a single randomized trial, or nonrandomized studies.",
      "rdfs:label": "EvidenceLevelB",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:produces",
      "@type": "rdf:Property",
      "rdfs:comment": "The tangible thing generated by the service, e.g. a passport, permit, etc.",
      "rdfs:label": "produces",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      },
      "schema:supersededBy": {
        "@id": "schema:serviceOutput"
      }
    },
    {
      "@id": "schema:scheduledTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time the object is scheduled to.",
      "rdfs:label": "scheduledTime",
      "schema:domainIncludes": {
        "@id": "schema:PlanAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:LaserDiscFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "LaserDiscFormat.",
      "rdfs:label": "LaserDiscFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:nonEqual",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is not equal to the object.",
      "rdfs:label": "nonEqual",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DateTime",
      "@type": [
        "rdfs:Class",
        "schema:DataType"
      ],
      "rdfs:comment": "A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).",
      "rdfs:label": "DateTime"
    },
    {
      "@id": "schema:Rating",
      "@type": "rdfs:Class",
      "rdfs:comment": "A rating is an evaluation on a numeric scale, such as 1 to 5 stars.",
      "rdfs:label": "Rating",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:PublicationEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.",
      "rdfs:label": "PublicationEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:lodgingUnitDescription",
      "@type": "rdf:Property",
      "rdfs:comment": "A full description of the lodging unit.",
      "rdfs:label": "lodgingUnitDescription",
      "schema:domainIncludes": {
        "@id": "schema:LodgingReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:position",
      "@type": "rdf:Property",
      "rdfs:comment": "The position of an item in a series or sequence of items.",
      "rdfs:label": "position",
      "schema:domainIncludes": [
        {
          "@id": "schema:ListItem"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Integer"
        }
      ]
    },
    {
      "@id": "schema:Protozoa",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "Single-celled organism that causes an infection.",
      "rdfs:label": "Protozoa",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:BodyMeasurementChest",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Maximum girth of chest. Used, for example, to fit men's suits.",
      "rdfs:label": "BodyMeasurementChest",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Brand",
      "@type": "rdfs:Class",
      "rdfs:comment": "A brand is a name used by an organization or business person for labeling a product, product group, or similar.",
      "rdfs:label": "Brand",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:StructuredValue",
      "@type": "rdfs:Class",
      "rdfs:comment": "Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.",
      "rdfs:label": "StructuredValue",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:BusReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for bus travel. \\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "BusReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:seatSection",
      "@type": "rdf:Property",
      "rdfs:comment": "The section location of the reserved seat (e.g. Orchestra).",
      "rdfs:label": "seatSection",
      "schema:domainIncludes": {
        "@id": "schema:Seat"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:subtitleLanguage",
      "@type": "rdf:Property",
      "rdfs:comment": "Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).",
      "rdfs:label": "subtitleLanguage",
      "schema:domainIncludes": [
        {
          "@id": "schema:ScreeningEvent"
        },
        {
          "@id": "schema:BroadcastEvent"
        },
        {
          "@id": "schema:TVEpisode"
        },
        {
          "@id": "schema:Movie"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Language"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2110"
      }
    },
    {
      "@id": "schema:EPRelease",
      "@type": "schema:MusicAlbumReleaseType",
      "rdfs:comment": "EPRelease.",
      "rdfs:label": "EPRelease",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:xpath",
      "@type": "rdf:Property",
      "rdfs:comment": "An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual \"Web page element\".",
      "rdfs:label": "xpath",
      "schema:domainIncludes": [
        {
          "@id": "schema:SpeakableSpecification"
        },
        {
          "@id": "schema:WebPageElement"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:XPathType"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1389"
      }
    },
    {
      "@id": "schema:CurrencyConversionService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A service to convert funds from one currency to another currency.",
      "rdfs:label": "CurrencyConversionService",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialProduct"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:DisagreeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.",
      "rdfs:label": "DisagreeAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:ReservationHold",
      "@type": "schema:ReservationStatusType",
      "rdfs:comment": "The status of a reservation on hold pending an update like credit card number or flight changes.",
      "rdfs:label": "ReservationHold"
    },
    {
      "@id": "schema:PreSale",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is available for ordering and delivery before general availability.",
      "rdfs:label": "PreSale"
    },
    {
      "@id": "schema:translationOfWork",
      "@type": "rdf:Property",
      "rdfs:comment": "The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”",
      "rdfs:label": "translationOfWork",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:workTranslation"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:isBasedOn",
      "@type": "rdf:Property",
      "rdfs:comment": "A resource from which this work is derived or from which it is a modification or adaption.",
      "rdfs:label": "isBasedOn",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:addressLocality",
      "@type": "rdf:Property",
      "rdfs:comment": "The locality in which the street address is, and which is in the region. For example, Mountain View.",
      "rdfs:label": "addressLocality",
      "schema:domainIncludes": {
        "@id": "schema:PostalAddress"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:employee",
      "@type": "rdf:Property",
      "rdfs:comment": "Someone working for this organization.",
      "rdfs:label": "employee",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:OrderProcessing",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing that an order is being processed.",
      "rdfs:label": "OrderProcessing"
    },
    {
      "@id": "schema:Country",
      "@type": "rdfs:Class",
      "rdfs:comment": "A country.",
      "rdfs:label": "Country",
      "rdfs:subClassOf": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:DeliveryTimeSettings",
      "@type": "rdfs:Class",
      "rdfs:comment": "A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of a [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their different values for [[transitTimeLabel]].",
      "rdfs:label": "DeliveryTimeSettings",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:eligibleDuration",
      "@type": "rdf:Property",
      "rdfs:comment": "The duration for which the given offer is valid.",
      "rdfs:label": "eligibleDuration",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:WorkBasedProgram",
      "@type": "rdfs:Class",
      "rdfs:comment": "A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.",
      "rdfs:label": "WorkBasedProgram",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:geoCovers",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. \"Every point of b is a point of (the interior or boundary of) a\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoCovers",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:hasBioPolymerSequence",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Gene"
      },
      "rdfs:comment": "A symbolic representation of a BioChemEnity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.",
      "rdfs:label": "hasBioPolymerSequence",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasRepresentation"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Protein"
        },
        {
          "@id": "schema:Gene"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:sibling",
      "@type": "rdf:Property",
      "rdfs:comment": "A sibling of the person.",
      "rdfs:label": "sibling",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryA1Plus",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class A+ as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryA1Plus",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:Nonprofit501c13",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c13: Non-profit type referring to Cemetery Companies.",
      "rdfs:label": "Nonprofit501c13",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:InfectiousAgentClass",
      "@type": "rdfs:Class",
      "rdfs:comment": "Classes of agents or pathogens that transmit infectious diseases. Enumerated type.",
      "rdfs:label": "InfectiousAgentClass",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:name",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/title"
      },
      "rdfs:comment": "The name of the item.",
      "rdfs:label": "name",
      "rdfs:subPropertyOf": {
        "@id": "rdfs:label"
      },
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:yield",
      "@type": "rdf:Property",
      "rdfs:comment": "The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.",
      "rdfs:label": "yield",
      "schema:domainIncludes": {
        "@id": "schema:HowTo"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:VenueMap",
      "@type": "schema:MapCategoryType",
      "rdfs:comment": "A venue map (e.g. for malls, auditoriums, museums, etc.).",
      "rdfs:label": "VenueMap"
    },
    {
      "@id": "schema:ExerciseAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of participating in exertive activity for the purposes of improving health and fitness.",
      "rdfs:label": "ExerciseAction",
      "rdfs:subClassOf": {
        "@id": "schema:PlayAction"
      }
    },
    {
      "@id": "schema:cashBack",
      "@type": "rdf:Property",
      "rdfs:comment": "A cardholder benefit that pays the cardholder a small percentage of their net expenditures.",
      "rdfs:label": "cashBack",
      "schema:domainIncludes": {
        "@id": "schema:PaymentCard"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Boolean"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:schemaVersion",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to\n    indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.",
      "rdfs:label": "schemaVersion",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:PhysicalTherapy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A process of progressive physical care and rehabilitation aimed at improving a health condition.",
      "rdfs:label": "PhysicalTherapy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTherapy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EventRescheduled",
      "@type": "schema:EventStatusType",
      "rdfs:comment": "The event has been rescheduled. The event's previousStartDate should be set to the old date and the startDate should be set to the event's new date. (If the event has been rescheduled multiple times, the previousStartDate property may be repeated).",
      "rdfs:label": "EventRescheduled"
    },
    {
      "@id": "schema:AdministrativeArea",
      "@type": "rdfs:Class",
      "rdfs:comment": "A geographical region, typically under the jurisdiction of a particular government.",
      "rdfs:label": "AdministrativeArea",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:PrependAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of inserting at the beginning if an ordered collection.",
      "rdfs:label": "PrependAction",
      "rdfs:subClassOf": {
        "@id": "schema:InsertAction"
      }
    },
    {
      "@id": "schema:MultiCenterTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial that takes place at multiple centers.",
      "rdfs:label": "MultiCenterTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Brewery",
      "@type": "rdfs:Class",
      "rdfs:comment": "Brewery.",
      "rdfs:label": "Brewery",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:CreateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of deliberately creating/producing/generating/building a result out of the agent.",
      "rdfs:label": "CreateAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:SingleFamilyResidence",
      "@type": "rdfs:Class",
      "rdfs:comment": "Residence type: Single-family home.",
      "rdfs:label": "SingleFamilyResidence",
      "rdfs:subClassOf": {
        "@id": "schema:House"
      }
    },
    {
      "@id": "schema:Vehicle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.",
      "rdfs:label": "Vehicle",
      "rdfs:subClassOf": {
        "@id": "schema:Product"
      }
    },
    {
      "@id": "schema:WearableSizeGroupEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates common size groups (also known as \"size types\") for wearable products.",
      "rdfs:label": "WearableSizeGroupEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:SizeGroupEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:cargoVolume",
      "@type": "rdf:Property",
      "rdfs:comment": "The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\\n\\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet\\n\\nNote: You can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "cargoVolume",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:childTaxon",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Taxon"
      },
      "rdfs:comment": "Closest child taxa of the taxon in question.",
      "rdfs:label": "childTaxon",
      "schema:domainIncludes": {
        "@id": "schema:Taxon"
      },
      "schema:inverseOf": {
        "@id": "schema:parentTaxon"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Taxon"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:DemoAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "DemoAlbum.",
      "rdfs:label": "DemoAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:mathExpression",
      "@type": "rdf:Property",
      "rdfs:comment": "A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.",
      "rdfs:label": "mathExpression",
      "schema:domainIncludes": {
        "@id": "schema:MathSolver"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:SolveMathAction"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2740"
      }
    },
    {
      "@id": "schema:reviewedBy",
      "@type": "rdf:Property",
      "rdfs:comment": "People or organizations that have reviewed the content on this web page for accuracy and/or completeness.",
      "rdfs:label": "reviewedBy",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:returnFees",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of return fees for purchased products (for any return reason)",
      "rdfs:label": "returnFees",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnFeesEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:restPeriods",
      "@type": "rdf:Property",
      "rdfs:comment": "How often one should break from the activity.",
      "rdfs:label": "restPeriods",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:alcoholWarning",
      "@type": "rdf:Property",
      "rdfs:comment": "Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.",
      "rdfs:label": "alcoholWarning",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PublicHealth",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "Branch of medicine that pertains to the health services to improve and protect community health, especially epidemiology, sanitation, immunization, and preventive medicine.",
      "rdfs:label": "PublicHealth",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:floorLimit",
      "@type": "rdf:Property",
      "rdfs:comment": "A floor limit is the amount of money above which credit card transactions must be authorized.",
      "rdfs:label": "floorLimit",
      "schema:domainIncludes": {
        "@id": "schema:PaymentCard"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:question",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. A question.",
      "rdfs:label": "question",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:AskAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Question"
      }
    },
    {
      "@id": "schema:ContagiousnessHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about contagion mechanisms and contagiousness information over the topic.",
      "rdfs:label": "ContagiousnessHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:FlightReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for air travel.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "FlightReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:AppendAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of inserting at the end if an ordered collection.",
      "rdfs:label": "AppendAction",
      "rdfs:subClassOf": {
        "@id": "schema:InsertAction"
      }
    },
    {
      "@id": "schema:siblings",
      "@type": "rdf:Property",
      "rdfs:comment": "A sibling of the person.",
      "rdfs:label": "siblings",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:sibling"
      }
    },
    {
      "@id": "schema:employerOverview",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the employer, career opportunities and work environment for this position.",
      "rdfs:label": "employerOverview",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2396"
      }
    },
    {
      "@id": "schema:differentialDiagnosis",
      "@type": "rdf:Property",
      "rdfs:comment": "One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient.",
      "rdfs:label": "differentialDiagnosis",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DDxElement"
      }
    },
    {
      "@id": "schema:roleName",
      "@type": "rdf:Property",
      "rdfs:comment": "A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.",
      "rdfs:label": "roleName",
      "schema:domainIncludes": {
        "@id": "schema:Role"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:Nonprofit501c9",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c9: Non-profit type referring to Voluntary Employee Beneficiary Associations.",
      "rdfs:label": "Nonprofit501c9",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:StadiumOrArena",
      "@type": "rdfs:Class",
      "rdfs:comment": "A stadium.",
      "rdfs:label": "StadiumOrArena",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:SportsActivityLocation"
        }
      ]
    },
    {
      "@id": "schema:Physician",
      "@type": "rdfs:Class",
      "rdfs:comment": "A doctor's office.",
      "rdfs:label": "Physician",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalBusiness"
        },
        {
          "@id": "schema:MedicalOrganization"
        }
      ]
    },
    {
      "@id": "schema:MonetaryAmountDistribution",
      "@type": "rdfs:Class",
      "rdfs:comment": "A statistical distribution of monetary amounts.",
      "rdfs:label": "MonetaryAmountDistribution",
      "rdfs:subClassOf": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:servicePostalAddress",
      "@type": "rdf:Property",
      "rdfs:comment": "The address for accessing the service by mail.",
      "rdfs:label": "servicePostalAddress",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PostalAddress"
      }
    },
    {
      "@id": "schema:diet",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The diet used in this action.",
      "rdfs:label": "diet",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Diet"
      }
    },
    {
      "@id": "schema:programmingModel",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether API is managed or unmanaged.",
      "rdfs:label": "programmingModel",
      "schema:domainIncludes": {
        "@id": "schema:APIReference"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:TheaterEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Theater performance.",
      "rdfs:label": "TheaterEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:linkRelationship",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the relationship type of a Web link. ",
      "rdfs:label": "linkRelationship",
      "schema:domainIncludes": {
        "@id": "schema:LinkRole"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1045"
      }
    },
    {
      "@id": "schema:MeetingRoom",
      "@type": "rdfs:Class",
      "rdfs:comment": "A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Conference_hall\">http://en.wikipedia.org/wiki/Conference_hall</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "MeetingRoom",
      "rdfs:subClassOf": {
        "@id": "schema:Room"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:numberOfLoanPayments",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date.",
      "rdfs:label": "numberOfLoanPayments",
      "schema:domainIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:Quantity",
      "@type": "rdfs:Class",
      "rdfs:comment": "Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'.",
      "rdfs:label": "Quantity",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:EventStatusType",
      "@type": "rdfs:Class",
      "rdfs:comment": "EventStatusType is an enumeration type whose instances represent several states that an Event may be in.",
      "rdfs:label": "EventStatusType",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:countryOfOrigin",
      "@type": "rdf:Property",
      "rdfs:comment": "The country of origin of something, including products as well as creative  works such as movie and TV content.\n\nIn the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.\n\nIn the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.",
      "rdfs:label": "countryOfOrigin",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:TVSeason"
        },
        {
          "@id": "schema:TVEpisode"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Country"
      }
    },
    {
      "@id": "schema:actionApplication",
      "@type": "rdf:Property",
      "rdfs:comment": "An application that can complete the request.",
      "rdfs:label": "actionApplication",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SoftwareApplication"
      }
    },
    {
      "@id": "schema:reviewRating",
      "@type": "rdf:Property",
      "rdfs:comment": "The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to rating given by the review. The [[aggregateRating]] property applies to the review itself, as a creative work.",
      "rdfs:label": "reviewRating",
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Rating"
      }
    },
    {
      "@id": "schema:previousStartDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.",
      "rdfs:label": "previousStartDate",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:drainsTo",
      "@type": "rdf:Property",
      "rdfs:comment": "The vasculature that the vein drains into.",
      "rdfs:label": "drainsTo",
      "schema:domainIncludes": {
        "@id": "schema:Vein"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Vessel"
      }
    },
    {
      "@id": "schema:numberOfBeds",
      "@type": "rdf:Property",
      "rdfs:comment": "The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.",
      "rdfs:label": "numberOfBeds",
      "schema:domainIncludes": {
        "@id": "schema:BedDetails"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:ArchiveComponent",
      "@type": "rdfs:Class",
      "rdfs:comment": {
        "@language": "en",
        "@value": "An intangible type to be applied to any archive content, carrying with it a set of properties required to describe archival items and collections."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "ArchiveComponent"
      },
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1758"
      }
    },
    {
      "@id": "schema:BarOrPub",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bar or pub.",
      "rdfs:label": "BarOrPub",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:EnergyConsumptionDetails",
      "@type": "rdfs:Class",
      "rdfs:comment": "EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.",
      "rdfs:label": "EnergyConsumptionDetails",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:EducationalOccupationalCredential",
      "@type": "rdfs:Class",
      "rdfs:comment": "An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.",
      "rdfs:label": "EducationalOccupationalCredential",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:drugUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "The unit in which the drug is measured, e.g. '5 mg tablet'.",
      "rdfs:label": "drugUnit",
      "schema:domainIncludes": [
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:DrugCost"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:legislationLegalForce",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#in_force"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#in_force"
      },
      "rdfs:comment": "Whether the legislation is currently in force, not in force, or partially in force.",
      "rdfs:label": "legislationLegalForce",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:LegalForceStatus"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:MulticellularParasite",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "Multicellular parasite that causes an infection.",
      "rdfs:label": "MulticellularParasite",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:FindAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of finding an object.\\n\\nRelated actions:\\n\\n* [[SearchAction]]: FindAction is generally lead by a SearchAction, but not necessarily.",
      "rdfs:label": "FindAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:OfferForLease",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose\n  [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for\n  background on the underlying concepts.\n  ",
      "rdfs:label": "OfferForLease",
      "rdfs:subClassOf": {
        "@id": "schema:Offer"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2348"
      }
    },
    {
      "@id": "schema:ExchangeRefund",
      "@type": "schema:RefundTypeEnumeration",
      "rdfs:comment": "Specifies that a refund can be done as an exchange for the same product.",
      "rdfs:label": "ExchangeRefund",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:availableService",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical service available from this provider.",
      "rdfs:label": "availableService",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalClinic"
        },
        {
          "@id": "schema:Physician"
        },
        {
          "@id": "schema:Hospital"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalTest"
        },
        {
          "@id": "schema:MedicalProcedure"
        },
        {
          "@id": "schema:MedicalTherapy"
        }
      ]
    },
    {
      "@id": "schema:doseValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The value of the dose, e.g. 500.",
      "rdfs:label": "doseValue",
      "schema:domainIncludes": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ]
    },
    {
      "@id": "schema:proprietaryName",
      "@type": "rdf:Property",
      "rdfs:comment": "Proprietary name given to the diet plan, typically by its originator or creator.",
      "rdfs:label": "proprietaryName",
      "schema:domainIncludes": [
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:DietarySupplement"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:programPrerequisites",
      "@type": "rdf:Property",
      "rdfs:comment": "Prerequisites for enrolling in the program.",
      "rdfs:label": "programPrerequisites",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:EducationalOccupationalCredential"
        },
        {
          "@id": "schema:Course"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:AlignmentObject"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:TipAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of giving money voluntarily to a beneficiary in recognition of services rendered.",
      "rdfs:label": "TipAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:numberOfRooms",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.",
      "rdfs:label": "numberOfRooms",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:Apartment"
        },
        {
          "@id": "schema:Suite"
        },
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:SingleFamilyResidence"
        },
        {
          "@id": "schema:House"
        },
        {
          "@id": "schema:FloorPlan"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:availableIn",
      "@type": "rdf:Property",
      "rdfs:comment": "The location in which the strength is available.",
      "rdfs:label": "availableIn",
      "schema:domainIncludes": {
        "@id": "schema:DrugStrength"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:hasBioChemEntityPart",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part. ",
      "rdfs:label": "hasBioChemEntityPart",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:inverseOf": {
        "@id": "schema:isPartOfBioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BioChemEntity"
      }
    },
    {
      "@id": "schema:AskAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of posing a question / favor to someone.\\n\\nRelated actions:\\n\\n* [[ReplyAction]]: Appears generally as a response to AskAction.",
      "rdfs:label": "AskAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:parentTaxon",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Taxon"
      },
      "rdfs:comment": "Closest parent taxon of the taxon in question.",
      "rdfs:label": "parentTaxon",
      "schema:domainIncludes": {
        "@id": "schema:Taxon"
      },
      "schema:inverseOf": {
        "@id": "schema:childTaxon"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Taxon"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:HVACBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "A business that provide Heating, Ventilation and Air Conditioning services.",
      "rdfs:label": "HVACBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:applicableLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "The location in which the status applies.",
      "rdfs:label": "applicableLocation",
      "schema:domainIncludes": [
        {
          "@id": "schema:DrugCost"
        },
        {
          "@id": "schema:DrugLegalStatus"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:RadioSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "CreativeWorkSeries dedicated to radio broadcast and associated online delivery.",
      "rdfs:label": "RadioSeries",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      }
    },
    {
      "@id": "schema:TreatmentIndication",
      "@type": "rdfs:Class",
      "rdfs:comment": "An indication for treating an underlying condition, symptom, etc.",
      "rdfs:label": "TreatmentIndication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIndication"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:error",
      "@type": "rdf:Property",
      "rdfs:comment": "For failed actions, more information on the cause of the failure.",
      "rdfs:label": "error",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:WesternConventional",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "The conventional Western system of medicine, that aims to apply the best available evidence gained from the scientific method to clinical decision making. Also known as conventional or Western medicine.",
      "rdfs:label": "WesternConventional",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:TrainTrip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A trip on a commercial train line.",
      "rdfs:label": "TrainTrip",
      "rdfs:subClassOf": {
        "@id": "schema:Trip"
      }
    },
    {
      "@id": "schema:JobPosting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A listing that describes a job opening in a certain organization.",
      "rdfs:label": "JobPosting",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:printPage",
      "@type": "rdf:Property",
      "rdfs:comment": "If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).",
      "rdfs:label": "printPage",
      "schema:domainIncludes": {
        "@id": "schema:NewsArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BusStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bus station.",
      "rdfs:label": "BusStation",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:PlayAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.\\n\\nRelated actions:\\n\\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\\n* [[WatchAction]]: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.",
      "rdfs:label": "PlayAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:WearableSizeSystemUK",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "United Kingdom size system for wearables.",
      "rdfs:label": "WearableSizeSystemUK",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:fuelEfficiency",
      "@type": "rdf:Property",
      "rdfs:comment": "The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).\\n\\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use [[unitText]] to indicate the unit of measurement, e.g. mpg or km/L.\\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\\n* Note 3: Often, the absolute value is useful only when related to driving speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use [[valueReference]] to link the value for the fuel economy to another value.",
      "rdfs:label": "fuelEfficiency",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:WearableMeasurementOutsideLeg",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the outside leg, for example of pants",
      "rdfs:label": "WearableMeasurementOutsideLeg",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Collection",
      "@type": "rdfs:Class",
      "rdfs:comment": "A collection of items e.g. creative works or products.",
      "rdfs:label": "Collection",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:manufacturer",
      "@type": "rdf:Property",
      "rdfs:comment": "The manufacturer of the product.",
      "rdfs:label": "manufacturer",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:evidenceLevel",
      "@type": "rdf:Property",
      "rdfs:comment": "Strength of evidence of the data used to formulate the guideline (enumerated).",
      "rdfs:label": "evidenceLevel",
      "schema:domainIncludes": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEvidenceLevel"
      }
    },
    {
      "@id": "schema:merchantReturnLink",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies a Web page or service by URL, for product returns.",
      "rdfs:label": "merchantReturnLink",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:programmingLanguage",
      "@type": "rdf:Property",
      "rdfs:comment": "The computer programming language.",
      "rdfs:label": "programmingLanguage",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ComputerLanguage"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:estimatedCost",
      "@type": "rdf:Property",
      "rdfs:comment": "The estimated cost of the supply or supplies consumed when performing instructions.",
      "rdfs:label": "estimatedCost",
      "schema:domainIncludes": [
        {
          "@id": "schema:HowToSupply"
        },
        {
          "@id": "schema:HowTo"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:MoveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of an agent relocating to a place.\\n\\nRelated actions:\\n\\n* [[TransferAction]]: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.",
      "rdfs:label": "MoveAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:Skin",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Skin assessment with clinical examination.",
      "rdfs:label": "Skin",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:runsTo",
      "@type": "rdf:Property",
      "rdfs:comment": "The vasculature the lymphatic structure runs, or efferents, to.",
      "rdfs:label": "runsTo",
      "schema:domainIncludes": {
        "@id": "schema:LymphaticVessel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Vessel"
      }
    },
    {
      "@id": "schema:director",
      "@type": "rdf:Property",
      "rdfs:comment": "A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.",
      "rdfs:label": "director",
      "schema:domainIncludes": [
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:VideoGame"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:FDAcategoryD",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation by the US FDA signifying that there is positive evidence of human fetal risk based on adverse reaction data from investigational or marketing experience or studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks.",
      "rdfs:label": "FDAcategoryD",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MiddleSchool",
      "@type": "rdfs:Class",
      "rdfs:comment": "A middle school (typically for children aged around 11-14, although this varies somewhat).",
      "rdfs:label": "MiddleSchool",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:lyrics",
      "@type": "rdf:Property",
      "rdfs:comment": "The words in the song.",
      "rdfs:label": "lyrics",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:GraphicNovel",
      "@type": "schema:BookFormatType",
      "rdfs:comment": "Book format: GraphicNovel. May represent a bound collection of ComicIssue instances.",
      "rdfs:label": "GraphicNovel",
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:brand",
      "@type": "rdf:Property",
      "rdfs:comment": "The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.",
      "rdfs:label": "brand",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Brand"
        }
      ]
    },
    {
      "@id": "schema:PostalCodeRangeSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "Indicates a range of postalcodes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.",
      "rdfs:label": "PostalCodeRangeSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:application",
      "@type": "rdf:Property",
      "rdfs:comment": "An application that can complete the request.",
      "rdfs:label": "application",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:supersededBy": {
        "@id": "schema:actionApplication"
      }
    },
    {
      "@id": "schema:Emergency",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that deals with the evaluation and initial treatment of medical conditions caused by trauma or sudden illness.",
      "rdfs:label": "Emergency",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:duns",
      "@type": "rdf:Property",
      "rdfs:comment": "The Dun & Bradstreet DUNS number for identifying an organization or business person.",
      "rdfs:label": "duns",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:storageRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Storage requirements (free space required).",
      "rdfs:label": "storageRequirements",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:SingleRelease",
      "@type": "schema:MusicAlbumReleaseType",
      "rdfs:comment": "SingleRelease.",
      "rdfs:label": "SingleRelease",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:significance",
      "@type": "rdf:Property",
      "rdfs:comment": "The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment.",
      "rdfs:label": "significance",
      "schema:domainIncludes": {
        "@id": "schema:SuperficialAnatomy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Nonprofit501c15",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c15: Non-profit type referring to Mutual Insurance Companies or Associations.",
      "rdfs:label": "Nonprofit501c15",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:EmployerAggregateRating",
      "@type": "rdfs:Class",
      "rdfs:comment": "An aggregate rating of an Organization related to its role as an employer.",
      "rdfs:label": "EmployerAggregateRating",
      "rdfs:subClassOf": {
        "@id": "schema:AggregateRating"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1689"
      }
    },
    {
      "@id": "schema:category",
      "@type": "rdf:Property",
      "rdfs:comment": "A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.",
      "rdfs:label": "category",
      "schema:domainIncludes": [
        {
          "@id": "schema:PhysicalActivity"
        },
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Recommendation"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:SpecialAnnouncement"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:ActionAccessSpecification"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:PhysicalActivityCategory"
        },
        {
          "@id": "schema:Thing"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
        }
      ]
    },
    {
      "@id": "schema:medicalAudience",
      "@type": "rdf:Property",
      "rdfs:comment": "Medical audience for page.",
      "rdfs:label": "medicalAudience",
      "schema:domainIncludes": {
        "@id": "schema:MedicalWebPage"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalAudienceType"
        },
        {
          "@id": "schema:MedicalAudience"
        }
      ]
    },
    {
      "@id": "schema:AutoBodyShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "Auto body shop.",
      "rdfs:label": "AutoBodyShop",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:EmploymentAgency",
      "@type": "rdfs:Class",
      "rdfs:comment": "An employment agency.",
      "rdfs:label": "EmploymentAgency",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:Ticket",
      "@type": "rdfs:Class",
      "rdfs:comment": "Used to describe a ticket to an event, a flight, a bus ride, etc.",
      "rdfs:label": "Ticket",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:rxcui",
      "@type": "rdf:Property",
      "rdfs:comment": "The RxCUI drug identifier from RXNORM.",
      "rdfs:label": "rxcui",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:editEIDR",
      "@type": "rdf:Property",
      "rdfs:comment": "An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.\n\nFor example, the motion picture known as \"Ghostbusters\" whose [[titleEIDR]] is \"10.5240/7EC7-228A-510A-053E-CBB8-J\", has several edits e.g. \"10.5240/1F2A-E1C5-680A-14C6-E76B-I\" and \"10.5240/8A35-3BEE-6497-5D12-9E4F-3\".\n\nSince schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.\n",
      "rdfs:label": "editEIDR",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2469"
      }
    },
    {
      "@id": "schema:WearableSizeGroupRegular",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Regular\" for wearables.",
      "rdfs:label": "WearableSizeGroupRegular",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:containsPlace",
      "@type": "rdf:Property",
      "rdfs:comment": "The basic containment relation between a place and another that it contains.",
      "rdfs:label": "containsPlace",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:inverseOf": {
        "@id": "schema:containedInPlace"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:SatireOrParodyContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'satire or parody content' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'satire or parody content': A video that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the “missing context” rating.)\n\nFor an [[ImageObject]] to be 'satire or parody content': An image that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the “missing context” rating.)\n\nFor an [[ImageObject]] with embedded text to be 'satire or parody content': An image that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the “missing context” rating.)\n\nFor an [[AudioObject]] to be 'satire or parody content': Audio that was created as political or humorous commentary and is presented in that context. (Reshares of satire/parody content that do not include relevant context are more likely to fall under the “missing context” rating.)\n",
      "rdfs:label": "SatireOrParodyContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:BroadcastFrequencySpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "The frequency in MHz and the modulation used for a particular BroadcastService.",
      "rdfs:label": "BroadcastFrequencySpecification",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:productionCompany",
      "@type": "rdf:Property",
      "rdfs:comment": "The production company or studio responsible for the item e.g. series, video game, episode etc.",
      "rdfs:label": "productionCompany",
      "schema:domainIncludes": [
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:TVSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:hasMerchantReturnPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies a MerchantReturnPolicy that may be applicable.",
      "rdfs:label": "hasMerchantReturnPolicy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:RadioStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A radio station.",
      "rdfs:label": "RadioStation",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:GenderType",
      "@type": "rdfs:Class",
      "rdfs:comment": "An enumeration of genders.",
      "rdfs:label": "GenderType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:VeterinaryCare",
      "@type": "rdfs:Class",
      "rdfs:comment": "A vet's office.",
      "rdfs:label": "VeterinaryCare",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:sdPublisher",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The\n[[sdPublisher]] property helps make such practices more explicit.",
      "rdfs:label": "sdPublisher",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1886"
      }
    },
    {
      "@id": "schema:UnofficialLegalValue",
      "@type": "schema:LegalValueLevel",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#LegalValue-unofficial"
      },
      "rdfs:comment": "Indicates that a document has no particular or special standing (e.g. a republication of a law by a private publisher).",
      "rdfs:label": "UnofficialLegalValue",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:Series",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].",
      "rdfs:label": "Series",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:Nonprofit501c10",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c10: Non-profit type referring to Domestic Fraternal Societies and Associations.",
      "rdfs:label": "Nonprofit501c10",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:borrower",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The person that borrows the object being lent.",
      "rdfs:label": "borrower",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:LendAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:GlutenFreeDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet exclusive of gluten.",
      "rdfs:label": "GlutenFreeDiet"
    },
    {
      "@id": "schema:handlingTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. Typical properties: minValue, maxValue, unitCode (d for DAY).  This is by common convention assumed to mean business days (if a unitCode is used, coded as \"d\"), i.e. only counting days when the business normally operates.",
      "rdfs:label": "handlingTime",
      "schema:domainIncludes": {
        "@id": "schema:ShippingDeliveryTime"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:actionAccessibilityRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "A set of requirements that a must be fulfilled in order to perform an Action. If more than one value is specied, fulfilling one set of requirements will allow the Action to be performed.",
      "rdfs:label": "actionAccessibilityRequirement",
      "schema:domainIncludes": {
        "@id": "schema:ConsumeAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ActionAccessSpecification"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:costCurrency",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency (in 3-letter of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217. ",
      "rdfs:label": "costCurrency",
      "schema:domainIncludes": {
        "@id": "schema:DrugCost"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:URL",
      "@type": "rdfs:Class",
      "rdfs:comment": "Data type: URL.",
      "rdfs:label": "URL",
      "rdfs:subClassOf": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WinAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of achieving victory in a competitive activity.",
      "rdfs:label": "WinAction",
      "rdfs:subClassOf": {
        "@id": "schema:AchieveAction"
      }
    },
    {
      "@id": "schema:Store",
      "@type": "rdfs:Class",
      "rdfs:comment": "A retail good store.",
      "rdfs:label": "Store",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:SatiricalArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.",
      "rdfs:label": "SatiricalArticle",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:commentText",
      "@type": "rdf:Property",
      "rdfs:comment": "The text of the UserComment.",
      "rdfs:label": "commentText",
      "schema:domainIncludes": {
        "@id": "schema:UserComments"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:identifier",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/identifier"
      },
      "rdfs:comment": "The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.\n        ",
      "rdfs:label": "identifier",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:Book",
      "@type": "rdfs:Class",
      "rdfs:comment": "A book.",
      "rdfs:label": "Book",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:servingSize",
      "@type": "rdf:Property",
      "rdfs:comment": "The serving size, in terms of the number of volume or mass.",
      "rdfs:label": "servingSize",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BloodTest",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical test performed on a sample of a patient's blood.",
      "rdfs:label": "BloodTest",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:playersOnline",
      "@type": "rdf:Property",
      "rdfs:comment": "Number of players on the server.",
      "rdfs:label": "playersOnline",
      "schema:domainIncludes": {
        "@id": "schema:GameServer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:specialCommitments",
      "@type": "rdf:Property",
      "rdfs:comment": "Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.",
      "rdfs:label": "specialCommitments",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:InsertAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of adding at a specific location in an ordered collection.",
      "rdfs:label": "InsertAction",
      "rdfs:subClassOf": {
        "@id": "schema:AddAction"
      }
    },
    {
      "@id": "schema:expectedArrivalUntil",
      "@type": "rdf:Property",
      "rdfs:comment": "The latest date the package may arrive.",
      "rdfs:label": "expectedArrivalUntil",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:WearableMeasurementCup",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the cup, for example of a bra",
      "rdfs:label": "WearableMeasurementCup",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:potentialAction",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
      "rdfs:label": "potentialAction",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:WearableSizeSystemCN",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Chinese size system for wearables.",
      "rdfs:label": "WearableSizeSystemCN",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:numberOfCredits",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.",
      "rdfs:label": "numberOfCredits",
      "schema:domainIncludes": [
        {
          "@id": "schema:Course"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:StructuredValue"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:broadcaster",
      "@type": "rdf:Property",
      "rdfs:comment": "The organization owning or operating the broadcast service.",
      "rdfs:label": "broadcaster",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:DisabilitySupport",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "DisabilitySupport: this is a benefit for disability support.",
      "rdfs:label": "DisabilitySupport",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:hasEnergyConsumptionDetails",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the energy efficiency Category (also known as \"class\" or \"rating\") for a product according to an international energy efficiency standard.",
      "rdfs:label": "hasEnergyConsumptionDetails",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EnergyConsumptionDetails"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:datasetTimeInterval",
      "@type": "rdf:Property",
      "rdfs:comment": "The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).",
      "rdfs:label": "datasetTimeInterval",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:supersededBy": {
        "@id": "schema:temporalCoverage"
      }
    },
    {
      "@id": "schema:availabilityStarts",
      "@type": "rdf:Property",
      "rdfs:comment": "The beginning of the availability of the product or service included in the offer.",
      "rdfs:label": "availabilityStarts",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Time"
        },
        {
          "@id": "schema:Date"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
        }
      ]
    },
    {
      "@id": "schema:location",
      "@type": "rdf:Property",
      "rdfs:comment": "The location of, for example, where an event is happening, where an organization is located, or where an action takes place.",
      "rdfs:label": "location",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Action"
        },
        {
          "@id": "schema:InteractionCounter"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:PostalAddress"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:VirtualLocation"
        }
      ]
    },
    {
      "@id": "schema:Occupation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A profession, may involve prolonged training and/or a formal qualification.",
      "rdfs:label": "Occupation",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:Plumber",
      "@type": "rdfs:Class",
      "rdfs:comment": "A plumbing service.",
      "rdfs:label": "Plumber",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:license",
      "@type": "rdf:Property",
      "rdfs:comment": "A license document that applies to this content, typically indicated by URL.",
      "rdfs:label": "license",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:AuthoritativeLegalValue",
      "@type": "schema:LegalValueLevel",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#LegalValue-authoritative"
      },
      "rdfs:comment": "Indicates that the publisher gives some special status to the publication of the document. (\"The Queens Printer\" version of a UK Act of Parliament, or the PDF version of a Directive published by the EU Office of Publications). Something \"Authoritative\" is considered to be also [[OfficialLegalValue]]\".",
      "rdfs:label": "AuthoritativeLegalValue",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:CausesHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about the causes and main actions that gave rise to the topic.",
      "rdfs:label": "CausesHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:isAcceptingNewPatients",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the provider is accepting new patients.",
      "rdfs:label": "isAcceptingNewPatients",
      "schema:domainIncludes": {
        "@id": "schema:MedicalOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:Optician",
      "@type": "rdfs:Class",
      "rdfs:comment": "A store that sells reading glasses and similar devices for improving vision.",
      "rdfs:label": "Optician",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:partySize",
      "@type": "rdf:Property",
      "rdfs:comment": "Number of people the reservation should accommodate.",
      "rdfs:label": "partySize",
      "schema:domainIncludes": [
        {
          "@id": "schema:TaxiReservation"
        },
        {
          "@id": "schema:FoodEstablishmentReservation"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Integer"
        }
      ]
    },
    {
      "@id": "schema:gamePlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "The electronic systems used to play <a href=\"http://en.wikipedia.org/wiki/Category:Video_game_platforms\">video games</a>.",
      "rdfs:label": "gamePlatform",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:VideoGame"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Thing"
        }
      ]
    },
    {
      "@id": "schema:valuePattern",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies a regular expression for testing literal values according to the HTML spec.",
      "rdfs:label": "valuePattern",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:flightNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.",
      "rdfs:label": "flightNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:trainNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The unique identifier for the train.",
      "rdfs:label": "trainNumber",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Geriatric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with the diagnosis and treatment of diseases, debilities and provision of care to the aged.",
      "rdfs:label": "Geriatric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:GovernmentOffice",
      "@type": "rdfs:Class",
      "rdfs:comment": "A government office&#x2014;for example, an IRS or DMV office.",
      "rdfs:label": "GovernmentOffice",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:SingleCenterTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial that takes place at a single center.",
      "rdfs:label": "SingleCenterTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Preschool",
      "@type": "rdfs:Class",
      "rdfs:comment": "A preschool.",
      "rdfs:label": "Preschool",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:itemDefectReturnLabelSource",
      "@type": "rdf:Property",
      "rdfs:comment": "The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.",
      "rdfs:label": "itemDefectReturnLabelSource",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnLabelSourceEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:LodgingBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "A lodging business, such as a motel, hotel, or inn.",
      "rdfs:label": "LodgingBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:eduQuestionType",
      "@type": "rdf:Property",
      "rdfs:comment": "For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: \"Multiple choice\", \"Open ended\", \"Flashcard\".",
      "rdfs:label": "eduQuestionType",
      "schema:domainIncludes": [
        {
          "@id": "schema:SolveMathAction"
        },
        {
          "@id": "schema:Question"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2636"
      }
    },
    {
      "@id": "schema:menu",
      "@type": "rdf:Property",
      "rdfs:comment": "Either the actual menu as a structured representation, as text, or a URL of the menu.",
      "rdfs:label": "menu",
      "schema:domainIncludes": {
        "@id": "schema:FoodEstablishment"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Menu"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:hasMenu"
      }
    },
    {
      "@id": "schema:wordCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of words in the text of the Article.",
      "rdfs:label": "wordCount",
      "schema:domainIncludes": {
        "@id": "schema:Article"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:availableOnDevice",
      "@type": "rdf:Property",
      "rdfs:comment": "Device required to run the application. Used in cases where a specific make/model is required to run the application.",
      "rdfs:label": "availableOnDevice",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:orderedItem",
      "@type": "rdf:Property",
      "rdfs:comment": "The item ordered.",
      "rdfs:label": "orderedItem",
      "schema:domainIncludes": [
        {
          "@id": "schema:Order"
        },
        {
          "@id": "schema:OrderItem"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:OrderItem"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        }
      ]
    },
    {
      "@id": "schema:DownloadAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of downloading an object.",
      "rdfs:label": "DownloadAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:jobLocationType",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the job location (e.g TELECOMMUTE for telecommute jobs).",
      "rdfs:label": "jobLocationType",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1591"
      }
    },
    {
      "@id": "schema:articleBody",
      "@type": "rdf:Property",
      "rdfs:comment": "The actual body of the article.",
      "rdfs:label": "articleBody",
      "schema:domainIncludes": {
        "@id": "schema:Article"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:HairSalon",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hair salon.",
      "rdfs:label": "HairSalon",
      "rdfs:subClassOf": {
        "@id": "schema:HealthAndBeautyBusiness"
      }
    },
    {
      "@id": "schema:roofLoad",
      "@type": "rdf:Property",
      "rdfs:comment": "The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\\n\\nTypical unit code(s): KGM for kilogram, LBR for pound\\n\\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "roofLoad",
      "schema:domainIncludes": [
        {
          "@id": "schema:Car"
        },
        {
          "@id": "schema:BusOrCoach"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:SteeringPositionValue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A value indicating a steering position.",
      "rdfs:label": "SteeringPositionValue",
      "rdfs:subClassOf": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:legislationIdentifier",
      "@type": "rdf:Property",
      "http://www.w3.org/2004/02/skos/core#closeMatch": {
        "@id": "http://data.europa.eu/eli/ontology#id_local"
      },
      "rdfs:comment": "An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.",
      "rdfs:label": "legislationIdentifier",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:interactionStatistic",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.",
      "rdfs:label": "interactionStatistic",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:InteractionCounter"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2421"
      }
    },
    {
      "@id": "schema:foodWarning",
      "@type": "rdf:Property",
      "rdfs:comment": "Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.",
      "rdfs:label": "foodWarning",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:AcceptAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of committing to/adopting an object.\\n\\nRelated actions:\\n\\n* [[RejectAction]]: The antonym of AcceptAction.",
      "rdfs:label": "AcceptAction",
      "rdfs:subClassOf": {
        "@id": "schema:AllocateAction"
      }
    },
    {
      "@id": "schema:accountMinimumInflow",
      "@type": "rdf:Property",
      "rdfs:comment": "A minimum amount that has to be paid in every month.",
      "rdfs:label": "accountMinimumInflow",
      "schema:domainIncludes": {
        "@id": "schema:BankAccount"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:Abdomen",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Abdomen clinical examination.",
      "rdfs:label": "Abdomen",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:driveWheelConfiguration",
      "@type": "rdf:Property",
      "rdfs:comment": "The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.",
      "rdfs:label": "driveWheelConfiguration",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DriveWheelConfigurationValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:Grant",
      "@type": "rdfs:Class",
      "rdfs:comment": "A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],\n    sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g. office space).\n\nGrants support  activities directed towards some agreed collective goals, often but not always organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.\n\nThe amount of a [[Grant]] is represented using [[amount]] as a [[MonetaryAmount]].\n    ",
      "rdfs:label": "Grant",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        }
      ]
    },
    {
      "@id": "schema:CoOp",
      "@type": "schema:GamePlayMode",
      "rdfs:comment": "Play mode: CoOp. Co-operative games, where you play on the same team with friends.",
      "rdfs:label": "CoOp"
    },
    {
      "@id": "schema:paymentStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The status of payment; whether the invoice has been paid or not.",
      "rdfs:label": "paymentStatus",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:PaymentStatusType"
        }
      ]
    },
    {
      "@id": "schema:messageAttachment",
      "@type": "rdf:Property",
      "rdfs:comment": "A CreativeWork attached to the message.",
      "rdfs:label": "messageAttachment",
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:suggestedMaxAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Maximum recommended age in years for the audience or user.",
      "rdfs:label": "suggestedMaxAge",
      "schema:domainIncludes": {
        "@id": "schema:PeopleAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:UserPlays",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserPlays",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:ScholarlyArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A scholarly article.",
      "rdfs:label": "ScholarlyArticle",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      }
    },
    {
      "@id": "schema:MedicalAudienceType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Target audiences types for medical web pages. Enumerated type.",
      "rdfs:label": "MedicalAudienceType",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:repeatCount",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the number of times a recurring [[Event]] will take place",
      "rdfs:label": "repeatCount",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:shippingSettingsLink",
      "@type": "rdf:Property",
      "rdfs:comment": "Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]] details.",
      "rdfs:label": "shippingSettingsLink",
      "schema:domainIncludes": {
        "@id": "schema:OfferShippingDetails"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:MedicalStudyStatus",
      "@type": "rdfs:Class",
      "rdfs:comment": "The status of a medical study. Enumerated type.",
      "rdfs:label": "MedicalStudyStatus",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:OverviewHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Overview of the content. Contains a summarized view of the topic with the most relevant information for an introduction.",
      "rdfs:label": "OverviewHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:softwareRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).",
      "rdfs:label": "softwareRequirements",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:EntertainmentBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "A business providing entertainment.",
      "rdfs:label": "EntertainmentBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:MotorcycleDealer",
      "@type": "rdfs:Class",
      "rdfs:comment": "A motorcycle dealer.",
      "rdfs:label": "MotorcycleDealer",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:wheelbase",
      "@type": "rdf:Property",
      "rdfs:comment": "The distance between the centers of the front and rear wheels.\\n\\nTypical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet",
      "rdfs:label": "wheelbase",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:utterances",
      "@type": "rdf:Property",
      "rdfs:comment": "Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented as a [[HyperTocEntry]].",
      "rdfs:label": "utterances",
      "schema:domainIncludes": {
        "@id": "schema:HyperTocEntry"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2766"
      }
    },
    {
      "@id": "schema:phoneticText",
      "@type": "rdf:Property",
      "rdfs:comment": "Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]. For example the city name of Houston in IPA: /ˈhjuːstən/.",
      "rdfs:label": "phoneticText",
      "schema:domainIncludes": {
        "@id": "schema:PronounceableText"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2108"
      }
    },
    {
      "@id": "schema:assembly",
      "@type": "rdf:Property",
      "rdfs:comment": "Library file name e.g., mscorlib.dll, system.web.dll.",
      "rdfs:label": "assembly",
      "schema:domainIncludes": {
        "@id": "schema:APIReference"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:executableLibraryName"
      }
    },
    {
      "@id": "schema:hasCredential",
      "@type": "rdf:Property",
      "rdfs:comment": "A credential awarded to the Person or Organization.",
      "rdfs:label": "hasCredential",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EducationalOccupationalCredential"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:SymptomsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Symptoms or related symptoms of a Topic.",
      "rdfs:label": "SymptomsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:Drug",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/410942007"
      },
      "rdfs:comment": "A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge make a clear difference between them.",
      "rdfs:label": "Drug",
      "rdfs:subClassOf": {
        "@id": "schema:Substance"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:foodEstablishment",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The specific food establishment where the action occurred.",
      "rdfs:label": "foodEstablishment",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:CookAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:FoodEstablishment"
        },
        {
          "@id": "schema:Place"
        }
      ]
    },
    {
      "@id": "schema:nonprofitStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "nonprofit Status indicates the legal status of a non-profit organization in its primary place of business.",
      "rdfs:label": "nonprofitStatus",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:NonprofitType"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:PaymentComplete",
      "@type": "schema:PaymentStatusType",
      "rdfs:comment": "The payment has been received and processed.",
      "rdfs:label": "PaymentComplete"
    },
    {
      "@id": "schema:valueRequired",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the property must be filled in to complete the action.  Default is false.",
      "rdfs:label": "valueRequired",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:regionsAllowed",
      "@type": "rdf:Property",
      "rdfs:comment": "The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).",
      "rdfs:label": "regionsAllowed",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:serviceUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The website to access the service.",
      "rdfs:label": "serviceUrl",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:CohortStudy",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "Also known as a panel study. A cohort study is a form of longitudinal study used in medicine and social science. It is one type of study design and should be compared with a cross-sectional study.  A cohort is a group of people who share a common characteristic or experience within a defined period (e.g., are born, leave school, lose their job, are exposed to a drug or a vaccine, etc.). The comparison group may be the general population from which the cohort is drawn, or it may be another cohort of persons thought to have had little or no exposure to the substance under investigation, but otherwise similar. Alternatively, subgroups within the cohort may be compared with each other.",
      "rdfs:label": "CohortStudy",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:SurgicalProcedure",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/387713003"
      },
      "rdfs:comment": "A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.",
      "rdfs:label": "SurgicalProcedure",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:TheaterGroup",
      "@type": "rdfs:Class",
      "rdfs:comment": "A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.",
      "rdfs:label": "TheaterGroup",
      "rdfs:subClassOf": {
        "@id": "schema:PerformingGroup"
      }
    },
    {
      "@id": "schema:browserRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.",
      "rdfs:label": "browserRequirements",
      "schema:domainIncludes": {
        "@id": "schema:WebApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:priceCurrency",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\\n\\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. \"BTC\"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. \"Ithaca HOUR\".",
      "rdfs:label": "priceCurrency",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Ticket"
        },
        {
          "@id": "schema:Reservation"
        },
        {
          "@id": "schema:TradeAction"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EnrollingByInvitation",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Enrolling participants by invitation only.",
      "rdfs:label": "EnrollingByInvitation",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:title",
      "@type": "rdf:Property",
      "rdfs:comment": "The title of the job.",
      "rdfs:label": "title",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PaymentService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Service to transfer funds from a person or organization to a beneficiary person or organization.",
      "rdfs:label": "PaymentService",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialProduct"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:accessibilityFeature",
      "@type": "rdf:Property",
      "rdfs:comment": "Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility ([WebSchemas wiki lists possible values](http://www.w3.org/wiki/WebSchemas/Accessibility)).",
      "rdfs:label": "accessibilityFeature",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WearableMeasurementLength",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Represents the length, for example of a dress",
      "rdfs:label": "WearableMeasurementLength",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:merchantReturnDays",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].",
      "rdfs:label": "merchantReturnDays",
      "schema:domainIncludes": [
        {
          "@id": "schema:MerchantReturnPolicy"
        },
        {
          "@id": "schema:MerchantReturnPolicySeasonalOverride"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Integer"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:PrimaryCare",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The medical care by a physician, or other health-care professional, who is the patient's first contact with the health-care system and who may recommend a specialist if necessary.",
      "rdfs:label": "PrimaryCare",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:arrivalBoatTerminal",
      "@type": "rdf:Property",
      "rdfs:comment": "The terminal or port from which the boat arrives.",
      "rdfs:label": "arrivalBoatTerminal",
      "schema:domainIncludes": {
        "@id": "schema:BoatTrip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BoatTerminal"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1755"
      }
    },
    {
      "@id": "schema:mentions",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.",
      "rdfs:label": "mentions",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:ethicsPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.",
      "rdfs:label": "ethicsPolicy",
      "schema:domainIncludes": [
        {
          "@id": "schema:NewsMediaOrganization"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
      }
    },
    {
      "@id": "schema:WebApplication",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web applications.",
      "rdfs:label": "WebApplication",
      "rdfs:subClassOf": {
        "@id": "schema:SoftwareApplication"
      }
    },
    {
      "@id": "schema:nextItem",
      "@type": "rdf:Property",
      "rdfs:comment": "A link to the ListItem that follows the current one.",
      "rdfs:label": "nextItem",
      "schema:domainIncludes": {
        "@id": "schema:ListItem"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ListItem"
      }
    },
    {
      "@id": "schema:CityHall",
      "@type": "rdfs:Class",
      "rdfs:comment": "A city hall.",
      "rdfs:label": "CityHall",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentBuilding"
      }
    },
    {
      "@id": "schema:ShoeStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A shoe store.",
      "rdfs:label": "ShoeStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:fuelCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.\\n\\nTypical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).",
      "rdfs:label": "fuelCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:catalogNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The catalog number for the release.",
      "rdfs:label": "catalogNumber",
      "schema:domainIncludes": {
        "@id": "schema:MusicRelease"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:correctionsPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.",
      "rdfs:label": "correctionsPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:NewsMediaOrganization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:InteractionCounter",
      "@type": "rdfs:Class",
      "rdfs:comment": "A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.",
      "rdfs:label": "InteractionCounter",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      }
    },
    {
      "@id": "schema:ChildrensEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Children's event.",
      "rdfs:label": "ChildrensEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:price",
      "@type": "rdf:Property",
      "rdfs:comment": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\\n\\nUsage guidelines:\\n\\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. \"BTC\"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. \"Ithaca HOUR\") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a \"content=\" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n      ",
      "rdfs:label": "price",
      "schema:domainIncludes": [
        {
          "@id": "schema:TradeAction"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:ReviewAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.",
      "rdfs:label": "ReviewAction",
      "rdfs:subClassOf": {
        "@id": "schema:AssessAction"
      }
    },
    {
      "@id": "schema:variesBy",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the property or properties by which the variants in a [[ProductGroup]] vary, e.g. their size, color etc. Schema.org properties can be referenced by their short name e.g. \"color\"; terms defined elsewhere can be referenced with their URIs.",
      "rdfs:label": "variesBy",
      "schema:domainIncludes": {
        "@id": "schema:ProductGroup"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:ReturnLabelInBox",
      "@type": "schema:ReturnLabelSourceEnumeration",
      "rdfs:comment": "Specifies that a return label will be provided by the seller in the shipping box.",
      "rdfs:label": "ReturnLabelInBox",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:temporal",
      "@type": "rdf:Property",
      "rdfs:comment": "The \"temporal\" property can be used in cases where more specific properties\n(e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.",
      "rdfs:label": "temporal",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:measurementTechnique",
      "@type": "rdf:Property",
      "rdfs:comment": "A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),\ncorresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.\n\nFor example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\".\n\nIf the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]] could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\".\n\nIf there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].\n      ",
      "rdfs:label": "measurementTechnique",
      "schema:domainIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:DataDownload"
        },
        {
          "@id": "schema:DataCatalog"
        },
        {
          "@id": "schema:Dataset"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1425"
      }
    },
    {
      "@id": "schema:MedicalEntity",
      "@type": "rdfs:Class",
      "rdfs:comment": "The most generic type of entity related to health and the practice of medicine.",
      "rdfs:label": "MedicalEntity",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:FrontWheelDriveConfiguration",
      "@type": "schema:DriveWheelConfigurationValue",
      "rdfs:comment": "Front-wheel drive is a transmission layout where the engine drives the front wheels.",
      "rdfs:label": "FrontWheelDriveConfiguration",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:ratingValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The rating for the content.\\n\\nUsage guidelines:\\n\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "ratingValue",
      "schema:domainIncludes": {
        "@id": "schema:Rating"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:billingStart",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for example, to model a price increase after the first year of a subscription. The unit of measurement is specified by the unitCode property.",
      "rdfs:label": "billingStart",
      "schema:domainIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:Nonprofit501c3",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c3: Non-profit type referring to Religious, Educational, Charitable, Scientific, Literary, Testing for Public Safety, to Foster National or International Amateur Sports Competition, or Prevention of Cruelty to Children or Animals Organizations.",
      "rdfs:label": "Nonprofit501c3",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:BrainStructure",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.",
      "rdfs:label": "BrainStructure",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:strengthUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "The units of an active ingredient's strength, e.g. mg.",
      "rdfs:label": "strengthUnit",
      "schema:domainIncludes": {
        "@id": "schema:DrugStrength"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:MusicVenue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A music venue.",
      "rdfs:label": "MusicVenue",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:SellAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.",
      "rdfs:label": "SellAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:DigitalFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "DigitalFormat.",
      "rdfs:label": "DigitalFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:VisualArtsEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Visual arts event.",
      "rdfs:label": "VisualArtsEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:videoFormat",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).",
      "rdfs:label": "videoFormat",
      "schema:domainIncludes": [
        {
          "@id": "schema:ScreeningEvent"
        },
        {
          "@id": "schema:BroadcastService"
        },
        {
          "@id": "schema:BroadcastEvent"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:nutrition",
      "@type": "rdf:Property",
      "rdfs:comment": "Nutrition information about the recipe or menu item.",
      "rdfs:label": "nutrition",
      "schema:domainIncludes": [
        {
          "@id": "schema:Recipe"
        },
        {
          "@id": "schema:MenuItem"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:NutritionInformation"
      }
    },
    {
      "@id": "schema:usageInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.\n\nThis property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.",
      "rdfs:label": "usageInfo",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2454"
      }
    },
    {
      "@id": "schema:Audiobook",
      "@type": "rdfs:Class",
      "rdfs:comment": "An audiobook.",
      "rdfs:label": "Audiobook",
      "rdfs:subClassOf": [
        {
          "@id": "schema:AudioObject"
        },
        {
          "@id": "schema:Book"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:CheckOutAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).\\n\\nRelated actions:\\n\\n* [[CheckInAction]]: The antonym of CheckOutAction.\\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\\n* [[CancelAction]]: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.",
      "rdfs:label": "CheckOutAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:suggestedMinAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Minimum recommended age in years for the audience or user.",
      "rdfs:label": "suggestedMinAge",
      "schema:domainIncludes": {
        "@id": "schema:PeopleAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:UnitPriceSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "The price asked for a given offer by the respective organization or person.",
      "rdfs:label": "UnitPriceSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:primaryPrevention",
      "@type": "rdf:Property",
      "rdfs:comment": "A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.",
      "rdfs:label": "primaryPrevention",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTherapy"
      }
    },
    {
      "@id": "schema:BoatTrip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A trip on a commercial ferry line.",
      "rdfs:label": "BoatTrip",
      "rdfs:subClassOf": {
        "@id": "schema:Trip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1755"
      }
    },
    {
      "@id": "schema:recipeIngredient",
      "@type": "rdf:Property",
      "rdfs:comment": "A single ingredient used in the recipe, e.g. sugar, flour or garlic.",
      "rdfs:label": "recipeIngredient",
      "rdfs:subPropertyOf": {
        "@id": "schema:supply"
      },
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:subjectOf",
      "@type": "rdf:Property",
      "rdfs:comment": "A CreativeWork or Event about this Thing.",
      "rdfs:label": "subjectOf",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:inverseOf": {
        "@id": "schema:about"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1670"
      }
    },
    {
      "@id": "schema:replyToUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL at which a reply may be posted to the specified UserComment.",
      "rdfs:label": "replyToUrl",
      "schema:domainIncludes": {
        "@id": "schema:UserComments"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:FireStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A fire station. With firemen.",
      "rdfs:label": "FireStation",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:EmergencyService"
        }
      ]
    },
    {
      "@id": "schema:numConstraints",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the number of constraints (not counting [[populationType]]) defined for a particular [[StatisticalPopulation]]. This helps applications understand if they have access to a sufficiently complete description of a [[StatisticalPopulation]].",
      "rdfs:label": "numConstraints",
      "schema:domainIncludes": {
        "@id": "schema:StatisticalPopulation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:creativeWorkStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.",
      "rdfs:label": "creativeWorkStatus",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/987"
      }
    },
    {
      "@id": "schema:HearingImpairedSupported",
      "@type": "schema:ContactPointOption",
      "rdfs:comment": "Uses devices to support users with hearing impairments.",
      "rdfs:label": "HearingImpairedSupported"
    },
    {
      "@id": "schema:OfferShippingDetails",
      "@type": "rdfs:Class",
      "rdfs:comment": "OfferShippingDetails represents information about shipping destinations.\n\nMultiple of these entities can be used to represent different shipping rates for different destinations:\n\nOne entity for Alaska/Hawaii. A different one for continental US.A different one for all France.\n\nMultiple of these entities can be used to represent different shipping costs and delivery times.\n\nTwo entities that are identical but differ in rate and time:\n\ne.g. Cheaper and slower: $5 in 5-7days\nor Fast and expensive: $15 in 1-2 days.",
      "rdfs:label": "OfferShippingDetails",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:MenuItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "A food or drink item listed in a menu or menu section.",
      "rdfs:label": "MenuItem",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:catalog",
      "@type": "rdf:Property",
      "rdfs:comment": "A data catalog which contains this dataset.",
      "rdfs:label": "catalog",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataCatalog"
      },
      "schema:supersededBy": {
        "@id": "schema:includedInDataCatalog"
      }
    },
    {
      "@id": "schema:query",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The query used on this action.",
      "rdfs:label": "query",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": {
        "@id": "schema:SearchAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Crematorium",
      "@type": "rdfs:Class",
      "rdfs:comment": "A crematorium.",
      "rdfs:label": "Crematorium",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:billingAddress",
      "@type": "rdf:Property",
      "rdfs:comment": "The billing address for the order.",
      "rdfs:label": "billingAddress",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PostalAddress"
      }
    },
    {
      "@id": "schema:vehicleConfiguration",
      "@type": "rdf:Property",
      "rdfs:comment": "A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.",
      "rdfs:label": "vehicleConfiguration",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:aspect",
      "@type": "rdf:Property",
      "rdfs:comment": "An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.",
      "rdfs:label": "aspect",
      "schema:domainIncludes": {
        "@id": "schema:MedicalWebPage"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:mainContentOfPage"
      }
    },
    {
      "@id": "schema:Protein",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": {
        "@id": "http://bioschemas.org"
      },
      "rdfs:comment": "Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type schema:Protein. A protein can thus be a subclass of another protein, e.g. schema:Protein as a UniProt record can have multiple isoforms inside it which would also be schema:Protein. They can be imagined, synthetic, hypothetical or naturally occurring.",
      "rdfs:label": "Protein",
      "rdfs:subClassOf": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:WearableMeasurementChestOrBust",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the chest/bust section, for example of a suit",
      "rdfs:label": "WearableMeasurementChestOrBust",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:WantAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a desire about the object. An agent wants an object.",
      "rdfs:label": "WantAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:softwareHelp",
      "@type": "rdf:Property",
      "rdfs:comment": "Software application help.",
      "rdfs:label": "softwareHelp",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:HyperToc",
      "@type": "rdfs:Class",
      "rdfs:comment": "A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be used on individual [[HyperTocEntry]] items.",
      "rdfs:label": "HyperToc",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2766"
      }
    },
    {
      "@id": "schema:TrackAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent tracks an object for updates.\\n\\nRelated actions:\\n\\n* [[FollowAction]]: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\\n* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.",
      "rdfs:label": "TrackAction",
      "rdfs:subClassOf": {
        "@id": "schema:FindAction"
      }
    },
    {
      "@id": "schema:pageStart",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/pageStart"
      },
      "rdfs:comment": "The page on which the work starts; for example \"135\" or \"xiii\".",
      "rdfs:label": "pageStart",
      "schema:domainIncludes": [
        {
          "@id": "schema:Article"
        },
        {
          "@id": "schema:Chapter"
        },
        {
          "@id": "schema:PublicationIssue"
        },
        {
          "@id": "schema:PublicationVolume"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:CommunityHealth",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A field of public health focusing on improving health characteristics of a defined population in relation with their geographical or environment areas.",
      "rdfs:label": "CommunityHealth",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:seatingType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type/class of the seat.",
      "rdfs:label": "seatingType",
      "schema:domainIncludes": {
        "@id": "schema:Seat"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ]
    },
    {
      "@id": "schema:eligibleRegion",
      "@type": "rdf:Property",
      "rdfs:comment": "The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\\n\\nSee also [[ineligibleRegion]].\n    ",
      "rdfs:label": "eligibleRegion",
      "rdfs:subPropertyOf": {
        "@id": "schema:areaServed"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:DeliveryChargeSpecification"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
        }
      ]
    },
    {
      "@id": "schema:broadcastOfEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "The event being broadcast such as a sporting event or awards ceremony.",
      "rdfs:label": "broadcastOfEvent",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:printColumn",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of the column in which the NewsArticle appears in the print edition.",
      "rdfs:label": "printColumn",
      "schema:domainIncludes": {
        "@id": "schema:NewsArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:minValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The lower value of some characteristic or property.",
      "rdfs:label": "minValue",
      "schema:domainIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PropertyValueSpecification"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:DrugPregnancyCategory",
      "@type": "rdfs:Class",
      "rdfs:comment": "Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.",
      "rdfs:label": "DrugPregnancyCategory",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:OfficialLegalValue",
      "@type": "schema:LegalValueLevel",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#LegalValue-official"
      },
      "rdfs:comment": "All the documents published by an official publisher should have at least the legal value level \"OfficialLegalValue\". This indicates that the document was published by an organisation with the public task of making it available (e.g. a consolidated version of a EU directive published by the EU Office of Publications).",
      "rdfs:label": "OfficialLegalValue",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:Installment",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the installment pricing component of the total price for an offered product.",
      "rdfs:label": "Installment",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:WearableSizeGroupHusky",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Husky\" (or \"Stocky\") for wearables.",
      "rdfs:label": "WearableSizeGroupHusky",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:MusicPlaylist",
      "@type": "rdfs:Class",
      "rdfs:comment": "A collection of music tracks in playlist form.",
      "rdfs:label": "MusicPlaylist",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:requiresSubscription",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').",
      "rdfs:label": "requiresSubscription",
      "schema:domainIncludes": [
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Boolean"
        },
        {
          "@id": "schema:MediaSubscription"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:runtime",
      "@type": "rdf:Property",
      "rdfs:comment": "Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).",
      "rdfs:label": "runtime",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:runtimePlatform"
      }
    },
    {
      "@id": "schema:MedicineSystem",
      "@type": "rdfs:Class",
      "rdfs:comment": "Systems of medical practice.",
      "rdfs:label": "MedicineSystem",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EmergencyService",
      "@type": "rdfs:Class",
      "rdfs:comment": "An emergency service, such as a fire station or ER.",
      "rdfs:label": "EmergencyService",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:Duration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).",
      "rdfs:label": "Duration",
      "rdfs:subClassOf": {
        "@id": "schema:Quantity"
      }
    },
    {
      "@id": "schema:publisher",
      "@type": "rdf:Property",
      "rdfs:comment": "The publisher of the creative work.",
      "rdfs:label": "publisher",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:NonprofitSBBI",
      "@type": "schema:NLNonprofitType",
      "rdfs:comment": "NonprofitSBBI: Non-profit type referring to a Social Interest Promoting Institution (NL).",
      "rdfs:label": "NonprofitSBBI",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:memberOf",
      "@type": "rdf:Property",
      "rdfs:comment": "An Organization (or ProgramMembership) to which this Person or Organization belongs.",
      "rdfs:label": "memberOf",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:member"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ProgramMembership"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:pickupLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "Where a taxi will pick up a passenger or a rental car can be picked up.",
      "rdfs:label": "pickupLocation",
      "schema:domainIncludes": [
        {
          "@id": "schema:RentalCarReservation"
        },
        {
          "@id": "schema:TaxiReservation"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:BackgroundNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka \"explainer\" or \"backgrounder\"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education perspective.",
      "rdfs:label": "BackgroundNewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:NewsArticle"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:educationalProgramMode",
      "@type": "rdf:Property",
      "rdfs:comment": "Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. \"online\", \"onsite\" or \"blended\"; \"synchronous\" or \"asynchronous\"; \"full-time\" or \"part-time\") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).",
      "rdfs:label": "educationalProgramMode",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:Course",
      "@type": "rdfs:Class",
      "rdfs:comment": "A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.",
      "rdfs:label": "Course",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:LearningResource"
        }
      ]
    },
    {
      "@id": "schema:RespiratoryTherapy",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The therapy that is concerned with the maintenance or improvement of respiratory function (as in patients with pulmonary disease).",
      "rdfs:label": "RespiratoryTherapy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTherapy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:commentTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time at which the UserComment was made.",
      "rdfs:label": "commentTime",
      "schema:domainIncludes": {
        "@id": "schema:UserComments"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:dateRead",
      "@type": "rdf:Property",
      "rdfs:comment": "The date/time at which the message has been read by the recipient if a single recipient exists.",
      "rdfs:label": "dateRead",
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:Bakery",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bakery.",
      "rdfs:label": "Bakery",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:recipeCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "The category of the recipe—for example, appetizer, entree, etc.",
      "rdfs:label": "recipeCategory",
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:HowTo",
      "@type": "rdfs:Class",
      "rdfs:comment": "Instructions that explain how to achieve a result by performing a sequence of steps.",
      "rdfs:label": "HowTo",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:Hackathon",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.",
      "rdfs:label": "Hackathon",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2526"
      }
    },
    {
      "@id": "schema:healthPlanId",
      "@type": "rdf:Property",
      "rdfs:comment": "The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)",
      "rdfs:label": "healthPlanId",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:MusicReleaseFormatType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).",
      "rdfs:label": "MusicReleaseFormatType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:ReturnAtKiosk",
      "@type": "schema:ReturnMethodEnumeration",
      "rdfs:comment": "Specifies that product returns must be made at a kiosk.",
      "rdfs:label": "ReturnAtKiosk",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:HowToDirection",
      "@type": "rdfs:Class",
      "rdfs:comment": "A direction indicating a single action to do in the instructions for how to achieve a result.",
      "rdfs:label": "HowToDirection",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:ListItem"
        }
      ]
    },
    {
      "@id": "schema:PostalAddress",
      "@type": "rdfs:Class",
      "rdfs:comment": "The mailing address.",
      "rdfs:label": "PostalAddress",
      "rdfs:subClassOf": {
        "@id": "schema:ContactPoint"
      }
    },
    {
      "@id": "schema:ItemListOrderType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.",
      "rdfs:label": "ItemListOrderType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:payload",
      "@type": "rdf:Property",
      "rdfs:comment": "The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\\n\\nTypical unit code(s): KGM for kilogram, LBR for pound\\n\\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of [[weight]] and [[payload]]\\n* Note 2: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\\n* Note 3: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\\n* Note 4: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "payload",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:Surgical",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to treating diseases, injuries and deformities by manual and instrumental means.",
      "rdfs:label": "Surgical",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:slogan",
      "@type": "rdf:Property",
      "rdfs:comment": "A slogan or motto associated with the item.",
      "rdfs:label": "slogan",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Brand"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:subTrip",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifies a [[Trip]] that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip.",
      "rdfs:label": "subTrip",
      "schema:domainIncludes": {
        "@id": "schema:Trip"
      },
      "schema:inverseOf": {
        "@id": "schema:partOfTrip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Trip"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        }
      ]
    },
    {
      "@id": "schema:associatedClaimReview",
      "@type": "rdf:Property",
      "rdfs:comment": "An associated [[ClaimReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].",
      "rdfs:label": "associatedClaimReview",
      "rdfs:subPropertyOf": {
        "@id": "schema:associatedReview"
      },
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:releasedEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "The place and time the release was issued, expressed as a PublicationEvent.",
      "rdfs:label": "releasedEvent",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PublicationEvent"
      }
    },
    {
      "@id": "schema:Male",
      "@type": "schema:GenderType",
      "rdfs:comment": "The male gender.",
      "rdfs:label": "Male"
    },
    {
      "@id": "schema:UserBlocks",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserBlocks",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:AuthorizeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of granting permission to an object.",
      "rdfs:label": "AuthorizeAction",
      "rdfs:subClassOf": {
        "@id": "schema:AllocateAction"
      }
    },
    {
      "@id": "schema:PaymentMethod",
      "@type": "rdfs:Class",
      "rdfs:comment": "A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\\n* http://purl.org/goodrelations/v1#ByInvoice\\n* http://purl.org/goodrelations/v1#Cash\\n* http://purl.org/goodrelations/v1#CheckInAdvance\\n* http://purl.org/goodrelations/v1#COD\\n* http://purl.org/goodrelations/v1#DirectDebit\\n* http://purl.org/goodrelations/v1#GoogleCheckout\\n* http://purl.org/goodrelations/v1#PayPal\\n* http://purl.org/goodrelations/v1#PaySwarm\n        ",
      "rdfs:label": "PaymentMethod",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:answerExplanation",
      "@type": "rdf:Property",
      "rdfs:comment": "A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad clarification or statement about it. ",
      "rdfs:label": "answerExplanation",
      "schema:domainIncludes": {
        "@id": "schema:Answer"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:Comment"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2636"
      }
    },
    {
      "@id": "schema:UsedCondition",
      "@type": "schema:OfferItemCondition",
      "rdfs:comment": "Indicates that the item is used.",
      "rdfs:label": "UsedCondition"
    },
    {
      "@id": "schema:UserPlusOnes",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserPlusOnes",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:downvoteCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of downvotes this question, answer or comment has received from the community.",
      "rdfs:label": "downvoteCount",
      "schema:domainIncludes": {
        "@id": "schema:Comment"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:containedInPlace",
      "@type": "rdf:Property",
      "rdfs:comment": "The basic containment relation between a place and one that contains it.",
      "rdfs:label": "containedInPlace",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:inverseOf": {
        "@id": "schema:containsPlace"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:customer",
      "@type": "rdf:Property",
      "rdfs:comment": "Party placing the order or paying the invoice.",
      "rdfs:label": "customer",
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:includedRiskFactor",
      "@type": "rdf:Property",
      "rdfs:comment": "A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.",
      "rdfs:label": "includedRiskFactor",
      "schema:domainIncludes": {
        "@id": "schema:MedicalRiskEstimator"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalRiskFactor"
      }
    },
    {
      "@id": "schema:uploadDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Date when this media object was uploaded to this site.",
      "rdfs:label": "uploadDate",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:seasons",
      "@type": "rdf:Property",
      "rdfs:comment": "A season in a media series.",
      "rdfs:label": "seasons",
      "schema:domainIncludes": [
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:RadioSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWorkSeason"
      },
      "schema:supersededBy": {
        "@id": "schema:season"
      }
    },
    {
      "@id": "schema:RandomizedTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A randomized trial design.",
      "rdfs:label": "RandomizedTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:supplyTo",
      "@type": "rdf:Property",
      "rdfs:comment": "The area to which the artery supplies blood.",
      "rdfs:label": "supplyTo",
      "schema:domainIncludes": {
        "@id": "schema:Artery"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:programType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of educational or occupational program. For example, classroom, internship, alternance, etc..",
      "rdfs:label": "programType",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2460"
      }
    },
    {
      "@id": "schema:WPHeader",
      "@type": "rdfs:Class",
      "rdfs:comment": "The header section of the page.",
      "rdfs:label": "WPHeader",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:fuelType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.",
      "rdfs:label": "fuelType",
      "schema:domainIncludes": [
        {
          "@id": "schema:Vehicle"
        },
        {
          "@id": "schema:EngineSpecification"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:isSimilarTo",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to another, functionally similar product (or multiple products).",
      "rdfs:label": "isSimilarTo",
      "schema:domainIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:arrivalPlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "The platform where the train arrives.",
      "rdfs:label": "arrivalPlatform",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:UserInteraction",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserInteraction",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:CreativeWork",
      "@type": "rdfs:Class",
      "rdfs:comment": "The most generic kind of creative work, including books, movies, photographs, software programs, etc.",
      "rdfs:label": "CreativeWork",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:Quotation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used to reference a Quotation from an [[Event]].",
      "rdfs:label": "Quotation",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/271"
      }
    },
    {
      "@id": "schema:TraditionalChinese",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "A system of medicine based on common theoretical concepts that originated in China and evolved over thousands of years, that uses herbs, acupuncture, exercise, massage, dietary therapy, and other methods to treat a wide range of conditions.",
      "rdfs:label": "TraditionalChinese",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MusicVideoObject",
      "@type": "rdfs:Class",
      "rdfs:comment": "A music video file.",
      "rdfs:label": "MusicVideoObject",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      }
    },
    {
      "@id": "schema:PlasticSurgery",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to therapeutic or cosmetic repair or re-formation of missing, injured or malformed tissues or body parts by manual and instrumental means.",
      "rdfs:label": "PlasticSurgery",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:alternativeHeadline",
      "@type": "rdf:Property",
      "rdfs:comment": "A secondary title of the CreativeWork.",
      "rdfs:label": "alternativeHeadline",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:starRating",
      "@type": "rdf:Property",
      "rdfs:comment": "An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).",
      "rdfs:label": "starRating",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:FoodEstablishment"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Rating"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:EventSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property.\n\nAn EventSeries is a collection of events that share some unifying characteristic. For example, \"The Olympic Games\" is a series, which\nis repeated regularly. The \"2012 London Olympics\" can be presented both as an [[Event]] in the series \"Olympic Games\", and as an\n[[EventSeries]] that included a number of sporting competitions as Events.\n\nThe nature of the association between the events in an [[EventSeries]] can vary, but typical examples could\ninclude a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.\n\nEventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without\nworrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries\nmay seem more Event-like when the period of time is compact and when aspects such as location are fixed, but\nit may also sometimes prove useful to describe a longer-term series as an Event.\n   ",
      "rdfs:label": "EventSeries",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Series"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/447"
      }
    },
    {
      "@id": "schema:Thursday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Wednesday and Friday.",
      "rdfs:label": "Thursday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q129"
      }
    },
    {
      "@id": "schema:LegalForceStatus",
      "@type": "rdfs:Class",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#InForce"
      },
      "rdfs:comment": "A list of possible statuses for the legal force of a legislation.",
      "rdfs:label": "LegalForceStatus",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:proficiencyLevel",
      "@type": "rdf:Property",
      "rdfs:comment": "Proficiency needed for this content; expected values: 'Beginner', 'Expert'.",
      "rdfs:label": "proficiencyLevel",
      "schema:domainIncludes": {
        "@id": "schema:TechArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:MedicalRiskFactor",
      "@type": "rdfs:Class",
      "rdfs:comment": "A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.",
      "rdfs:label": "MedicalRiskFactor",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Flight",
      "@type": "rdfs:Class",
      "rdfs:comment": "An airline flight.",
      "rdfs:label": "Flight",
      "rdfs:subClassOf": {
        "@id": "schema:Trip"
      }
    },
    {
      "@id": "schema:bankAccountType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of a bank account.",
      "rdfs:label": "bankAccountType",
      "schema:domainIncludes": {
        "@id": "schema:BankAccount"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:totalJobOpenings",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.",
      "rdfs:label": "totalJobOpenings",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2329"
      }
    },
    {
      "@id": "schema:applicationDeadline",
      "@type": "rdf:Property",
      "rdfs:comment": "The date at which the program stops collecting applications for the next enrollment cycle.",
      "rdfs:label": "applicationDeadline",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:seller",
      "@type": "rdf:Property",
      "rdfs:comment": "An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.",
      "rdfs:label": "seller",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Order"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:BuyAction"
        },
        {
          "@id": "schema:Flight"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:ContactPointOption",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerated options related to a ContactPoint.",
      "rdfs:label": "ContactPointOption",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:executableLibraryName",
      "@type": "rdf:Property",
      "rdfs:comment": "Library file name e.g., mscorlib.dll, system.web.dll.",
      "rdfs:label": "executableLibraryName",
      "schema:domainIncludes": {
        "@id": "schema:APIReference"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Movie",
      "@type": "rdfs:Class",
      "rdfs:comment": "A movie.",
      "rdfs:label": "Movie",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:upvoteCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of upvotes this question, answer or comment has received from the community.",
      "rdfs:label": "upvoteCount",
      "schema:domainIncludes": {
        "@id": "schema:Comment"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:department",
      "@type": "rdf:Property",
      "rdfs:comment": "A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.",
      "rdfs:label": "department",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:occupationLocation",
      "@type": "rdf:Property",
      "rdfs:comment": " The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.",
      "rdfs:label": "occupationLocation",
      "schema:domainIncludes": {
        "@id": "schema:Occupation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:Newspaper",
      "@type": "rdfs:Class",
      "rdfs:comment": "A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.",
      "rdfs:label": "Newspaper",
      "rdfs:subClassOf": {
        "@id": "schema:Periodical"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:source": {
        "@id": "http://www.productontology.org/id/Newspaper"
      }
    },
    {
      "@id": "schema:Obstetric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that specializes in the care of women during the prenatal and postnatal care and with the delivery of the child.",
      "rdfs:label": "Obstetric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:FoodEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Food event.",
      "rdfs:label": "FoodEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:MovieRentalStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A movie rental store.",
      "rdfs:label": "MovieRentalStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:BankAccount",
      "@type": "rdfs:Class",
      "rdfs:comment": "A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.",
      "rdfs:label": "BankAccount",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialProduct"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:WearableSizeGroupExtraTall",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Extra Tall\" for wearables.",
      "rdfs:label": "WearableSizeGroupExtraTall",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:LearningResource",
      "@type": "rdfs:Class",
      "rdfs:comment": "The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.\n\n[[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]] etc.\n\n[[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.",
      "rdfs:label": "LearningResource",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1401"
      }
    },
    {
      "@id": "schema:BodyMeasurementHeight",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Body height (measured between crown of head and soles of feet). Used, for example, to fit jackets.",
      "rdfs:label": "BodyMeasurementHeight",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:LeaveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent leaves an event / group with participants/friends at a location.\\n\\nRelated actions:\\n\\n* [[JoinAction]]: The antonym of LeaveAction.\\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.",
      "rdfs:label": "LeaveAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:intensity",
      "@type": "rdf:Property",
      "rdfs:comment": "Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement.",
      "rdfs:label": "intensity",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:MusicComposition",
      "@type": "rdfs:Class",
      "rdfs:comment": "A musical composition.",
      "rdfs:label": "MusicComposition",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:actionOption",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The options subject to this action.",
      "rdfs:label": "actionOption",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:ChooseAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        }
      ]
    },
    {
      "@id": "schema:strengthValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The value of an active ingredient's strength, e.g. 325.",
      "rdfs:label": "strengthValue",
      "schema:domainIncludes": {
        "@id": "schema:DrugStrength"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:CompletedActionStatus",
      "@type": "schema:ActionStatusType",
      "rdfs:comment": "An action that has already taken place.",
      "rdfs:label": "CompletedActionStatus"
    },
    {
      "@id": "schema:givenName",
      "@type": "rdf:Property",
      "rdfs:comment": "Given name. In the U.S., the first name of a Person.",
      "rdfs:label": "givenName",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:softwareVersion",
      "@type": "rdf:Property",
      "rdfs:comment": "Version of the software instance.",
      "rdfs:label": "softwareVersion",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:vehicleInteriorType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.",
      "rdfs:label": "vehicleInteriorType",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:permissions",
      "@type": "rdf:Property",
      "rdfs:comment": "Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).",
      "rdfs:label": "permissions",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:track",
      "@type": "rdf:Property",
      "rdfs:comment": "A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.",
      "rdfs:label": "track",
      "schema:domainIncludes": [
        {
          "@id": "schema:MusicGroup"
        },
        {
          "@id": "schema:MusicPlaylist"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:MusicRecording"
        },
        {
          "@id": "schema:ItemList"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:nerveMotor",
      "@type": "rdf:Property",
      "rdfs:comment": "The neurological pathway extension that involves muscle control.",
      "rdfs:label": "nerveMotor",
      "schema:domainIncludes": {
        "@id": "schema:Nerve"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Muscle"
      }
    },
    {
      "@id": "schema:DiagnosticLab",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical laboratory that offers on-site or off-site diagnostic services.",
      "rdfs:label": "DiagnosticLab",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:UpdateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of managing by changing/editing the state of the object.",
      "rdfs:label": "UpdateAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:FAQPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[FAQPage]] is a [[WebPage]] presenting one or more \"[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)\" (see also [[QAPage]]).",
      "rdfs:label": "FAQPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1723"
      }
    },
    {
      "@id": "schema:SaleEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Sales event.",
      "rdfs:label": "SaleEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:MedicalDevicePurpose",
      "@type": "rdfs:Class",
      "rdfs:comment": "Categories of medical devices, organized by the purpose or intended use of the device.",
      "rdfs:label": "MedicalDevicePurpose",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:serviceType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of service being offered, e.g. veterans' benefits, emergency relief, etc.",
      "rdfs:label": "serviceType",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:GovernmentBenefitsType"
        }
      ]
    },
    {
      "@id": "schema:area",
      "@type": "rdf:Property",
      "rdfs:comment": "The area within which users can expect to reach the broadcast service.",
      "rdfs:label": "area",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      },
      "schema:supersededBy": {
        "@id": "schema:serviceArea"
      }
    },
    {
      "@id": "schema:sdLicense",
      "@type": "rdf:Property",
      "rdfs:comment": "A license document that applies to this structured data, typically indicated by URL.",
      "rdfs:label": "sdLicense",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1886"
      }
    },
    {
      "@id": "schema:Joint",
      "@type": "rdfs:Class",
      "rdfs:comment": "The anatomical location at which two or more bones make contact.",
      "rdfs:label": "Joint",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:fileSize",
      "@type": "rdf:Property",
      "rdfs:comment": "Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.",
      "rdfs:label": "fileSize",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:deliveryAddress",
      "@type": "rdf:Property",
      "rdfs:comment": "Destination address.",
      "rdfs:label": "deliveryAddress",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PostalAddress"
      }
    },
    {
      "@id": "schema:GardenStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A garden store.",
      "rdfs:label": "GardenStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:PronounceableText",
      "@type": "rdfs:Class",
      "rdfs:comment": "Data type: PronounceableText.",
      "rdfs:label": "PronounceableText",
      "rdfs:subClassOf": {
        "@id": "schema:Text"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2108"
      }
    },
    {
      "@id": "schema:loanPaymentFrequency",
      "@type": "rdf:Property",
      "rdfs:comment": "Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time.",
      "rdfs:label": "loanPaymentFrequency",
      "schema:domainIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:PetStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A pet store.",
      "rdfs:label": "PetStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:unsaturatedFatContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of unsaturated fat.",
      "rdfs:label": "unsaturatedFatContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:educationalCredentialAwarded",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.",
      "rdfs:label": "educationalCredentialAwarded",
      "schema:domainIncludes": [
        {
          "@id": "schema:Course"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:EducationalOccupationalCredential"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:hasDigitalDocumentPermission",
      "@type": "rdf:Property",
      "rdfs:comment": "A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to \"public\".",
      "rdfs:label": "hasDigitalDocumentPermission",
      "schema:domainIncludes": {
        "@id": "schema:DigitalDocument"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DigitalDocumentPermission"
      }
    },
    {
      "@id": "schema:BeautySalon",
      "@type": "rdfs:Class",
      "rdfs:comment": "Beauty salon.",
      "rdfs:label": "BeautySalon",
      "rdfs:subClassOf": {
        "@id": "schema:HealthAndBeautyBusiness"
      }
    },
    {
      "@id": "schema:SeeDoctorHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about questions that may be asked, when to see a professional, measures before seeing a doctor or content about the first consultation.",
      "rdfs:label": "SeeDoctorHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:height",
      "@type": "rdf:Property",
      "rdfs:comment": "The height of the item.",
      "rdfs:label": "height",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:VisualArtwork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Distance"
        }
      ]
    },
    {
      "@id": "schema:legislationTransposes",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#transposes"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#transposes"
      },
      "rdfs:comment": "Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations.",
      "rdfs:label": "legislationTransposes",
      "rdfs:subPropertyOf": {
        "@id": "schema:legislationApplies"
      },
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:bed",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.\n      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.",
      "rdfs:label": "bed",
      "schema:domainIncludes": [
        {
          "@id": "schema:HotelRoom"
        },
        {
          "@id": "schema:Suite"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:BedType"
        },
        {
          "@id": "schema:BedDetails"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:NonprofitANBI",
      "@type": "schema:NLNonprofitType",
      "rdfs:comment": "NonprofitANBI: Non-profit type referring to a Public Benefit Organization (NL).",
      "rdfs:label": "NonprofitANBI",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:DrugLegalStatus",
      "@type": "rdfs:Class",
      "rdfs:comment": "The legal availability status of a medical drug.",
      "rdfs:label": "DrugLegalStatus",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIntangible"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:releaseNotes",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of what changed in this version.",
      "rdfs:label": "releaseNotes",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:prepTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "prepTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToDirection"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:SearchAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of searching for an object.\\n\\nRelated actions:\\n\\n* [[FindAction]]: SearchAction generally leads to a FindAction, but not necessarily.",
      "rdfs:label": "SearchAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:Nonprofit527",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit527: Non-profit type referring to Political organizations.",
      "rdfs:label": "Nonprofit527",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:mediaAuthenticityCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was published or shared).",
      "rdfs:label": "mediaAuthenticityCategory",
      "schema:domainIncludes": {
        "@id": "schema:MediaReview"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MediaManipulationRatingEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:valueName",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.",
      "rdfs:label": "valueName",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:DefinitiveLegalValue",
      "@type": "schema:LegalValueLevel",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#LegalValue-definitive"
      },
      "rdfs:comment": "Indicates a document for which the text is conclusively what the law says and is legally binding. (e.g. The digitally signed version of an Official Journal.)\n  Something \"Definitive\" is considered to be also [[AuthoritativeLegalValue]].",
      "rdfs:label": "DefinitiveLegalValue",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:SuperficialAnatomy",
      "@type": "rdfs:Class",
      "rdfs:comment": "Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).",
      "rdfs:label": "SuperficialAnatomy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:suitableForDiet",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.",
      "rdfs:label": "suitableForDiet",
      "schema:domainIncludes": [
        {
          "@id": "schema:Recipe"
        },
        {
          "@id": "schema:MenuItem"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:RestrictedDiet"
      }
    },
    {
      "@id": "schema:SolveMathAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.",
      "rdfs:label": "SolveMathAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2740"
      }
    },
    {
      "@id": "schema:accountablePerson",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the Person that is legally accountable for the CreativeWork.",
      "rdfs:label": "accountablePerson",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:Bacteria",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "Pathogenic bacteria that cause bacterial infection.",
      "rdfs:label": "Bacteria",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Hematologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of blood and blood producing organs.",
      "rdfs:label": "Hematologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:step",
      "@type": "rdf:Property",
      "rdfs:comment": "A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.",
      "rdfs:label": "step",
      "schema:domainIncludes": {
        "@id": "schema:HowTo"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:HowToStep"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:HowToSection"
        }
      ]
    },
    {
      "@id": "schema:Taxon",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": {
        "@id": "http://bioschemas.org"
      },
      "rdfs:comment": "A set of organisms asserted to represent a natural cohesive biological unit.",
      "rdfs:label": "Taxon",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:salaryCurrency",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.",
      "rdfs:label": "salaryCurrency",
      "schema:domainIncludes": [
        {
          "@id": "schema:EmployeeRole"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:SpokenWordAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "SpokenWordAlbum.",
      "rdfs:label": "SpokenWordAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:collection",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The collection target of the action.",
      "rdfs:label": "collection",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:UpdateAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      },
      "schema:supersededBy": {
        "@id": "schema:targetCollection"
      }
    },
    {
      "@id": "schema:GettingAccessHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content that discusses practical and policy aspects for getting access to specific kinds of healthcare (e.g. distribution mechanisms for vaccines).",
      "rdfs:label": "GettingAccessHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:itemLocation",
      "@type": "rdf:Property",
      "rdfs:comment": {
        "@language": "en",
        "@value": "Current location of the item."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "itemLocation"
      },
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:ArchiveComponent"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PostalAddress"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1758"
      }
    },
    {
      "@id": "schema:CreditCard",
      "@type": "rdfs:Class",
      "rdfs:comment": "A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#AmericanExpress\\n* http://purl.org/goodrelations/v1#DinersClub\\n* http://purl.org/goodrelations/v1#Discover\\n* http://purl.org/goodrelations/v1#JCB\\n* http://purl.org/goodrelations/v1#MasterCard\\n* http://purl.org/goodrelations/v1#VISA\n       ",
      "rdfs:label": "CreditCard",
      "rdfs:subClassOf": [
        {
          "@id": "schema:LoanOrCredit"
        },
        {
          "@id": "schema:PaymentCard"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
        }
      ]
    },
    {
      "@id": "schema:responsibilities",
      "@type": "rdf:Property",
      "rdfs:comment": "Responsibilities associated with this role or Occupation.",
      "rdfs:label": "responsibilities",
      "schema:domainIncludes": [
        {
          "@id": "schema:Occupation"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:BuddhistTemple",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Buddhist temple.",
      "rdfs:label": "BuddhistTemple",
      "rdfs:subClassOf": {
        "@id": "schema:PlaceOfWorship"
      }
    },
    {
      "@id": "schema:endTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\\n\\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.",
      "rdfs:label": "endTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:Action"
        },
        {
          "@id": "schema:InteractionCounter"
        },
        {
          "@id": "schema:FoodEstablishmentReservation"
        },
        {
          "@id": "schema:Schedule"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Time"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2493"
      }
    },
    {
      "@id": "schema:WearableMeasurementHeight",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the height, for example the heel height of a shoe",
      "rdfs:label": "WearableMeasurementHeight",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:DefinedTerm",
      "@type": "rdfs:Class",
      "rdfs:comment": "A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.",
      "rdfs:label": "DefinedTerm",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:musicalKey",
      "@type": "rdf:Property",
      "rdfs:comment": "The key, mode, or scale this composition uses.",
      "rdfs:label": "musicalKey",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:EducationalOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "An educational organization.",
      "rdfs:label": "EducationalOrganization",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:volumeNumber",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/volume"
      },
      "rdfs:comment": "Identifies the volume of publication or multi-part work; for example, \"iii\" or \"2\".",
      "rdfs:label": "volumeNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:position"
      },
      "schema:domainIncludes": {
        "@id": "schema:PublicationVolume"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:DamagedCondition",
      "@type": "schema:OfferItemCondition",
      "rdfs:comment": "Indicates that the item is damaged.",
      "rdfs:label": "DamagedCondition"
    },
    {
      "@id": "schema:arrivalTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The expected arrival time.",
      "rdfs:label": "arrivalTime",
      "schema:domainIncludes": {
        "@id": "schema:Trip"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Time"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:PerformingGroup",
      "@type": "rdfs:Class",
      "rdfs:comment": "A performance group, such as a band, an orchestra, or a circus.",
      "rdfs:label": "PerformingGroup",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:Game",
      "@type": "rdfs:Class",
      "rdfs:comment": "The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.",
      "rdfs:label": "Game",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:dateSent",
      "@type": "rdf:Property",
      "rdfs:comment": "The date/time at which the message was sent.",
      "rdfs:label": "dateSent",
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:AssessAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of forming one's opinion, reaction or sentiment.",
      "rdfs:label": "AssessAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:saturatedFatContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of saturated fat.",
      "rdfs:label": "saturatedFatContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:schoolClosuresInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about school closures.",
      "rdfs:label": "schoolClosuresInfo",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:WebContent"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:algorithm",
      "@type": "rdf:Property",
      "rdfs:comment": "The algorithm or rules to follow to compute the score.",
      "rdfs:label": "algorithm",
      "schema:domainIncludes": {
        "@id": "schema:MedicalRiskScore"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PaymentStatusType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific payment status. For example, PaymentDue, PaymentComplete, etc.",
      "rdfs:label": "PaymentStatusType",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:DiagnosticProcedure",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.",
      "rdfs:label": "DiagnosticProcedure",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ReturnFeesEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates several kinds of policies for product return fees.",
      "rdfs:label": "ReturnFeesEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:Car",
      "@type": "rdfs:Class",
      "rdfs:comment": "A car is a wheeled, self-powered motor vehicle used for transportation.",
      "rdfs:label": "Car",
      "rdfs:subClassOf": {
        "@id": "schema:Vehicle"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:copyrightNotice",
      "@type": "rdf:Property",
      "rdfs:comment": "Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.",
      "rdfs:label": "copyrightNotice",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2659"
      }
    },
    {
      "@id": "schema:branchCode",
      "@type": "rdf:Property",
      "rdfs:comment": "A short textual code (also called \"store code\") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.\\n\\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code \"3047\" is a branchCode for a particular branch.\n      ",
      "rdfs:label": "branchCode",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Pathology",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with the study of the cause, origin and nature of a disease state, including its consequences as a result of manifestation of the disease. In clinical care, the term is used to designate a branch of medicine using laboratory tests to diagnose and determine the prognostic significance of illness.",
      "rdfs:label": "Pathology",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Nonprofit501c23",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c23: Non-profit type referring to Veterans Organizations.",
      "rdfs:label": "Nonprofit501c23",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:Sculpture",
      "@type": "rdfs:Class",
      "rdfs:comment": "A piece of sculpture.",
      "rdfs:label": "Sculpture",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:season",
      "@type": "rdf:Property",
      "rdfs:comment": "A season in a media series.",
      "rdfs:label": "season",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasPart"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:containsSeason"
      }
    },
    {
      "@id": "schema:percentile25",
      "@type": "rdf:Property",
      "rdfs:comment": "The 25th percentile value.",
      "rdfs:label": "percentile25",
      "schema:domainIncludes": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:Balance",
      "@type": "schema:PhysicalActivityCategory",
      "rdfs:comment": "Physical activity that is engaged to help maintain posture and balance.",
      "rdfs:label": "Balance",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:VideoGameClip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short segment/part of a video game.",
      "rdfs:label": "VideoGameClip",
      "rdfs:subClassOf": {
        "@id": "schema:Clip"
      }
    },
    {
      "@id": "schema:DeliveryChargeSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "The price for the delivery of an offer using a particular delivery method.",
      "rdfs:label": "DeliveryChargeSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:vatID",
      "@type": "rdf:Property",
      "rdfs:comment": "The Value-added Tax ID of the organization or person.",
      "rdfs:label": "vatID",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:FoodEstablishmentReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation to dine at a food-related business.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.",
      "rdfs:label": "FoodEstablishmentReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:RadioChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.",
      "rdfs:label": "RadioChannel",
      "rdfs:subClassOf": {
        "@id": "schema:BroadcastChannel"
      }
    },
    {
      "@id": "schema:causeOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The condition, complication, symptom, sign, etc. caused.",
      "rdfs:label": "causeOf",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCause"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:ConsumeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of ingesting information/resources/food.",
      "rdfs:label": "ConsumeAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:CompleteDataFeed",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in the feed.\n\nThis is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), For example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. \"Top Twenty Records\") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.",
      "rdfs:label": "CompleteDataFeed",
      "rdfs:subClassOf": {
        "@id": "schema:DataFeed"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1397"
      }
    },
    {
      "@id": "schema:DiscussionForumPosting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A posting to a discussion forum.",
      "rdfs:label": "DiscussionForumPosting",
      "rdfs:subClassOf": {
        "@id": "schema:SocialMediaPosting"
      }
    },
    {
      "@id": "schema:PrognosisHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Typical progression and happenings of life course of the topic.",
      "rdfs:label": "PrognosisHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:representativeOfPage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether this image is representative of the content of the page.",
      "rdfs:label": "representativeOfPage",
      "schema:domainIncludes": {
        "@id": "schema:ImageObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:ratingExplanation",
      "@type": "rdf:Property",
      "rdfs:comment": "A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with \"fact check\" markup using [[ClaimReview]].",
      "rdfs:label": "ratingExplanation",
      "schema:domainIncludes": {
        "@id": "schema:Rating"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2300"
      }
    },
    {
      "@id": "schema:recourseLoan",
      "@type": "rdf:Property",
      "rdfs:comment": "The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money.",
      "rdfs:label": "recourseLoan",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:doseSchedule",
      "@type": "rdf:Property",
      "rdfs:comment": "A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.",
      "rdfs:label": "doseSchedule",
      "schema:domainIncludes": [
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:TherapeuticProcedure"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DoseSchedule"
      }
    },
    {
      "@id": "schema:MedicalProcedureType",
      "@type": "rdfs:Class",
      "rdfs:comment": "An enumeration that describes different types of medical procedures.",
      "rdfs:label": "MedicalProcedureType",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:totalTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "totalTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToDirection"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:associatedDisease",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/BioChemEntity"
      },
      "rdfs:comment": "Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an evidence supporting the association, please use PropertyValue.",
      "rdfs:label": "associatedDisease",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalCondition"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ]
    },
    {
      "@id": "schema:relevantSpecialty",
      "@type": "rdf:Property",
      "rdfs:comment": "If applicable, a medical specialty in which this entity is relevant.",
      "rdfs:label": "relevantSpecialty",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalSpecialty"
      }
    },
    {
      "@id": "schema:geoContains",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. \"a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoContains",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:recipeYield",
      "@type": "rdf:Property",
      "rdfs:comment": "The quantity produced by the recipe (for example, number of people served, number of servings, etc).",
      "rdfs:label": "recipeYield",
      "rdfs:subPropertyOf": {
        "@id": "schema:yield"
      },
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:titleEIDR",
      "@type": "rdf:Property",
      "rdfs:comment": "An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.\n\nFor example, the motion picture known as \"Ghostbusters\" has a titleEIDR of  \"10.5240/7EC7-228A-510A-053E-CBB8-J\". This title (or work) may have several variants, which EIDR calls \"edits\". See [[editEIDR]].\n\nSince schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.\n",
      "rdfs:label": "titleEIDR",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:TVEpisode"
        },
        {
          "@id": "schema:Movie"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2469"
      }
    },
    {
      "@id": "schema:securityClearanceRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of any security clearance requirements of the job.",
      "rdfs:label": "securityClearanceRequirement",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2384"
      }
    },
    {
      "@id": "schema:NGO",
      "@type": "rdfs:Class",
      "rdfs:comment": "Organization: Non-governmental Organization.",
      "rdfs:label": "NGO",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:Distance",
      "@type": "rdfs:Class",
      "rdfs:comment": "Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.",
      "rdfs:label": "Distance",
      "rdfs:subClassOf": {
        "@id": "schema:Quantity"
      }
    },
    {
      "@id": "schema:LivingWithHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about coping or life related to the topic.",
      "rdfs:label": "LivingWithHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:UKNonprofitType",
      "@type": "rdfs:Class",
      "rdfs:comment": "UKNonprofitType: Non-profit organization type originating from the United Kingdom.",
      "rdfs:label": "UKNonprofitType",
      "rdfs:subClassOf": {
        "@id": "schema:NonprofitType"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:PharmacySpecialty",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The practice or art and science of preparing and dispensing drugs and medicines.",
      "rdfs:label": "PharmacySpecialty",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:diagram",
      "@type": "rdf:Property",
      "rdfs:comment": "An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures.",
      "rdfs:label": "diagram",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ImageObject"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryA3Plus",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class A+++ as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryA3Plus",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:OrderProblem",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing that there is a problem with the order.",
      "rdfs:label": "OrderProblem"
    },
    {
      "@id": "schema:codeSampleType",
      "@type": "rdf:Property",
      "rdfs:comment": "What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.",
      "rdfs:label": "codeSampleType",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Airline",
      "@type": "rdfs:Class",
      "rdfs:comment": "An organization that provides flights for passengers.",
      "rdfs:label": "Airline",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:OfflineEventAttendanceMode",
      "@type": "schema:EventAttendanceModeEnumeration",
      "rdfs:comment": "OfflineEventAttendanceMode - an event that is primarily conducted offline. ",
      "rdfs:label": "OfflineEventAttendanceMode",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:MedicalConditionStage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A stage of a medical condition, such as 'Stage IIIa'.",
      "rdfs:label": "MedicalConditionStage",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIntangible"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:LimitedByGuaranteeCharity",
      "@type": "schema:UKNonprofitType",
      "rdfs:comment": "LimitedByGuaranteeCharity: Non-profit type referring to a charitable company that is limited by guarantee (UK).",
      "rdfs:label": "LimitedByGuaranteeCharity",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:maximumEnrollment",
      "@type": "rdf:Property",
      "rdfs:comment": "The maximum number of students who may be enrolled in the program.",
      "rdfs:label": "maximumEnrollment",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:RisksOrComplicationsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about the risk factors and possible complications that may follow a topic.",
      "rdfs:label": "RisksOrComplicationsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:tourBookingPage",
      "@type": "rdf:Property",
      "rdfs:comment": "A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.",
      "rdfs:label": "tourBookingPage",
      "schema:domainIncludes": [
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:ApartmentComplex"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:CatholicChurch",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Catholic church.",
      "rdfs:label": "CatholicChurch",
      "rdfs:subClassOf": {
        "@id": "schema:Church"
      }
    },
    {
      "@id": "schema:broadcastDisplayName",
      "@type": "rdf:Property",
      "rdfs:comment": "The name displayed in the channel guide. For many US affiliates, it is the network name.",
      "rdfs:label": "broadcastDisplayName",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:estimatedFlightDuration",
      "@type": "rdf:Property",
      "rdfs:comment": "The estimated time the flight will take.",
      "rdfs:label": "estimatedFlightDuration",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Duration"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:structuralClass",
      "@type": "rdf:Property",
      "rdfs:comment": "The name given to how bone physically connects to each other.",
      "rdfs:label": "structuralClass",
      "schema:domainIncludes": {
        "@id": "schema:Joint"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:GeospatialGeometry",
      "@type": "rdfs:Class",
      "rdfs:comment": "(Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.",
      "rdfs:label": "GeospatialGeometry",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1375"
      }
    },
    {
      "@id": "schema:typeOfGood",
      "@type": "rdf:Property",
      "rdfs:comment": "The product that this structured value is referring to.",
      "rdfs:label": "typeOfGood",
      "schema:domainIncludes": [
        {
          "@id": "schema:TypeAndQuantityNode"
        },
        {
          "@id": "schema:OwnershipInfo"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:providesService",
      "@type": "rdf:Property",
      "rdfs:comment": "The service provided by this channel.",
      "rdfs:label": "providesService",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:molecularWeight",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "This is the molecular weight of the entity being described, not of the parent. Units should be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.",
      "rdfs:label": "molecularWeight",
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:teaches",
      "@type": "rdf:Property",
      "rdfs:comment": "The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.",
      "rdfs:label": "teaches",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:EducationEvent"
        },
        {
          "@id": "schema:LearningResource"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2427"
      }
    },
    {
      "@id": "schema:Muscle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.",
      "rdfs:label": "Muscle",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:OpinionNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of a news publication. ",
      "rdfs:label": "OpinionNewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:NewsArticle"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:orderQuantity",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of the item ordered. If the property is not set, assume the quantity is one.",
      "rdfs:label": "orderQuantity",
      "schema:domainIncludes": {
        "@id": "schema:OrderItem"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:StatusEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Lists or enumerations dealing with status types.",
      "rdfs:label": "StatusEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2604"
      }
    },
    {
      "@id": "schema:entertainmentBusiness",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The entertainment business where the action occurred.",
      "rdfs:label": "entertainmentBusiness",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:PerformAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:HowToTool",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tool used (but not consumed) when performing instructions for how to achieve a result.",
      "rdfs:label": "HowToTool",
      "rdfs:subClassOf": {
        "@id": "schema:HowToItem"
      }
    },
    {
      "@id": "schema:BodyMeasurementTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.",
      "rdfs:label": "BodyMeasurementTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:MeasurementTypeEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:IceCreamShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "An ice cream shop.",
      "rdfs:label": "IceCreamShop",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:BusOrCoach",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel.",
      "rdfs:label": "BusOrCoach",
      "rdfs:subClassOf": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:endorsers",
      "@type": "rdf:Property",
      "rdfs:comment": "People or organizations that endorse the plan.",
      "rdfs:label": "endorsers",
      "schema:domainIncludes": {
        "@id": "schema:Diet"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:DepositAccount",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.",
      "rdfs:label": "DepositAccount",
      "rdfs:subClassOf": [
        {
          "@id": "schema:InvestmentOrDeposit"
        },
        {
          "@id": "schema:BankAccount"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:EditedOrCroppedContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'edited or cropped content' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'edited or cropped content': The video has been edited or rearranged. This category applies to time edits, including editing multiple videos together to alter the story being told or editing out large portions from a video.\n\nFor an [[ImageObject]] to be 'edited or cropped content': Presenting a part of an image from a larger whole to mislead the viewer.\n\nFor an [[ImageObject]] with embedded text to be 'edited or cropped content': Presenting a part of an image from a larger whole to mislead the viewer.\n\nFor an [[AudioObject]] to be 'edited or cropped content': The audio has been edited or rearranged. This category applies to time edits, including editing multiple audio clips together to alter the story being told or editing out large portions from the recording.\n",
      "rdfs:label": "EditedOrCroppedContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:ParkingFacility",
      "@type": "rdfs:Class",
      "rdfs:comment": "A parking lot or other parking facility.",
      "rdfs:label": "ParkingFacility",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:returnLabelSource",
      "@type": "rdf:Property",
      "rdfs:comment": "The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for any reason.",
      "rdfs:label": "returnLabelSource",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnLabelSourceEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:Recruiting",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Recruiting participants.",
      "rdfs:label": "Recruiting",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Thing",
      "@type": "rdfs:Class",
      "rdfs:comment": "The most generic type of item.",
      "rdfs:label": "Thing"
    },
    {
      "@id": "schema:HowToTip",
      "@type": "rdfs:Class",
      "rdfs:comment": "An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).",
      "rdfs:label": "HowToTip",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:ListItem"
        }
      ]
    },
    {
      "@id": "schema:datePosted",
      "@type": "rdf:Property",
      "rdfs:comment": "Publication date of an online listing.",
      "rdfs:label": "datePosted",
      "schema:domainIncludes": [
        {
          "@id": "schema:SpecialAnnouncement"
        },
        {
          "@id": "schema:CDCPMDRecord"
        },
        {
          "@id": "schema:RealEstateListing"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
        }
      ]
    },
    {
      "@id": "schema:Event",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.org/dc/dcmitype/Event"
      },
      "rdfs:comment": "An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.",
      "rdfs:label": "Event",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:geoCoveredBy",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoCoveredBy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ]
    },
    {
      "@id": "schema:photos",
      "@type": "rdf:Property",
      "rdfs:comment": "Photographs of this place.",
      "rdfs:label": "photos",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ImageObject"
        },
        {
          "@id": "schema:Photograph"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:photo"
      }
    },
    {
      "@id": "schema:VideoGame",
      "@type": "rdfs:Class",
      "rdfs:comment": "A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.",
      "rdfs:label": "VideoGame",
      "rdfs:subClassOf": [
        {
          "@id": "schema:SoftwareApplication"
        },
        {
          "@id": "schema:Game"
        }
      ]
    },
    {
      "@id": "schema:RentAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.",
      "rdfs:label": "RentAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:eventStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.",
      "rdfs:label": "eventStatus",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EventStatusType"
      }
    },
    {
      "@id": "schema:inAlbum",
      "@type": "rdf:Property",
      "rdfs:comment": "The album to which this recording belongs.",
      "rdfs:label": "inAlbum",
      "schema:domainIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbum"
      }
    },
    {
      "@id": "schema:DJMixAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "DJMixAlbum.",
      "rdfs:label": "DJMixAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:passengerSequenceNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The passenger's sequence number as assigned by the airline.",
      "rdfs:label": "passengerSequenceNumber",
      "schema:domainIncludes": {
        "@id": "schema:FlightReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Nonprofit501n",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501n: Non-profit type referring to Charitable Risk Pools.",
      "rdfs:label": "Nonprofit501n",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:qualifications",
      "@type": "rdf:Property",
      "rdfs:comment": "Specific qualifications required for this role or Occupation.",
      "rdfs:label": "qualifications",
      "schema:domainIncludes": [
        {
          "@id": "schema:Occupation"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:EducationalOccupationalCredential"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        }
      ]
    },
    {
      "@id": "schema:AmusementPark",
      "@type": "rdfs:Class",
      "rdfs:comment": "An amusement park.",
      "rdfs:label": "AmusementPark",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:Nonprofit501c19",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c19: Non-profit type referring to Post or Organization of Past or Present Members of the Armed Forces.",
      "rdfs:label": "Nonprofit501c19",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:affiliation",
      "@type": "rdf:Property",
      "rdfs:comment": "An organization that this person is affiliated with. For example, a school/university, a club, or a team.",
      "rdfs:label": "affiliation",
      "rdfs:subPropertyOf": {
        "@id": "schema:memberOf"
      },
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:speed",
      "@type": "rdf:Property",
      "rdfs:comment": "The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by [[maxValue]] should be the maximum speed achievable under regular conditions.\\n\\nTypical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\\n\\n*Note 1: Use [[minValue]] and [[maxValue]] to indicate the range. Typically, the minimal value is zero.\\n* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the [[valueReference]] property.",
      "rdfs:label": "speed",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:earlyPrepaymentPenalty",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount to be paid as a penalty in the event of early payment of the loan.",
      "rdfs:label": "earlyPrepaymentPenalty",
      "schema:domainIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:exampleOfWork",
      "@type": "rdf:Property",
      "rdfs:comment": "A creative work that this work is an example/instance/realization/derivation of.",
      "rdfs:label": "exampleOfWork",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:workExample"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:CoverArt",
      "@type": "rdfs:Class",
      "rdfs:comment": "The artwork on the outer surface of a CreativeWork.",
      "rdfs:label": "CoverArt",
      "rdfs:subClassOf": {
        "@id": "schema:VisualArtwork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:line",
      "@type": "rdf:Property",
      "rdfs:comment": "A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.",
      "rdfs:label": "line",
      "schema:domainIncludes": {
        "@id": "schema:GeoShape"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:OriginalMediaContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'as original media content' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'original': No evidence the footage has been misleadingly altered or manipulated, though it may contain false or misleading claims.\n\nFor an [[ImageObject]] to be 'original': No evidence the image has been misleadingly altered or manipulated, though it may still contain false or misleading claims.\n\nFor an [[ImageObject]] with embedded text to be 'original': No evidence the image has been misleadingly altered or manipulated, though it may still contain false or misleading claims.\n\nFor an [[AudioObject]] to be 'original': No evidence the audio has been misleadingly altered or manipulated, though it may contain false or misleading claims.\n",
      "rdfs:label": "OriginalMediaContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:AudiobookFormat",
      "@type": "schema:BookFormatType",
      "rdfs:comment": "Book format: Audiobook. This is an enumerated value for use with the bookFormat property. There is also a type 'Audiobook' in the bib extension which includes Audiobook specific properties.",
      "rdfs:label": "AudiobookFormat"
    },
    {
      "@id": "schema:distribution",
      "@type": "rdf:Property",
      "rdfs:comment": "A downloadable form of this dataset, at a specific location, in a specific format.",
      "rdfs:label": "distribution",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataDownload"
      }
    },
    {
      "@id": "schema:startOffset",
      "@type": "rdf:Property",
      "rdfs:comment": "The start time of the clip expressed as the number of seconds from the beginning of the work.",
      "rdfs:label": "startOffset",
      "schema:domainIncludes": [
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:SeekToAction"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:HyperTocEntry"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2021"
      }
    },
    {
      "@id": "schema:sha256",
      "@type": "rdf:Property",
      "rdfs:comment": "The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'",
      "rdfs:label": "sha256",
      "rdfs:subPropertyOf": {
        "@id": "schema:description"
      },
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:carbohydrateContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of carbohydrates.",
      "rdfs:label": "carbohydrateContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:PatientExperienceHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about the real life experience of patients or people that have lived a similar experience about the topic. May be forums, topics, Q-and-A and related material.",
      "rdfs:label": "PatientExperienceHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:CivicStructure",
      "@type": "rdfs:Class",
      "rdfs:comment": "A public structure, such as a town hall or concert hall.",
      "rdfs:label": "CivicStructure",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:serviceSmsNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The number to access the service by text message.",
      "rdfs:label": "serviceSmsNumber",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ContactPoint"
      }
    },
    {
      "@id": "schema:maximumPhysicalAttendeeCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]). ",
      "rdfs:label": "maximumPhysicalAttendeeCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:emissionsCO2",
      "@type": "rdf:Property",
      "rdfs:comment": "The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put \"g/km\" into the unitText property of that value, since there is no UN/CEFACT Common Code for \"g/km\".",
      "rdfs:label": "emissionsCO2",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:dataset",
      "@type": "rdf:Property",
      "rdfs:comment": "A dataset contained in this catalog.",
      "rdfs:label": "dataset",
      "schema:domainIncludes": {
        "@id": "schema:DataCatalog"
      },
      "schema:inverseOf": {
        "@id": "schema:includedInDataCatalog"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Dataset"
      }
    },
    {
      "@id": "schema:maxPrice",
      "@type": "rdf:Property",
      "rdfs:comment": "The highest price if the price is a range.",
      "rdfs:label": "maxPrice",
      "schema:domainIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:preparation",
      "@type": "rdf:Property",
      "rdfs:comment": "Typical preparation that a patient must undergo before having the procedure performed.",
      "rdfs:label": "preparation",
      "schema:domainIncludes": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalEntity"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:proteinContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of protein.",
      "rdfs:label": "proteinContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:warranty",
      "@type": "rdf:Property",
      "rdfs:comment": "The warranty promise(s) included in the offer.",
      "rdfs:label": "warranty",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:WarrantyPromise"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:performTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "performTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToDirection"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:documentation",
      "@type": "rdf:Property",
      "rdfs:comment": "Further documentation describing the Web API in more detail.",
      "rdfs:label": "documentation",
      "schema:domainIncludes": {
        "@id": "schema:WebAPI"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1423"
      }
    },
    {
      "@id": "schema:TVSeason",
      "@type": "rdfs:Class",
      "rdfs:comment": "Season dedicated to TV broadcast and associated online delivery.",
      "rdfs:label": "TVSeason",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:recordedAt",
      "@type": "rdf:Property",
      "rdfs:comment": "The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.",
      "rdfs:label": "recordedAt",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:recordedIn"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:lowPrice",
      "@type": "rdf:Property",
      "rdfs:comment": "The lowest price of all offers available.\\n\\nUsage guidelines:\\n\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "lowPrice",
      "schema:domainIncludes": {
        "@id": "schema:AggregateOffer"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:beneficiaryBank",
      "@type": "rdf:Property",
      "rdfs:comment": "A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s bank account or releasing funds for the beneficiary.",
      "rdfs:label": "beneficiaryBank",
      "schema:domainIncludes": {
        "@id": "schema:MoneyTransfer"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:BankOrCreditUnion"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:geoCrosses",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: \"a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoCrosses",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:remainingAttendeeCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of attendee places for an event that remain unallocated.",
      "rdfs:label": "remainingAttendeeCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:jobStartDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.",
      "rdfs:label": "jobStartDate",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2244"
      }
    },
    {
      "@id": "schema:feesAndCommissionsSpecification",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.",
      "rdfs:label": "feesAndCommissionsSpecification",
      "schema:domainIncludes": [
        {
          "@id": "schema:FinancialProduct"
        },
        {
          "@id": "schema:FinancialService"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:PrescriptionOnly",
      "@type": "schema:DrugPrescriptionStatus",
      "rdfs:comment": "Available by prescription only.",
      "rdfs:label": "PrescriptionOnly",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:conditionsOfAccess",
      "@type": "rdf:Property",
      "rdfs:comment": "Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.\\n\\nFor example \"Available by appointment from the Reading Room\" or \"Accessible only from logged-in accounts \". ",
      "rdfs:label": "conditionsOfAccess",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2173"
      }
    },
    {
      "@id": "schema:distinguishingSign",
      "@type": "rdf:Property",
      "rdfs:comment": "One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis.",
      "rdfs:label": "distinguishingSign",
      "schema:domainIncludes": {
        "@id": "schema:DDxElement"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalSignOrSymptom"
      }
    },
    {
      "@id": "schema:numChildren",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of children staying in the unit.",
      "rdfs:label": "numChildren",
      "schema:domainIncludes": {
        "@id": "schema:LodgingReservation"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:BusTrip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A trip on a commercial bus line.",
      "rdfs:label": "BusTrip",
      "rdfs:subClassOf": {
        "@id": "schema:Trip"
      }
    },
    {
      "@id": "schema:Time",
      "@type": [
        "schema:DataType",
        "rdfs:Class"
      ],
      "rdfs:comment": "A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).",
      "rdfs:label": "Time"
    },
    {
      "@id": "schema:iataCode",
      "@type": "rdf:Property",
      "rdfs:comment": "IATA identifier for an airline or airport.",
      "rdfs:label": "iataCode",
      "schema:domainIncludes": [
        {
          "@id": "schema:Airport"
        },
        {
          "@id": "schema:Airline"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:opponent",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The opponent on this action.",
      "rdfs:label": "opponent",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:BedDetails",
      "@type": "rdfs:Class",
      "rdfs:comment": "An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also [[BedType]] (under development).",
      "rdfs:label": "BedDetails",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:landlord",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The owner of the real estate property.",
      "rdfs:label": "landlord",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:RentAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:Suite",
      "@type": "rdfs:Class",
      "rdfs:comment": "A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Suite_(hotel)\">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Suite",
      "rdfs:subClassOf": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:WearableSizeGroupGirls",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Girls\" for wearables.",
      "rdfs:label": "WearableSizeGroupGirls",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:healthPlanCopayOption",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the copay is before or after deductible, etc. TODO: Is this a closed set?",
      "rdfs:label": "healthPlanCopayOption",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanCostSharingSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:recognizingAuthority",
      "@type": "rdf:Property",
      "rdfs:comment": "If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.",
      "rdfs:label": "recognizingAuthority",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:Subscription",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the subscription pricing component of the total price for an offered product.",
      "rdfs:label": "Subscription",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:isResizable",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality.",
      "rdfs:label": "isResizable",
      "schema:domainIncludes": {
        "@id": "schema:3DModel"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2394"
      }
    },
    {
      "@id": "schema:CategoryCodeSet",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of Category Code values.",
      "rdfs:label": "CategoryCodeSet",
      "rdfs:subClassOf": {
        "@id": "schema:DefinedTermSet"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:workExample",
      "@type": "rdf:Property",
      "rdfs:comment": "Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.",
      "rdfs:label": "workExample",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:exampleOfWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:size",
      "@type": "rdf:Property",
      "rdfs:comment": "A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable. ",
      "rdfs:label": "size",
      "schema:domainIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:SizeSpecification"
        },
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:Lung",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Lung and respiratory system clinical examination.",
      "rdfs:label": "Lung",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:attendee",
      "@type": "rdf:Property",
      "rdfs:comment": "A person or organization attending the event.",
      "rdfs:label": "attendee",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:accessibilityHazard",
      "@type": "rdf:Property",
      "rdfs:comment": "A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 ([WebSchemas wiki lists possible values](http://www.w3.org/wiki/WebSchemas/Accessibility)).",
      "rdfs:label": "accessibilityHazard",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:musicArrangement",
      "@type": "rdf:Property",
      "rdfs:comment": "An arrangement derived from the composition.",
      "rdfs:label": "musicArrangement",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:leiCode",
      "@type": "rdf:Property",
      "rdfs:comment": "An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.",
      "rdfs:label": "leiCode",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#GLEIF"
        }
      ]
    },
    {
      "@id": "schema:returnPolicySeasonalOverride",
      "@type": "rdf:Property",
      "rdfs:comment": "Seasonal override of a return policy.",
      "rdfs:label": "returnPolicySeasonalOverride",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MerchantReturnPolicySeasonalOverride"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:Nonprofit501c22",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c22: Non-profit type referring to Withdrawal Liability Payment Funds.",
      "rdfs:label": "Nonprofit501c22",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:includedInDataCatalog",
      "@type": "rdf:Property",
      "rdfs:comment": "A data catalog which contains this dataset.",
      "rdfs:label": "includedInDataCatalog",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:inverseOf": {
        "@id": "schema:dataset"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataCatalog"
      }
    },
    {
      "@id": "schema:copyrightYear",
      "@type": "rdf:Property",
      "rdfs:comment": "The year during which the claimed copyright for the CreativeWork was first asserted.",
      "rdfs:label": "copyrightYear",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:ProfessionalService",
      "@type": "rdfs:Class",
      "rdfs:comment": "Original definition: \"provider of professional services.\"\\n\\nThe general [[ProfessionalService]] type for local businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were: [[Dentist]],\n        [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]],\n        [[HousePainter]], [[Locksmith]], [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].",
      "rdfs:label": "ProfessionalService",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:lender",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The person that lends the object being borrowed.",
      "rdfs:label": "lender",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:BorrowAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:inverseOf",
      "@type": "rdf:Property",
      "rdfs:comment": "Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.",
      "rdfs:label": "inverseOf",
      "schema:domainIncludes": {
        "@id": "schema:Property"
      },
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Property"
      }
    },
    {
      "@id": "schema:WebContent",
      "@type": "rdfs:Class",
      "rdfs:comment": "WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).",
      "rdfs:label": "WebContent",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2358"
      }
    },
    {
      "@id": "schema:VideoGallery",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Video gallery page.",
      "rdfs:label": "VideoGallery",
      "rdfs:subClassOf": {
        "@id": "schema:MediaGallery"
      }
    },
    {
      "@id": "schema:MerchantReturnFiniteReturnWindow",
      "@type": "schema:MerchantReturnEnumeration",
      "rdfs:comment": "Specifies that there is a finite window for product returns.",
      "rdfs:label": "MerchantReturnFiniteReturnWindow",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:termDuration",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.",
      "rdfs:label": "termDuration",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:DrawAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.",
      "rdfs:label": "DrawAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:refundType",
      "@type": "rdf:Property",
      "rdfs:comment": "A refund type, from an enumerated list.",
      "rdfs:label": "refundType",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:RefundTypeEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:GroceryStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A grocery store.",
      "rdfs:label": "GroceryStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:TVClip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short TV program or a segment/part of a TV program.",
      "rdfs:label": "TVClip",
      "rdfs:subClassOf": {
        "@id": "schema:Clip"
      }
    },
    {
      "@id": "schema:normalRange",
      "@type": "rdf:Property",
      "rdfs:comment": "Range of acceptable values for a typical patient, when applicable.",
      "rdfs:label": "normalRange",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:MedicalEnumeration"
        }
      ]
    },
    {
      "@id": "schema:TouristAttraction",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tourist attraction.  In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]].  This Type can be used on its own to describe a general [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.  (See examples below)",
      "rdfs:label": "TouristAttraction",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        }
      ]
    },
    {
      "@id": "schema:MediaSubscription",
      "@type": "rdfs:Class",
      "rdfs:comment": "A subscription which allows a user to access media including audio, video, books, etc.",
      "rdfs:label": "MediaSubscription",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:agent",
      "@type": "rdf:Property",
      "rdfs:comment": "The direct performer or driver of the action (animate or inanimate). e.g. *John* wrote a book.",
      "rdfs:label": "agent",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:recordedAs",
      "@type": "rdf:Property",
      "rdfs:comment": "An audio recording of the work.",
      "rdfs:label": "recordedAs",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:inverseOf": {
        "@id": "schema:recordingOf"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:LiteraryEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Literary event.",
      "rdfs:label": "LiteraryEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:Photograph",
      "@type": "rdfs:Class",
      "rdfs:comment": "A photograph.",
      "rdfs:label": "Photograph",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:jurisdiction",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.",
      "rdfs:label": "jurisdiction",
      "schema:domainIncludes": [
        {
          "@id": "schema:Legislation"
        },
        {
          "@id": "schema:GovernmentService"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AdministrativeArea"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:OrganizationRole",
      "@type": "rdfs:Class",
      "rdfs:comment": "A subclass of Role used to describe roles within organizations.",
      "rdfs:label": "OrganizationRole",
      "rdfs:subClassOf": {
        "@id": "schema:Role"
      }
    },
    {
      "@id": "schema:ReservationConfirmed",
      "@type": "schema:ReservationStatusType",
      "rdfs:comment": "The status of a confirmed reservation.",
      "rdfs:label": "ReservationConfirmed"
    },
    {
      "@id": "schema:Hospital",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hospital.",
      "rdfs:label": "Hospital",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:MedicalOrganization"
        },
        {
          "@id": "schema:EmergencyService"
        }
      ]
    },
    {
      "@id": "schema:CDFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "CDFormat.",
      "rdfs:label": "CDFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:AggregateRating",
      "@type": "rdfs:Class",
      "rdfs:comment": "The average rating based on multiple ratings or reviews.",
      "rdfs:label": "AggregateRating",
      "rdfs:subClassOf": {
        "@id": "schema:Rating"
      }
    },
    {
      "@id": "schema:breadcrumb",
      "@type": "rdf:Property",
      "rdfs:comment": "A set of links that can help a user understand and navigate a website hierarchy.",
      "rdfs:label": "breadcrumb",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:BreadcrumbList"
        }
      ]
    },
    {
      "@id": "schema:maximumIntake",
      "@type": "rdf:Property",
      "rdfs:comment": "Recommended intake of this supplement for a given population as defined by a specific recommending authority.",
      "rdfs:label": "maximumIntake",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:DrugStrength"
        },
        {
          "@id": "schema:Substance"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MaximumDoseSchedule"
      }
    },
    {
      "@id": "schema:WearAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of dressing oneself in clothing.",
      "rdfs:label": "WearAction",
      "rdfs:subClassOf": {
        "@id": "schema:UseAction"
      }
    },
    {
      "@id": "schema:exifData",
      "@type": "rdf:Property",
      "rdfs:comment": "exif data for this object.",
      "rdfs:label": "exifData",
      "schema:domainIncludes": {
        "@id": "schema:ImageObject"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:isAvailableGenerically",
      "@type": "rdf:Property",
      "rdfs:comment": "True if the drug is available in a generic form (regardless of name).",
      "rdfs:label": "isAvailableGenerically",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:Rheumatologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that deals with the study and treatment of rheumatic, autoimmune or joint diseases.",
      "rdfs:label": "Rheumatologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:WPSideBar",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sidebar section of the page.",
      "rdfs:label": "WPSideBar",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:OccupationalTherapy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.",
      "rdfs:label": "OccupationalTherapy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTherapy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MusicAlbumProductionType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Classification of the album by it's type of content: soundtrack, live album, studio album, etc.",
      "rdfs:label": "MusicAlbumProductionType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:playMode",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.",
      "rdfs:label": "playMode",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:GamePlayMode"
      }
    },
    {
      "@id": "schema:suggestedMeasurement",
      "@type": "rdf:Property",
      "rdfs:comment": "A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.",
      "rdfs:label": "suggestedMeasurement",
      "schema:domainIncludes": [
        {
          "@id": "schema:PeopleAudience"
        },
        {
          "@id": "schema:SizeSpecification"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:BefriendAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\\n\\nRelated actions:\\n\\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.",
      "rdfs:label": "BefriendAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:answerCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of answers this question has received.",
      "rdfs:label": "answerCount",
      "schema:domainIncludes": {
        "@id": "schema:Question"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:ItemListOrderDescending",
      "@type": "schema:ItemListOrderType",
      "rdfs:comment": "An ItemList ordered with higher values listed first.",
      "rdfs:label": "ItemListOrderDescending"
    },
    {
      "@id": "schema:encodings",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object that encodes this CreativeWork.",
      "rdfs:label": "encodings",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:supersededBy": {
        "@id": "schema:encoding"
      }
    },
    {
      "@id": "schema:PostOffice",
      "@type": "rdfs:Class",
      "rdfs:comment": "A post office.",
      "rdfs:label": "PostOffice",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentOffice"
      }
    },
    {
      "@id": "schema:orderStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The current status of the order.",
      "rdfs:label": "orderStatus",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OrderStatus"
      }
    },
    {
      "@id": "schema:Winery",
      "@type": "rdfs:Class",
      "rdfs:comment": "A winery.",
      "rdfs:label": "Winery",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:FilmAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of capturing sound and moving images on film, video, or digitally.",
      "rdfs:label": "FilmAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:target",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a target EntryPoint for an Action.",
      "rdfs:label": "target",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EntryPoint"
      }
    },
    {
      "@id": "schema:cvdNumICUBedsOcc",
      "@type": "rdf:Property",
      "rdfs:comment": "numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.",
      "rdfs:label": "cvdNumICUBedsOcc",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:RsvpResponseType",
      "@type": "rdfs:Class",
      "rdfs:comment": "RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.",
      "rdfs:label": "RsvpResponseType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:bodyType",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).",
      "rdfs:label": "bodyType",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:OrderPickupAvailable",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing availability of an order for pickup.",
      "rdfs:label": "OrderPickupAvailable"
    },
    {
      "@id": "schema:MobilePhoneStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A store that sells mobile phones and related accessories.",
      "rdfs:label": "MobilePhoneStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:Continent",
      "@type": "rdfs:Class",
      "rdfs:comment": "One of the continents (for example, Europe or Africa).",
      "rdfs:label": "Continent",
      "rdfs:subClassOf": {
        "@id": "schema:Landform"
      }
    },
    {
      "@id": "schema:MedicalBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include differents business run by health professionals.",
      "rdfs:label": "MedicalBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:VitalSign",
      "@type": "rdfs:Class",
      "rdfs:comment": "Vital signs are measures of various physiological functions in order to assess the most basic body functions.",
      "rdfs:label": "VitalSign",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalSign"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:billingIncrement",
      "@type": "rdf:Property",
      "rdfs:comment": "This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.",
      "rdfs:label": "billingIncrement",
      "schema:domainIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:measuredProperty",
      "@type": "rdf:Property",
      "rdfs:comment": "The measuredProperty of an [[Observation]], either a schema.org property, a property from other RDF-compatible systems e.g. W3C RDF Data Cube, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).",
      "rdfs:label": "measuredProperty",
      "schema:domainIncludes": {
        "@id": "schema:Observation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Property"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:courseCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).",
      "rdfs:label": "courseCode",
      "schema:domainIncludes": {
        "@id": "schema:Course"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:appliesToDeliveryMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The delivery method(s) to which the delivery charge or payment charge specification applies.",
      "rdfs:label": "appliesToDeliveryMethod",
      "schema:domainIncludes": [
        {
          "@id": "schema:PaymentChargeSpecification"
        },
        {
          "@id": "schema:DeliveryChargeSpecification"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DeliveryMethod"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:cvdNumVent",
      "@type": "rdf:Property",
      "rdfs:comment": "numvent - MECHANICAL VENTILATORS: Total number of ventilators available.",
      "rdfs:label": "cvdNumVent",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:UserTweets",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserTweets",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:numberOfAccommodationUnits",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].",
      "rdfs:label": "numberOfAccommodationUnits",
      "schema:domainIncludes": [
        {
          "@id": "schema:ApartmentComplex"
        },
        {
          "@id": "schema:FloorPlan"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:downloadUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "If the file can be downloaded, URL to download the binary.",
      "rdfs:label": "downloadUrl",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:Observation",
      "@type": "rdfs:Class",
      "rdfs:comment": "Instances of the class [[Observation]] are used to specify observations about an entity (which may or may not be an instance of a [[StatisticalPopulation]]), at a particular time. The principal properties of an [[Observation]] are [[observedNode]], [[measuredProperty]], [[measuredValue]] (or [[median]], etc.) and [[observationDate]] ([[measuredProperty]] properties can, but need not always, be W3C RDF Data Cube \"measure properties\", as in the [lifeExpectancy example](https://www.w3.org/TR/vocab-data-cube/#dsd-example)).\nSee also [[StatisticalPopulation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.\n  ",
      "rdfs:label": "Observation",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:musicReleaseFormat",
      "@type": "rdf:Property",
      "rdfs:comment": "Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).",
      "rdfs:label": "musicReleaseFormat",
      "schema:domainIncludes": {
        "@id": "schema:MusicRelease"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicReleaseFormatType"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:SubwayStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A subway station.",
      "rdfs:label": "SubwayStation",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:childMaxAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Maximal age of the child.",
      "rdfs:label": "childMaxAge",
      "schema:domainIncludes": {
        "@id": "schema:ParentAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:children",
      "@type": "rdf:Property",
      "rdfs:comment": "A child of the person.",
      "rdfs:label": "children",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:RadioBroadcastService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A delivery service through which radio content is provided via broadcast over the air or online.",
      "rdfs:label": "RadioBroadcastService",
      "rdfs:subClassOf": {
        "@id": "schema:BroadcastService"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2109"
      }
    },
    {
      "@id": "schema:spouse",
      "@type": "rdf:Property",
      "rdfs:comment": "The person's spouse.",
      "rdfs:label": "spouse",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:creator",
      "@type": "rdf:Property",
      "rdfs:comment": "The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.",
      "rdfs:label": "creator",
      "schema:domainIncludes": [
        {
          "@id": "schema:UserComments"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:checkinTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The earliest someone may check into a lodging establishment.",
      "rdfs:label": "checkinTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:LodgingReservation"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Time"
        }
      ]
    },
    {
      "@id": "schema:Legislation",
      "@type": "rdfs:Class",
      "http://www.w3.org/2004/02/skos/core#closeMatch": [
        {
          "@id": "http://data.europa.eu/eli/ontology#LegalResource"
        },
        {
          "@id": "http://data.europa.eu/eli/ontology#LegalExpression"
        }
      ],
      "rdfs:comment": "A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).",
      "rdfs:label": "Legislation",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:publishedBy",
      "@type": "rdf:Property",
      "rdfs:comment": "An agent associated with the publication event.",
      "rdfs:label": "publishedBy",
      "schema:domainIncludes": {
        "@id": "schema:PublicationEvent"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:freeShippingThreshold",
      "@type": "rdf:Property",
      "rdfs:comment": "A monetary value above which (or equal to) the shipping rate becomes free. Intended to be used via an [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].",
      "rdfs:label": "freeShippingThreshold",
      "schema:domainIncludes": {
        "@id": "schema:ShippingRateSettings"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:DeliveryChargeSpecification"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:expectsAcceptanceOf",
      "@type": "rdf:Property",
      "rdfs:comment": "An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.",
      "rdfs:label": "expectsAcceptanceOf",
      "schema:domainIncludes": [
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:ConsumeAction"
        },
        {
          "@id": "schema:MediaSubscription"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Offer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:Episode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A media episode (e.g. TV, radio, video game) which can be part of a series or season.",
      "rdfs:label": "Episode",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:GroupBoardingPolicy",
      "@type": "schema:BoardingPolicyType",
      "rdfs:comment": "The airline boards by groups based on check-in time, priority, etc.",
      "rdfs:label": "GroupBoardingPolicy"
    },
    {
      "@id": "schema:DrugClass",
      "@type": "rdfs:Class",
      "rdfs:comment": "A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.",
      "rdfs:label": "DrugClass",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Motorcycle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.",
      "rdfs:label": "Motorcycle",
      "rdfs:subClassOf": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:PhysicalExam",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of physical examination of a patient performed by a physician. ",
      "rdfs:label": "PhysicalExam",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalEnumeration"
        },
        {
          "@id": "schema:MedicalProcedure"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:deliveryLeadTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.",
      "rdfs:label": "deliveryLeadTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:prescriptionStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the status of drug prescription eg. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc.",
      "rdfs:label": "prescriptionStatus",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DrugPrescriptionStatus"
        }
      ]
    },
    {
      "@id": "schema:servicePhone",
      "@type": "rdf:Property",
      "rdfs:comment": "The phone number to use to access the service.",
      "rdfs:label": "servicePhone",
      "schema:domainIncludes": {
        "@id": "schema:ServiceChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ContactPoint"
      }
    },
    {
      "@id": "schema:interestRate",
      "@type": "rdf:Property",
      "rdfs:comment": "The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.",
      "rdfs:label": "interestRate",
      "schema:domainIncludes": {
        "@id": "schema:FinancialProduct"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:unitText",
      "@type": "rdf:Property",
      "rdfs:comment": "A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for\n<a href='unitCode'>unitCode</a>.",
      "rdfs:label": "unitText",
      "schema:domainIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:TypeAndQuantityNode"
        },
        {
          "@id": "schema:UnitPriceSpecification"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:endDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
      "rdfs:label": "endDate",
      "schema:domainIncludes": [
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:MerchantReturnPolicySeasonalOverride"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Role"
        },
        {
          "@id": "schema:DatedMoneySpecification"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:Schedule"
        },
        {
          "@id": "schema:CreativeWorkSeries"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2486"
      }
    },
    {
      "@id": "schema:Pulmonary",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to the study of the respiratory system and its respective disease states.",
      "rdfs:label": "Pulmonary",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:trialDesign",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifics about the trial design (enumerated).",
      "rdfs:label": "trialDesign",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTrial"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTrialDesign"
      }
    },
    {
      "@id": "schema:sensoryUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "The neurological pathway extension that inputs and sends information to the brain or spinal cord.",
      "rdfs:label": "sensoryUnit",
      "schema:domainIncludes": {
        "@id": "schema:Nerve"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:SuperficialAnatomy"
        }
      ]
    },
    {
      "@id": "schema:fromLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The original location of the object or the agent before the action.",
      "rdfs:label": "fromLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:TransferAction"
        },
        {
          "@id": "schema:ExerciseAction"
        },
        {
          "@id": "schema:MoveAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:accessMode",
      "@type": "rdf:Property",
      "rdfs:comment": "The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual.\n      ",
      "rdfs:label": "accessMode",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1100"
      }
    },
    {
      "@id": "schema:trailerWeight",
      "@type": "rdf:Property",
      "rdfs:comment": "The permitted weight of a trailer attached to the vehicle.\\n\\nTypical unit code(s): KGM for kilogram, LBR for pound\\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "trailerWeight",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:competencyRequired",
      "@type": "rdf:Property",
      "rdfs:comment": "Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.",
      "rdfs:label": "competencyRequired",
      "schema:domainIncludes": [
        {
          "@id": "schema:EducationalOccupationalCredential"
        },
        {
          "@id": "schema:LearningResource"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:albumRelease",
      "@type": "rdf:Property",
      "rdfs:comment": "A release of this album.",
      "rdfs:label": "albumRelease",
      "schema:domainIncludes": {
        "@id": "schema:MusicAlbum"
      },
      "schema:inverseOf": {
        "@id": "schema:releaseOf"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicRelease"
      }
    },
    {
      "@id": "schema:primaryImageOfPage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the main image on the page.",
      "rdfs:label": "primaryImageOfPage",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ImageObject"
      }
    },
    {
      "@id": "schema:RestrictedDiet",
      "@type": "rdfs:Class",
      "rdfs:comment": "A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons. ",
      "rdfs:label": "RestrictedDiet",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:releaseDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The release date of a product or product model. This can be used to distinguish the exact variant of a product.",
      "rdfs:label": "releaseDate",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:MedicalStudy",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.",
      "rdfs:label": "MedicalStudy",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MovieClip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short segment/part of a movie.",
      "rdfs:label": "MovieClip",
      "rdfs:subClassOf": {
        "@id": "schema:Clip"
      }
    },
    {
      "@id": "schema:LymphaticVessel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.",
      "rdfs:label": "LymphaticVessel",
      "rdfs:subClassOf": {
        "@id": "schema:Vessel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:FundingAgency",
      "@type": "rdfs:Class",
      "rdfs:comment": "A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages\n    the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s).\n    A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.\n    \nExamples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation...\n    ",
      "rdfs:label": "FundingAgency",
      "rdfs:subClassOf": {
        "@id": "schema:Project"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        }
      ]
    },
    {
      "@id": "schema:clipNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "Position of the clip within an ordered group of clips.",
      "rdfs:label": "clipNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:position"
      },
      "schema:domainIncludes": {
        "@id": "schema:Clip"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:MortgageLoan",
      "@type": "rdfs:Class",
      "rdfs:comment": "A loan in which property or real estate is used as collateral. (A loan securitized against some real estate).",
      "rdfs:label": "MortgageLoan",
      "rdfs:subClassOf": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:cvdNumC19HospPats",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.",
      "rdfs:label": "cvdNumC19HospPats",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:SpeakableSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.",
      "rdfs:label": "SpeakableSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1389"
      }
    },
    {
      "@id": "schema:RestockingFees",
      "@type": "schema:ReturnFeesEnumeration",
      "rdfs:comment": "Specifies that the customer must pay a restocking fee when returning a product",
      "rdfs:label": "RestockingFees",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:ServiceChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A means for accessing a service, e.g. a government office location, web site, or phone number.",
      "rdfs:label": "ServiceChannel",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:aircraft",
      "@type": "rdf:Property",
      "rdfs:comment": "The kind of aircraft (e.g., \"Boeing 747\").",
      "rdfs:label": "aircraft",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Vehicle"
        }
      ]
    },
    {
      "@id": "schema:founders",
      "@type": "rdf:Property",
      "rdfs:comment": "A person who founded this organization.",
      "rdfs:label": "founders",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:founder"
      }
    },
    {
      "@id": "schema:ImageGallery",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Image gallery page.",
      "rdfs:label": "ImageGallery",
      "rdfs:subClassOf": {
        "@id": "schema:MediaGallery"
      }
    },
    {
      "@id": "schema:TypeAndQuantityNode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.",
      "rdfs:label": "TypeAndQuantityNode",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:inChI",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus enabling easier linking of diverse data compilations.",
      "rdfs:label": "inChI",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasRepresentation"
      },
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:geoWithin",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoWithin",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ]
    },
    {
      "@id": "schema:requirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).",
      "rdfs:label": "requirements",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:softwareRequirements"
      }
    },
    {
      "@id": "schema:AdultEntertainment",
      "@type": "rdfs:Class",
      "rdfs:comment": "An adult entertainment establishment.",
      "rdfs:label": "AdultEntertainment",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:targetUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL of a node in an established educational framework.",
      "rdfs:label": "targetUrl",
      "schema:domainIncludes": {
        "@id": "schema:AlignmentObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:additionalName",
      "@type": "rdf:Property",
      "rdfs:comment": "An additional name for a Person, can be used for a middle name.",
      "rdfs:label": "additionalName",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:follows",
      "@type": "rdf:Property",
      "rdfs:comment": "The most generic uni-directional social relation.",
      "rdfs:label": "follows",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:MotorcycleRepair",
      "@type": "rdfs:Class",
      "rdfs:comment": "A motorcycle repair shop.",
      "rdfs:label": "MotorcycleRepair",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:WearableMeasurementSleeve",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the sleeve length, for example of a shirt",
      "rdfs:label": "WearableMeasurementSleeve",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:appliesToPaymentMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The payment method(s) to which the payment charge specification applies.",
      "rdfs:label": "appliesToPaymentMethod",
      "schema:domainIncludes": {
        "@id": "schema:PaymentChargeSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PaymentMethod"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:RsvpResponseYes",
      "@type": "schema:RsvpResponseType",
      "rdfs:comment": "The invitee will attend.",
      "rdfs:label": "RsvpResponseYes"
    },
    {
      "@id": "schema:tissueSample",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of tissue sample required for the test.",
      "rdfs:label": "tissueSample",
      "schema:domainIncludes": {
        "@id": "schema:PathologyTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:geoIntersects",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoIntersects",
      "schema:domainIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ]
    },
    {
      "@id": "schema:supportingData",
      "@type": "rdf:Property",
      "rdfs:comment": "Supporting data for a SoftwareApplication.",
      "rdfs:label": "supportingData",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataFeed"
      }
    },
    {
      "@id": "schema:CommentAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of generating a comment about a subject.",
      "rdfs:label": "CommentAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:City",
      "@type": "rdfs:Class",
      "rdfs:comment": "A city or town.",
      "rdfs:label": "City",
      "rdfs:subClassOf": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:InternetCafe",
      "@type": "rdfs:Class",
      "rdfs:comment": "An internet cafe.",
      "rdfs:label": "InternetCafe",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:abstract",
      "@type": "rdf:Property",
      "rdfs:comment": "An abstract is a short description that summarizes a [[CreativeWork]].",
      "rdfs:label": "abstract",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/276"
      }
    },
    {
      "@id": "schema:tool",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.",
      "rdfs:label": "tool",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToDirection"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:HowToTool"
        }
      ]
    },
    {
      "@id": "schema:PreventionHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about actions or measures that can be taken to avoid getting the topic or reaching a critical situation related to the topic.",
      "rdfs:label": "PreventionHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:Renal",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to the study of the kidneys and its respective disease states.",
      "rdfs:label": "Renal",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:numberOfPages",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of pages in the book.",
      "rdfs:label": "numberOfPages",
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:TreatmentsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Treatments or related therapies for a Topic.",
      "rdfs:label": "TreatmentsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:Festival",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Festival.",
      "rdfs:label": "Festival",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:logo",
      "@type": "rdf:Property",
      "rdfs:comment": "An associated logo.",
      "rdfs:label": "logo",
      "rdfs:subPropertyOf": {
        "@id": "schema:image"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Brand"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:ImageObject"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:mpn",
      "@type": "rdf:Property",
      "rdfs:comment": "The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.",
      "rdfs:label": "mpn",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:validUntil",
      "@type": "rdf:Property",
      "rdfs:comment": "The date when the item is no longer valid.",
      "rdfs:label": "validUntil",
      "schema:domainIncludes": {
        "@id": "schema:Permit"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:GeoCoordinates",
      "@type": "rdfs:Class",
      "rdfs:comment": "The geographic coordinates of a place or event.",
      "rdfs:label": "GeoCoordinates",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      }
    },
    {
      "@id": "schema:VegetarianDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet exclusive of animal meat.",
      "rdfs:label": "VegetarianDiet"
    },
    {
      "@id": "schema:RepaymentSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value representing repayment.",
      "rdfs:label": "RepaymentSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:deathDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Date of death.",
      "rdfs:label": "deathDate",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:Motel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A motel.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Motel",
      "rdfs:subClassOf": {
        "@id": "schema:LodgingBusiness"
      }
    },
    {
      "@id": "schema:legislationResponsible",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#responsibility_of"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#responsibility_of"
      },
      "rdfs:comment": "An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published.",
      "rdfs:label": "legislationResponsible",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:CaseSeries",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "A case series (also known as a clinical series) is a medical research study that tracks patients with a known exposure given similar treatment or examines their medical records for exposure and outcome. A case series can be retrospective or prospective and usually involves a smaller number of patients than the more powerful case-control studies or randomized controlled trials. Case series may be consecutive or non-consecutive, depending on whether all cases presenting to the reporting authors over a period of time were included, or only a selection.",
      "rdfs:label": "CaseSeries",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ReportageNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing\n news articles which are the result of journalistic news reporting conventions.\n\nIn practice many news publishers produce a wide variety of article types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.\n\nThe [[ReportageNewsArticle]] type is based on a stricter ideal for \"news\" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the [[ReportageNewsArticle]] sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.\n\nA [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of [[AnalysisNewsArticle]].\n",
      "rdfs:label": "ReportageNewsArticle",
      "rdfs:subClassOf": {
        "@id": "schema:NewsArticle"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:occupancy",
      "@type": "rdf:Property",
      "rdfs:comment": "The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).\nTypical unit code(s): C62 for person",
      "rdfs:label": "occupancy",
      "schema:domainIncludes": [
        {
          "@id": "schema:HotelRoom"
        },
        {
          "@id": "schema:SingleFamilyResidence"
        },
        {
          "@id": "schema:Suite"
        },
        {
          "@id": "schema:Apartment"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:members",
      "@type": "rdf:Property",
      "rdfs:comment": "A member of this organization.",
      "rdfs:label": "members",
      "schema:domainIncludes": [
        {
          "@id": "schema:ProgramMembership"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:member"
      }
    },
    {
      "@id": "schema:resultComment",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of result. The Comment created or sent as a result of this action.",
      "rdfs:label": "resultComment",
      "rdfs:subPropertyOf": {
        "@id": "schema:result"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:CommentAction"
        },
        {
          "@id": "schema:ReplyAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Comment"
      }
    },
    {
      "@id": "schema:Optometric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "The science or practice of testing visual acuity and prescribing corrective lenses.",
      "rdfs:label": "Optometric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EventReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for an event like a concert, sporting event, or lecture.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].",
      "rdfs:label": "EventReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:QuoteAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent quotes/estimates/appraises an object/product/service with a price at a location/store.",
      "rdfs:label": "QuoteAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:PublicationVolume",
      "@type": "rdfs:Class",
      "rdfs:comment": "A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\\n\\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).",
      "rdfs:label": "PublicationVolume",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:healthPlanNetworkId",
      "@type": "rdf:Property",
      "rdfs:comment": "Name or unique ID of network. (Networks are often reused across different insurance plans).",
      "rdfs:label": "healthPlanNetworkId",
      "schema:domainIncludes": [
        {
          "@id": "schema:HealthPlanNetwork"
        },
        {
          "@id": "schema:MedicalOrganization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:totalPrice",
      "@type": "rdf:Property",
      "rdfs:comment": "The total price for the reservation or ticket, including applicable taxes, shipping, etc.\\n\\nUsage guidelines:\\n\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "totalPrice",
      "schema:domainIncludes": [
        {
          "@id": "schema:Reservation"
        },
        {
          "@id": "schema:Ticket"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ]
    },
    {
      "@id": "schema:thumbnailUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "A thumbnail image relevant to the Thing.",
      "rdfs:label": "thumbnailUrl",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:RVPark",
      "@type": "rdfs:Class",
      "rdfs:comment": "A place offering space for \"Recreational Vehicles\", Caravans, mobile homes and the like.",
      "rdfs:label": "RVPark",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:expertConsiderations",
      "@type": "rdf:Property",
      "rdfs:comment": "Medical expert advice related to the plan.",
      "rdfs:label": "expertConsiderations",
      "schema:domainIncludes": {
        "@id": "schema:Diet"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Downpayment",
      "@type": "schema:PriceComponentTypeEnumeration",
      "rdfs:comment": "Represents the downpayment (up-front payment) price component of the total price for an offered product that has additional installment payments.",
      "rdfs:label": "Downpayment",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:StoreCreditRefund",
      "@type": "schema:RefundTypeEnumeration",
      "rdfs:comment": "Specifies that the customer receives a store credit as refund when returning a product",
      "rdfs:label": "StoreCreditRefund",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:ResultsAvailable",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Results are available.",
      "rdfs:label": "ResultsAvailable",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:countryOfLastProcessing",
      "@type": "rdf:Property",
      "rdfs:comment": "The place where the item (typically [[Product]]) was last processed and tested before importation.",
      "rdfs:label": "countryOfLastProcessing",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/991"
      }
    },
    {
      "@id": "schema:observationDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The observationDate of an [[Observation]].",
      "rdfs:label": "observationDate",
      "schema:domainIncludes": {
        "@id": "schema:Observation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:missionCoveragePrioritiesPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "For a [[NewsMediaOrganization]], a statement on coverage priorities, including any public agenda or stance on issues.",
      "rdfs:label": "missionCoveragePrioritiesPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": {
        "@id": "schema:NewsMediaOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:totalPaymentDue",
      "@type": "rdf:Property",
      "rdfs:comment": "The total amount due.",
      "rdfs:label": "totalPaymentDue",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ]
    },
    {
      "@id": "schema:description",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/description"
      },
      "rdfs:comment": "A description of the item.",
      "rdfs:label": "description",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:AgreeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.",
      "rdfs:label": "AgreeAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:JewelryStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A jewelry store.",
      "rdfs:label": "JewelryStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:priceType",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.",
      "rdfs:label": "priceType",
      "schema:domainIncludes": [
        {
          "@id": "schema:CompoundPriceSpecification"
        },
        {
          "@id": "schema:UnitPriceSpecification"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:PriceTypeEnumeration"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Ligament",
      "@type": "rdfs:Class",
      "rdfs:comment": "A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.",
      "rdfs:label": "Ligament",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:numberOfForwardGears",
      "@type": "rdf:Property",
      "rdfs:comment": "The total number of forward gears available for the transmission system of the vehicle.\\n\\nTypical unit code(s): C62",
      "rdfs:label": "numberOfForwardGears",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:AnimalShelter",
      "@type": "rdfs:Class",
      "rdfs:comment": "Animal shelter.",
      "rdfs:label": "AnimalShelter",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:overdosage",
      "@type": "rdf:Property",
      "rdfs:comment": "Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response.",
      "rdfs:label": "overdosage",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:SpecialAnnouncement",
      "@type": "rdfs:Class",
      "rdfs:comment": "A SpecialAnnouncement combines a simple date-stamped textual information update\n      with contextualized Web links and other structured data.  It represents an information update made by a\n      locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,\n      local government.\n\nFor work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).\n\nThe motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org\nexpect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our\nusual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).\n\n\nWhile this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover\nthe kinds of everyday practical information being posted to existing websites during an emergency situation.\n\nSeveral kinds of information can be provided:\n\nWe encourage the provision of \"name\", \"text\", \"datePosted\", \"expires\" (if appropriate), \"category\" and\n\"url\" as a simple baseline. It is important to provide a value for \"category\" where possible, most ideally as a well known\nURL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be \"https://en.wikipedia.org/w/index.php?title=2019-20\\_coronavirus\\_pandemic\" or \"https://www.wikidata.org/wiki/Q81068910\".\n\nFor many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url as a property of that, alongside at least a simple \"[[text]]\" summary of the page. It is\nunlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.\n\nWe expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the [[SpecialAnnouncement]].\n\nMany [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and [[announcementLocation]].\n\nThe [[about]] property can be used to indicate entities that are the focus of the announcement. We now recommend using [[about]] only\nfor representing non-location entities (e.g. a [[Course]] or a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup should be aware that the initial design encouraged the use of /about for locations too.\n\nThe basic content of [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting\n[[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed\nwith the [[webFeed]] property. This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]] providing\nmedia type information e.g. \"application/rss+xml\" or \"application/atom+xml\".\n",
      "rdfs:label": "SpecialAnnouncement",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:cvdNumICUBeds",
      "@type": "rdf:Property",
      "rdfs:comment": "numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.",
      "rdfs:label": "cvdNumICUBeds",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:foundingDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date that this organization was founded.",
      "rdfs:label": "foundingDate",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:TransitMap",
      "@type": "schema:MapCategoryType",
      "rdfs:comment": "A transit map.",
      "rdfs:label": "TransitMap"
    },
    {
      "@id": "schema:ReturnAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).",
      "rdfs:label": "ReturnAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:returnPolicyCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies an applicable return policy (from an enumeration).",
      "rdfs:label": "returnPolicyCategory",
      "schema:domainIncludes": [
        {
          "@id": "schema:MerchantReturnPolicy"
        },
        {
          "@id": "schema:MerchantReturnPolicySeasonalOverride"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MerchantReturnEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:sampleType",
      "@type": "rdf:Property",
      "rdfs:comment": "What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.",
      "rdfs:label": "sampleType",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:codeSampleType"
      }
    },
    {
      "@id": "schema:Hardcover",
      "@type": "schema:BookFormatType",
      "rdfs:comment": "Book format: Hardcover.",
      "rdfs:label": "Hardcover"
    },
    {
      "@id": "schema:postOfficeBoxNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The post office box number for PO box addresses.",
      "rdfs:label": "postOfficeBoxNumber",
      "schema:domainIncludes": {
        "@id": "schema:PostalAddress"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Atlas",
      "@type": "rdfs:Class",
      "rdfs:comment": "A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.",
      "rdfs:label": "Atlas",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:source": {
        "@id": "http://www.productontology.org/id/Atlas"
      }
    },
    {
      "@id": "schema:petsAllowed",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.",
      "rdfs:label": "petsAllowed",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:Accommodation"
        },
        {
          "@id": "schema:ApartmentComplex"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Boolean"
        }
      ],
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:acquireLicensePage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.",
      "rdfs:label": "acquireLicensePage",
      "rdfs:subPropertyOf": {
        "@id": "schema:usageInfo"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2454"
      }
    },
    {
      "@id": "schema:contentRating",
      "@type": "rdf:Property",
      "rdfs:comment": "Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.",
      "rdfs:label": "contentRating",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Rating"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:MerchantReturnEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates several kinds of product return policies.",
      "rdfs:label": "MerchantReturnEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:Drawing",
      "@type": "rdfs:Class",
      "rdfs:comment": "A picture or diagram made with a pencil, pen, or crayon rather than paint.",
      "rdfs:label": "Drawing",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1448"
      }
    },
    {
      "@id": "schema:permissionType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of permission granted the person, organization, or audience.",
      "rdfs:label": "permissionType",
      "schema:domainIncludes": {
        "@id": "schema:DigitalDocumentPermission"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DigitalDocumentPermissionType"
      }
    },
    {
      "@id": "schema:FDAcategoryA",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation by the US FDA signifying that adequate and well-controlled studies have failed to demonstrate a risk to the fetus in the first trimester of pregnancy (and there is no evidence of risk in later trimesters).",
      "rdfs:label": "FDAcategoryA",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:numberOfItems",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.",
      "rdfs:label": "numberOfItems",
      "schema:domainIncludes": {
        "@id": "schema:ItemList"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:artMedium",
      "@type": "rdf:Property",
      "rdfs:comment": "The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)",
      "rdfs:label": "artMedium",
      "rdfs:subPropertyOf": {
        "@id": "schema:material"
      },
      "schema:domainIncludes": {
        "@id": "schema:VisualArtwork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:minPrice",
      "@type": "rdf:Property",
      "rdfs:comment": "The lowest price if the price is a range.",
      "rdfs:label": "minPrice",
      "schema:domainIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:legislationLegalValue",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#legal_value"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#legal_value"
      },
      "rdfs:comment": "The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a \"stronger\" legal value than the HTML file of the same act.",
      "rdfs:label": "legislationLegalValue",
      "schema:domainIncludes": {
        "@id": "schema:LegislationObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:LegalValueLevel"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:awards",
      "@type": "rdf:Property",
      "rdfs:comment": "Awards won by or for this item.",
      "rdfs:label": "awards",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:supersededBy": {
        "@id": "schema:award"
      }
    },
    {
      "@id": "schema:workload",
      "@type": "rdf:Property",
      "rdfs:comment": "Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.",
      "rdfs:label": "workload",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Energy"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:encodesBioChemEntity",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Gene"
      },
      "rdfs:comment": "Another BioChemEntity encoded by this one. ",
      "rdfs:label": "encodesBioChemEntity",
      "schema:domainIncludes": {
        "@id": "schema:Gene"
      },
      "schema:inverseOf": {
        "@id": "schema:isEncodedByBioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BioChemEntity"
      }
    },
    {
      "@id": "schema:EventPostponed",
      "@type": "schema:EventStatusType",
      "rdfs:comment": "The event has been postponed and no new date has been set. The event's previousStartDate should be set.",
      "rdfs:label": "EventPostponed"
    },
    {
      "@id": "schema:authenticator",
      "@type": "rdf:Property",
      "rdfs:comment": "The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.",
      "rdfs:label": "authenticator",
      "schema:domainIncludes": {
        "@id": "schema:MediaSubscription"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
      }
    },
    {
      "@id": "schema:ChemicalSubstance",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": [
        {
          "@id": "http://bioschemas.org"
        },
        {
          "@id": "https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999"
        }
      ],
      "rdfs:comment": "A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).",
      "rdfs:label": "ChemicalSubstance",
      "rdfs:subClassOf": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:numAdults",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of adults staying in the unit.",
      "rdfs:label": "numAdults",
      "schema:domainIncludes": {
        "@id": "schema:LodgingReservation"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Integer"
        }
      ]
    },
    {
      "@id": "schema:orderItemNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The identifier of the order item.",
      "rdfs:label": "orderItemNumber",
      "schema:domainIncludes": {
        "@id": "schema:OrderItem"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Restaurant",
      "@type": "rdfs:Class",
      "rdfs:comment": "A restaurant.",
      "rdfs:label": "Restaurant",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:ProductGroup",
      "@type": "rdfs:Class",
      "rdfs:comment": "A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.\n\nWhile a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]]. ",
      "rdfs:label": "ProductGroup",
      "rdfs:subClassOf": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2597"
      }
    },
    {
      "@id": "schema:postalCodeEnd",
      "@type": "rdf:Property",
      "rdfs:comment": "Last postal code in the range (included). Needs to be after [[postalCodeBegin]].",
      "rdfs:label": "postalCodeEnd",
      "schema:domainIncludes": {
        "@id": "schema:PostalCodeRangeSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:ShippingDeliveryTime",
      "@type": "rdfs:Class",
      "rdfs:comment": "ShippingDeliveryTime provides various pieces of information about delivery times for shipping.",
      "rdfs:label": "ShippingDeliveryTime",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:makesOffer",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to products or services offered by the organization or person.",
      "rdfs:label": "makesOffer",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:offeredBy"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Offer"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:numberOfAirbags",
      "@type": "rdf:Property",
      "rdfs:comment": "The number or type of airbags in the vehicle.",
      "rdfs:label": "numberOfAirbags",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:isFamilyFriendly",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether this content is family friendly.",
      "rdfs:label": "isFamilyFriendly",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:adverseOutcome",
      "@type": "rdf:Property",
      "rdfs:comment": "A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead.",
      "rdfs:label": "adverseOutcome",
      "schema:domainIncludes": [
        {
          "@id": "schema:TherapeuticProcedure"
        },
        {
          "@id": "schema:MedicalDevice"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:WearableSizeGroupShort",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Short\" for wearables.",
      "rdfs:label": "WearableSizeGroupShort",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Table",
      "@type": "rdfs:Class",
      "rdfs:comment": "A table on a Web page.",
      "rdfs:label": "Table",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:partOfSeries",
      "@type": "rdf:Property",
      "rdfs:comment": "The series to which this episode or season belongs.",
      "rdfs:label": "partOfSeries",
      "rdfs:subPropertyOf": {
        "@id": "schema:isPartOf"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:Episode"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWorkSeries"
      }
    },
    {
      "@id": "schema:artist",
      "@type": "rdf:Property",
      "rdfs:comment": "The primary artist for a work\n    \tin a medium other than pencils or digital line art--for example, if the\n    \tprimary artwork is done in watercolors or digital paints.",
      "rdfs:label": "artist",
      "schema:domainIncludes": [
        {
          "@id": "schema:VisualArtwork"
        },
        {
          "@id": "schema:ComicIssue"
        },
        {
          "@id": "schema:ComicStory"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:editor",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies the Person who edited the CreativeWork.",
      "rdfs:label": "editor",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:encodesCreativeWork",
      "@type": "rdf:Property",
      "rdfs:comment": "The CreativeWork encoded by this media object.",
      "rdfs:label": "encodesCreativeWork",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:inverseOf": {
        "@id": "schema:encoding"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:ActiveNotRecruiting",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Active, but not recruiting new participants.",
      "rdfs:label": "ActiveNotRecruiting",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:partOfInvoice",
      "@type": "rdf:Property",
      "rdfs:comment": "The order is being paid as part of the referenced Invoice.",
      "rdfs:label": "partOfInvoice",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Invoice"
      }
    },
    {
      "@id": "schema:DrugPrescriptionStatus",
      "@type": "rdfs:Class",
      "rdfs:comment": "Indicates whether this drug is available by prescription or over-the-counter.",
      "rdfs:label": "DrugPrescriptionStatus",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:datePublished",
      "@type": "rdf:Property",
      "rdfs:comment": "Date of first broadcast/publication.",
      "rdfs:label": "datePublished",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:ownedThrough",
      "@type": "rdf:Property",
      "rdfs:comment": "The date and time of giving up ownership on the product.",
      "rdfs:label": "ownedThrough",
      "schema:domainIncludes": {
        "@id": "schema:OwnershipInfo"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:CarUsageType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.",
      "rdfs:label": "CarUsageType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:MRI",
      "@type": "schema:MedicalImagingTechnique",
      "rdfs:comment": "Magnetic resonance imaging.",
      "rdfs:label": "MRI",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:MSRP",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents the manufacturer suggested retail price (\"MSRP\") of an offered product.",
      "rdfs:label": "MSRP",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:SoundtrackAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "SoundtrackAlbum.",
      "rdfs:label": "SoundtrackAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:taxonomicRange",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "The taxonomic grouping of the organism that expresses, encodes, or in someway related to the BioChemEntity.",
      "rdfs:label": "taxonomicRange",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Taxon"
        }
      ]
    },
    {
      "@id": "schema:paymentDueDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date that payment is due.",
      "rdfs:label": "paymentDueDate",
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:sportsActivityLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The sports activity location where this action occurred.",
      "rdfs:label": "sportsActivityLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:includesHealthPlanNetwork",
      "@type": "rdf:Property",
      "rdfs:comment": "Networks covered by this plan.",
      "rdfs:label": "includesHealthPlanNetwork",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HealthPlanNetwork"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:BorrowAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\\n\\nRelated actions:\\n\\n* [[LendAction]]: Reciprocal of BorrowAction.",
      "rdfs:label": "BorrowAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:includedInHealthInsurancePlan",
      "@type": "rdf:Property",
      "rdfs:comment": "The insurance plans that cover this drug.",
      "rdfs:label": "includedInHealthInsurancePlan",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:gtin12",
      "@type": "rdf:Property",
      "rdfs:comment": "The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
      "rdfs:label": "gtin12",
      "rdfs:subPropertyOf": [
        {
          "@id": "schema:identifier"
        },
        {
          "@id": "schema:gtin"
        }
      ],
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:modelDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The release date of a vehicle model (often used to differentiate versions of the same make and model).",
      "rdfs:label": "modelDate",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:cvdNumC19OFMechVentPats",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.",
      "rdfs:label": "cvdNumC19OFMechVentPats",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:ReviewNewsArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product, performance, or artistic or literary work.",
      "rdfs:label": "ReviewNewsArticle",
      "rdfs:subClassOf": [
        {
          "@id": "schema:NewsArticle"
        },
        {
          "@id": "schema:CriticReview"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:HotelRoom",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hotel room is a single room in a hotel.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "HotelRoom",
      "rdfs:subClassOf": {
        "@id": "schema:Room"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:WearableMeasurementWaist",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the waist section, for example of pants",
      "rdfs:label": "WearableMeasurementWaist",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:hasDeliveryMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "Method used for delivery or shipping.",
      "rdfs:label": "hasDeliveryMethod",
      "schema:domainIncludes": [
        {
          "@id": "schema:ParcelDelivery"
        },
        {
          "@id": "schema:DeliveryEvent"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DeliveryMethod"
      }
    },
    {
      "@id": "schema:departureBoatTerminal",
      "@type": "rdf:Property",
      "rdfs:comment": "The terminal or port from which the boat departs.",
      "rdfs:label": "departureBoatTerminal",
      "schema:domainIncludes": {
        "@id": "schema:BoatTrip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BoatTerminal"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1755"
      }
    },
    {
      "@id": "schema:iswcCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The International Standard Musical Work Code for the composition.",
      "rdfs:label": "iswcCode",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:ArchiveOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": {
        "@language": "en",
        "@value": "An organization with archival holdings. An organization which keeps and preserves archival material and typically makes it accessible to the public."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "ArchiveOrganization"
      },
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1758"
      }
    },
    {
      "@id": "schema:liveBlogUpdate",
      "@type": "rdf:Property",
      "rdfs:comment": "An update to the LiveBlog.",
      "rdfs:label": "liveBlogUpdate",
      "schema:domainIncludes": {
        "@id": "schema:LiveBlogPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BlogPosting"
      }
    },
    {
      "@id": "schema:associatedArticle",
      "@type": "rdf:Property",
      "rdfs:comment": "A NewsArticle associated with the Media Object.",
      "rdfs:label": "associatedArticle",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:NewsArticle"
      }
    },
    {
      "@id": "schema:Claim",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.\n\n  Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].\n\n  At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.\n  ",
      "rdfs:label": "Claim",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1828"
      }
    },
    {
      "@id": "schema:previousItem",
      "@type": "rdf:Property",
      "rdfs:comment": "A link to the ListItem that preceeds the current one.",
      "rdfs:label": "previousItem",
      "schema:domainIncludes": {
        "@id": "schema:ListItem"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ListItem"
      }
    },
    {
      "@id": "schema:typeOfBed",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.",
      "rdfs:label": "typeOfBed",
      "schema:domainIncludes": {
        "@id": "schema:BedDetails"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:BedType"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:ProgramMembership",
      "@type": "rdfs:Class",
      "rdfs:comment": "Used to describe membership in a loyalty programs (e.g. \"StarAliance\"), traveler clubs (e.g. \"AAA\"), purchase clubs (\"Safeway Club\"), etc.",
      "rdfs:label": "ProgramMembership",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:educationalLevel",
      "@type": "rdf:Property",
      "rdfs:comment": "The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.",
      "rdfs:label": "educationalLevel",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:LearningResource"
        },
        {
          "@id": "schema:EducationEvent"
        },
        {
          "@id": "schema:EducationalOccupationalCredential"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:availableAtOrFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The place(s) from which the offer can be obtained (e.g. store locations).",
      "rdfs:label": "availableAtOrFrom",
      "rdfs:subPropertyOf": {
        "@id": "schema:areaServed"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:cssSelector",
      "@type": "rdf:Property",
      "rdfs:comment": "A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual \"Web page element\".",
      "rdfs:label": "cssSelector",
      "schema:domainIncludes": [
        {
          "@id": "schema:SpeakableSpecification"
        },
        {
          "@id": "schema:WebPageElement"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CssSelectorType"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1389"
      }
    },
    {
      "@id": "schema:PhysicalActivity",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.",
      "rdfs:label": "PhysicalActivity",
      "rdfs:subClassOf": {
        "@id": "schema:LifestyleModification"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:assesses",
      "@type": "rdf:Property",
      "rdfs:comment": "The item being described is intended to assess the competency or learning outcome defined by the referenced term.",
      "rdfs:label": "assesses",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:EducationEvent"
        },
        {
          "@id": "schema:LearningResource"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2427"
      }
    },
    {
      "@id": "schema:webFeed",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.",
      "rdfs:label": "webFeed",
      "schema:domainIncludes": [
        {
          "@id": "schema:PodcastSeries"
        },
        {
          "@id": "schema:SpecialAnnouncement"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DataFeed"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/373"
      }
    },
    {
      "@id": "schema:ContactPoint",
      "@type": "rdfs:Class",
      "rdfs:comment": "A contact point&#x2014;for example, a Customer Complaints department.",
      "rdfs:label": "ContactPoint",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      }
    },
    {
      "@id": "schema:Barcode",
      "@type": "rdfs:Class",
      "rdfs:comment": "An image of a visual machine-readable code such as a barcode or QR code.",
      "rdfs:label": "Barcode",
      "rdfs:subClassOf": {
        "@id": "schema:ImageObject"
      }
    },
    {
      "@id": "schema:contraindication",
      "@type": "rdf:Property",
      "rdfs:comment": "A contraindication for this therapy.",
      "rdfs:label": "contraindication",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalTherapy"
        },
        {
          "@id": "schema:MedicalDevice"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalContraindication"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:BroadcastService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A delivery service through which content is provided via broadcast over the air or online.",
      "rdfs:label": "BroadcastService",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:characterAttribute",
      "@type": "rdf:Property",
      "rdfs:comment": "A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).",
      "rdfs:label": "characterAttribute",
      "schema:domainIncludes": [
        {
          "@id": "schema:Game"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:Nonprofit501a",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501a: Non-profit type referring to Farmers’ Cooperative Associations.",
      "rdfs:label": "Nonprofit501a",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:legislationJurisdiction",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#jurisdiction"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#jurisdiction"
      },
      "rdfs:comment": "The jurisdiction from which the legislation originates.",
      "rdfs:label": "legislationJurisdiction",
      "rdfs:subPropertyOf": [
        {
          "@id": "schema:jurisdiction"
        },
        {
          "@id": "schema:spatialCoverage"
        }
      ],
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:AdministrativeArea"
        }
      ],
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:carrierRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).",
      "rdfs:label": "carrierRequirements",
      "schema:domainIncludes": {
        "@id": "schema:MobileApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WearableSizeSystemJP",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Japanese size system for wearables.",
      "rdfs:label": "WearableSizeSystemJP",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:DatedMoneySpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by [[MonetaryAmount]] use of that type is recommended",
      "rdfs:label": "DatedMoneySpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:supersededBy": {
        "@id": "schema:MonetaryAmount"
      }
    },
    {
      "@id": "schema:reportNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The number or other unique designator assigned to a Report by the publishing organization.",
      "rdfs:label": "reportNumber",
      "schema:domainIncludes": {
        "@id": "schema:Report"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:cheatCode",
      "@type": "rdf:Property",
      "rdfs:comment": "Cheat codes to the game.",
      "rdfs:label": "cheatCode",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:VideoGame"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:OnDemandEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand.",
      "rdfs:label": "OnDemandEvent",
      "rdfs:subClassOf": {
        "@id": "schema:PublicationEvent"
      }
    },
    {
      "@id": "schema:ArtGallery",
      "@type": "rdfs:Class",
      "rdfs:comment": "An art gallery.",
      "rdfs:label": "ArtGallery",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:OrderItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "An order item is a line of an order. It includes the quantity and shipping details of a bought offer.",
      "rdfs:label": "OrderItem",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:HowToSupply",
      "@type": "rdfs:Class",
      "rdfs:comment": "A supply consumed when performing the instructions for how to achieve a result.",
      "rdfs:label": "HowToSupply",
      "rdfs:subClassOf": {
        "@id": "schema:HowToItem"
      }
    },
    {
      "@id": "schema:ShoppingCenter",
      "@type": "rdfs:Class",
      "rdfs:comment": "A shopping center or mall.",
      "rdfs:label": "ShoppingCenter",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:Sunday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Saturday and Monday.",
      "rdfs:label": "Sunday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q132"
      }
    },
    {
      "@id": "schema:repeatFrequency",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]. The intervals between\n      events should be defined as a [[Duration]] of time.",
      "rdfs:label": "repeatFrequency",
      "rdfs:subPropertyOf": {
        "@id": "schema:frequency"
      },
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Duration"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:PsychologicalTreatment",
      "@type": "rdfs:Class",
      "rdfs:comment": "A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.",
      "rdfs:label": "PsychologicalTreatment",
      "rdfs:subClassOf": {
        "@id": "schema:TherapeuticProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:game",
      "@type": "rdf:Property",
      "rdfs:comment": "Video game which is played on this server.",
      "rdfs:label": "game",
      "schema:domainIncludes": {
        "@id": "schema:GameServer"
      },
      "schema:inverseOf": {
        "@id": "schema:gameServer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:VideoGame"
      }
    },
    {
      "@id": "schema:DoubleBlindedTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial design in which neither the researcher nor the patient knows the details of the treatment the patient was randomly assigned to.",
      "rdfs:label": "DoubleBlindedTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:subStructure",
      "@type": "rdf:Property",
      "rdfs:comment": "Component (sub-)structure(s) that comprise this anatomical structure.",
      "rdfs:label": "subStructure",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:billingDuration",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case the unit of measurement, for example month, is specified by the unitCode property).",
      "rdfs:label": "billingDuration",
      "schema:domainIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Duration"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:athlete",
      "@type": "rdf:Property",
      "rdfs:comment": "A person that acts as performing member of a sports team; a player as opposed to a coach.",
      "rdfs:label": "athlete",
      "schema:domainIncludes": {
        "@id": "schema:SportsTeam"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:OrderStatus",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerated status values for Order.",
      "rdfs:label": "OrderStatus",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:albums",
      "@type": "rdf:Property",
      "rdfs:comment": "A collection of music albums.",
      "rdfs:label": "albums",
      "schema:domainIncludes": {
        "@id": "schema:MusicGroup"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicAlbum"
      },
      "schema:supersededBy": {
        "@id": "schema:album"
      }
    },
    {
      "@id": "schema:scheduledPaymentDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date the invoice is scheduled to be paid.",
      "rdfs:label": "scheduledPaymentDate",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:mainEntity",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the primary entity described in some page or other CreativeWork.",
      "rdfs:label": "mainEntity",
      "rdfs:subPropertyOf": {
        "@id": "schema:about"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:mainEntityOfPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:printEdition",
      "@type": "rdf:Property",
      "rdfs:comment": "The edition of the print product in which the NewsArticle appears.",
      "rdfs:label": "printEdition",
      "schema:domainIncludes": {
        "@id": "schema:NewsArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:creditedTo",
      "@type": "rdf:Property",
      "rdfs:comment": "The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to \"Stefani Germanotta Band\", but by Lady Gaga.",
      "rdfs:label": "creditedTo",
      "schema:domainIncludes": {
        "@id": "schema:MusicRelease"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:studySubject",
      "@type": "rdf:Property",
      "rdfs:comment": "A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study.",
      "rdfs:label": "studySubject",
      "schema:domainIncludes": {
        "@id": "schema:MedicalStudy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:broadcastTimezone",
      "@type": "rdf:Property",
      "rdfs:comment": "The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its broadcasts",
      "rdfs:label": "broadcastTimezone",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:width",
      "@type": "rdf:Property",
      "rdfs:comment": "The width of the item.",
      "rdfs:label": "width",
      "schema:domainIncludes": [
        {
          "@id": "schema:VisualArtwork"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Distance"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:GiveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\\n\\nRelated actions:\\n\\n* [[TakeAction]]: Reciprocal of GiveAction.\\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).",
      "rdfs:label": "GiveAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:ResearchOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Research Organization (e.g. scientific institute, research company).",
      "rdfs:label": "ResearchOrganization",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2877"
      }
    },
    {
      "@id": "schema:CT",
      "@type": "schema:MedicalImagingTechnique",
      "rdfs:comment": "X-ray computed tomography imaging.",
      "rdfs:label": "CT",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EndorsementRating",
      "@type": "rdfs:Class",
      "rdfs:comment": "An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a \"critic's pick\" blog, a\n\"Like\" or \"+1\" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the action is rated positively by\nsome [[agent]]. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]].\n\nAn [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,\nendorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.\n",
      "rdfs:label": "EndorsementRating",
      "rdfs:subClassOf": {
        "@id": "schema:Rating"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1293"
      }
    },
    {
      "@id": "schema:RiverBodyOfWater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A river (for example, the broad majestic Shannon).",
      "rdfs:label": "RiverBodyOfWater",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:TouristInformationCenter",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tourist information center.",
      "rdfs:label": "TouristInformationCenter",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:circle",
      "@type": "rdf:Property",
      "rdfs:comment": "A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.",
      "rdfs:label": "circle",
      "schema:domainIncludes": {
        "@id": "schema:GeoShape"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:correction",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.",
      "rdfs:label": "correction",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CorrectionComment"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1950"
        }
      ]
    },
    {
      "@id": "schema:additionalVariable",
      "@type": "rdf:Property",
      "rdfs:comment": "Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc.",
      "rdfs:label": "additionalVariable",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BookFormatType",
      "@type": "rdfs:Class",
      "rdfs:comment": "The publication format of the book.",
      "rdfs:label": "BookFormatType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:timeRequired",
      "@type": "rdf:Property",
      "rdfs:comment": "Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.",
      "rdfs:label": "timeRequired",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      }
    },
    {
      "@id": "schema:hasBroadcastChannel",
      "@type": "rdf:Property",
      "rdfs:comment": "A broadcast channel of a broadcast service.",
      "rdfs:label": "hasBroadcastChannel",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:inverseOf": {
        "@id": "schema:providesBroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BroadcastChannel"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:musicGroupMember",
      "@type": "rdf:Property",
      "rdfs:comment": "A member of a music group&#x2014;for example, John, Paul, George, or Ringo.",
      "rdfs:label": "musicGroupMember",
      "schema:domainIncludes": {
        "@id": "schema:MusicGroup"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:member"
      }
    },
    {
      "@id": "schema:HousePainter",
      "@type": "rdfs:Class",
      "rdfs:comment": "A house painting service.",
      "rdfs:label": "HousePainter",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:dateVehicleFirstRegistered",
      "@type": "rdf:Property",
      "rdfs:comment": "The date of the first registration of the vehicle with the respective public authorities.",
      "rdfs:label": "dateVehicleFirstRegistered",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:BodyMeasurementArm",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Arm length (measured between arms/shoulder line intersection and the prominent wrist bone). Used, for example, to fit shirts.",
      "rdfs:label": "BodyMeasurementArm",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:gracePeriod",
      "@type": "rdf:Property",
      "rdfs:comment": "The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred.",
      "rdfs:label": "gracePeriod",
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Duration"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:TextDigitalDocument",
      "@type": "rdfs:Class",
      "rdfs:comment": "A file composed primarily of text.",
      "rdfs:label": "TextDigitalDocument",
      "rdfs:subClassOf": {
        "@id": "schema:DigitalDocument"
      }
    },
    {
      "@id": "schema:DislikeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.",
      "rdfs:label": "DislikeAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:VoteAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of expressing a preference from a fixed/finite/structured set of choices/options.",
      "rdfs:label": "VoteAction",
      "rdfs:subClassOf": {
        "@id": "schema:ChooseAction"
      }
    },
    {
      "@id": "schema:postalCodePrefix",
      "@type": "rdf:Property",
      "rdfs:comment": "A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.",
      "rdfs:label": "postalCodePrefix",
      "schema:domainIncludes": {
        "@id": "schema:DefinedRegion"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:PreOrder",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is available for pre-order.",
      "rdfs:label": "PreOrder"
    },
    {
      "@id": "schema:keywords",
      "@type": "rdf:Property",
      "rdfs:comment": "Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.",
      "rdfs:label": "keywords",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:nonProprietaryName",
      "@type": "rdf:Property",
      "rdfs:comment": "The generic name of this drug or supplement.",
      "rdfs:label": "nonProprietaryName",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:Drug"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:healthPlanCoinsuranceRate",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether The rate of coinsurance expressed as a number between 0.0 and 1.0.",
      "rdfs:label": "healthPlanCoinsuranceRate",
      "schema:domainIncludes": {
        "@id": "schema:HealthPlanCostSharingSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:incentiveCompensation",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of bonus and commission compensation aspects of the job.",
      "rdfs:label": "incentiveCompensation",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:legislationType",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#type_document"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#type_document"
      },
      "rdfs:comment": "The type of the legislation. Examples of values are \"law\", \"act\", \"directive\", \"decree\", \"regulation\", \"statutory instrument\", \"loi organique\", \"règlement grand-ducal\", etc., depending on the country.",
      "rdfs:label": "legislationType",
      "rdfs:subPropertyOf": {
        "@id": "schema:genre"
      },
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CategoryCode"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:loanTerm",
      "@type": "rdf:Property",
      "rdfs:comment": "The duration of the loan or credit agreement.",
      "rdfs:label": "loanTerm",
      "rdfs:subPropertyOf": {
        "@id": "schema:duration"
      },
      "schema:domainIncludes": {
        "@id": "schema:LoanOrCredit"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:PawnShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "A shop that will buy, or lend money against the security of, personal possessions.",
      "rdfs:label": "PawnShop",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:OrganizeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of manipulating/administering/supervising/controlling one or more objects.",
      "rdfs:label": "OrganizeAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:LegislationObject",
      "@type": "rdfs:Class",
      "http://www.w3.org/2004/02/skos/core#closeMatch": {
        "@id": "http://data.europa.eu/eli/ontology#Format"
      },
      "rdfs:comment": "A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.",
      "rdfs:label": "LegislationObject",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:Legislation"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:WearableMeasurementWidth",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the width, for example of shoes",
      "rdfs:label": "WearableMeasurementWidth",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Prion",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "A prion is an infectious agent composed of protein in a misfolded form.",
      "rdfs:label": "Prion",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:namedPosition",
      "@type": "rdf:Property",
      "rdfs:comment": "A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.",
      "rdfs:label": "namedPosition",
      "schema:domainIncludes": {
        "@id": "schema:Role"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:roleName"
      }
    },
    {
      "@id": "schema:termCode",
      "@type": "rdf:Property",
      "rdfs:comment": "A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]",
      "rdfs:label": "termCode",
      "schema:domainIncludes": {
        "@id": "schema:DefinedTerm"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:offeredBy",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to the organization or person making the offer.",
      "rdfs:label": "offeredBy",
      "schema:domainIncludes": {
        "@id": "schema:Offer"
      },
      "schema:inverseOf": {
        "@id": "schema:makesOffer"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:carrier",
      "@type": "rdf:Property",
      "rdfs:comment": "'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.",
      "rdfs:label": "carrier",
      "schema:domainIncludes": [
        {
          "@id": "schema:ParcelDelivery"
        },
        {
          "@id": "schema:Flight"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:supersededBy": {
        "@id": "schema:provider"
      }
    },
    {
      "@id": "schema:OfferItemCondition",
      "@type": "rdfs:Class",
      "rdfs:comment": "A list of possible conditions for the item.",
      "rdfs:label": "OfferItemCondition",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:FailedActionStatus",
      "@type": "schema:ActionStatusType",
      "rdfs:comment": "An action that failed to complete. The action's error property and the HTTP return code contain more information about the failure.",
      "rdfs:label": "FailedActionStatus"
    },
    {
      "@id": "schema:possibleTreatment",
      "@type": "rdf:Property",
      "rdfs:comment": "A possible treatment to address this condition, sign or symptom.",
      "rdfs:label": "possibleTreatment",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalCondition"
        },
        {
          "@id": "schema:MedicalSignOrSymptom"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTherapy"
      }
    },
    {
      "@id": "schema:KosherDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet conforming to Jewish dietary practices.",
      "rdfs:label": "KosherDiet"
    },
    {
      "@id": "schema:latitude",
      "@type": "rdf:Property",
      "rdfs:comment": "The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
      "rdfs:label": "latitude",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeoCoordinates"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:originalMediaContextDescription",
      "@type": "rdf:Property",
      "rdfs:comment": "Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]], background information that can contribute to better interpretation of the [[MediaObject]].",
      "rdfs:label": "originalMediaContextDescription",
      "rdfs:subPropertyOf": {
        "@id": "schema:description"
      },
      "schema:domainIncludes": {
        "@id": "schema:MediaReview"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:bookFormat",
      "@type": "rdf:Property",
      "rdfs:comment": "The format of the book.",
      "rdfs:label": "bookFormat",
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BookFormatType"
      }
    },
    {
      "@id": "schema:RealEstateListing",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]] is typically to lease out, or to sell).\n  The [[RealEstateListing]] type itself represents the overall listing, as manifested in some [[WebPage]].\n  ",
      "rdfs:label": "RealEstateListing",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2348"
      }
    },
    {
      "@id": "schema:HowToItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "An item used as either a tool or supply when performing the instructions for how to to achieve a result.",
      "rdfs:label": "HowToItem",
      "rdfs:subClassOf": {
        "@id": "schema:ListItem"
      }
    },
    {
      "@id": "schema:elevation",
      "@type": "rdf:Property",
      "rdfs:comment": "The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.",
      "rdfs:label": "elevation",
      "schema:domainIncludes": [
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:GeoCoordinates"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:MedicalOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical organization (physical or not), such as hospital, institution or clinic.",
      "rdfs:label": "MedicalOrganization",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:status",
      "@type": "rdf:Property",
      "rdfs:comment": "The status of the study (enumerated).",
      "rdfs:label": "status",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalCondition"
        },
        {
          "@id": "schema:MedicalProcedure"
        },
        {
          "@id": "schema:MedicalStudy"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:MedicalStudyStatus"
        },
        {
          "@id": "schema:EventStatusType"
        }
      ]
    },
    {
      "@id": "schema:address",
      "@type": "rdf:Property",
      "rdfs:comment": "Physical address of the item.",
      "rdfs:label": "address",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeoCoordinates"
        },
        {
          "@id": "schema:GeoShape"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:PostalAddress"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:MedicalTherapy",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.",
      "rdfs:label": "MedicalTherapy",
      "rdfs:subClassOf": {
        "@id": "schema:TherapeuticProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:accommodationCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Category of an [[Accommodation]], following real estate conventions e.g. RESO (see [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields  for suggested values).",
      "rdfs:label": "accommodationCategory",
      "rdfs:subPropertyOf": {
        "@id": "schema:category"
      },
      "schema:domainIncludes": {
        "@id": "schema:Accommodation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:EducationalAudience",
      "@type": "rdfs:Class",
      "rdfs:comment": "An EducationalAudience.",
      "rdfs:label": "EducationalAudience",
      "rdfs:subClassOf": {
        "@id": "schema:Audience"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_LRMIClass"
      }
    },
    {
      "@id": "schema:dissolutionDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date that this organization was dissolved.",
      "rdfs:label": "dissolutionDate",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:currenciesAccepted",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency accepted.\\n\\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. \"BTC\"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. \"Ithaca HOUR\".",
      "rdfs:label": "currenciesAccepted",
      "schema:domainIncludes": {
        "@id": "schema:LocalBusiness"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:equal",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is equal to the object.",
      "rdfs:label": "equal",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:PriceComponentTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates different price components that together make up the total price for an offered product.",
      "rdfs:label": "PriceComponentTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:OTC",
      "@type": "schema:DrugPrescriptionStatus",
      "rdfs:comment": "The character of a medical substance, typically a medicine, of being available over the counter or not.",
      "rdfs:label": "OTC",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:SizeSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).",
      "rdfs:label": "SizeSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:QualitativeValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Chapter",
      "@type": "rdfs:Class",
      "rdfs:comment": "One of the sections into which a book is divided. A chapter usually has a section number or a name.",
      "rdfs:label": "Chapter",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      }
    },
    {
      "@id": "schema:Wednesday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Tuesday and Thursday.",
      "rdfs:label": "Wednesday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q128"
      }
    },
    {
      "@id": "schema:returnPolicyCountry",
      "@type": "rdf:Property",
      "rdfs:comment": "The country where the product has to be sent to for returns, for example \"Ireland\" using the [[name]] property of [[Country]]. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product was originally shipped from or sent too.",
      "rdfs:label": "returnPolicyCountry",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Country"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:awayTeam",
      "@type": "rdf:Property",
      "rdfs:comment": "The away team in a sports event.",
      "rdfs:label": "awayTeam",
      "rdfs:subPropertyOf": {
        "@id": "schema:competitor"
      },
      "schema:domainIncludes": {
        "@id": "schema:SportsEvent"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:SportsTeam"
        }
      ]
    },
    {
      "@id": "schema:maps",
      "@type": "rdf:Property",
      "rdfs:comment": "A URL to a map of the place.",
      "rdfs:label": "maps",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:supersededBy": {
        "@id": "schema:hasMap"
      }
    },
    {
      "@id": "schema:serviceOperator",
      "@type": "rdf:Property",
      "rdfs:comment": "The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.",
      "rdfs:label": "serviceOperator",
      "schema:domainIncludes": {
        "@id": "schema:GovernmentService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:warrantyScope",
      "@type": "rdf:Property",
      "rdfs:comment": "The scope of the warranty promise.",
      "rdfs:label": "warrantyScope",
      "schema:domainIncludes": {
        "@id": "schema:WarrantyPromise"
      },
      "schema:rangeIncludes": {
        "@id": "schema:WarrantyScope"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:physiologicalBenefits",
      "@type": "rdf:Property",
      "rdfs:comment": "Specific physiologic benefits associated to the plan.",
      "rdfs:label": "physiologicalBenefits",
      "schema:domainIncludes": {
        "@id": "schema:Diet"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EventVenue",
      "@type": "rdfs:Class",
      "rdfs:comment": "An event venue.",
      "rdfs:label": "EventVenue",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:PotentialActionStatus",
      "@type": "schema:ActionStatusType",
      "rdfs:comment": "A description of an action that is supported.",
      "rdfs:label": "PotentialActionStatus"
    },
    {
      "@id": "schema:birthDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Date of birth.",
      "rdfs:label": "birthDate",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:PublicSwimmingPool",
      "@type": "rdfs:Class",
      "rdfs:comment": "A public swimming pool.",
      "rdfs:label": "PublicSwimmingPool",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:byMonthWeek",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.",
      "rdfs:label": "byMonthWeek",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2599"
      }
    },
    {
      "@id": "schema:item",
      "@type": "rdf:Property",
      "rdfs:comment": "An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.",
      "rdfs:label": "item",
      "schema:domainIncludes": [
        {
          "@id": "schema:DataFeedItem"
        },
        {
          "@id": "schema:ListItem"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:validFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The date when the item becomes valid.",
      "rdfs:label": "validFrom",
      "schema:domainIncludes": [
        {
          "@id": "schema:LocationFeatureSpecification"
        },
        {
          "@id": "schema:OpeningHoursSpecification"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Permit"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:PriceSpecification"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:BodyMeasurementHand",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Maximum hand girth (measured over the knuckles of the open right hand excluding thumb, fingers together). Used, for example, to fit gloves.",
      "rdfs:label": "BodyMeasurementHand",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:exerciseRelatedDiet",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The diet used in this action.",
      "rdfs:label": "exerciseRelatedDiet",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Diet"
      }
    },
    {
      "@id": "schema:industry",
      "@type": "rdf:Property",
      "rdfs:comment": "The industry associated with the job position.",
      "rdfs:label": "industry",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ]
    },
    {
      "@id": "schema:hasCategoryCode",
      "@type": "rdf:Property",
      "rdfs:comment": "A Category code contained in this code set.",
      "rdfs:label": "hasCategoryCode",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasDefinedTerm"
      },
      "schema:domainIncludes": {
        "@id": "schema:CategoryCodeSet"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CategoryCode"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:WearableSizeSystemDE",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "German size system for wearables.",
      "rdfs:label": "WearableSizeSystemDE",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:ContactPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Contact page.",
      "rdfs:label": "ContactPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:VideoObjectSnapshot",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.",
      "rdfs:label": "VideoObjectSnapshot",
      "rdfs:subClassOf": {
        "@id": "schema:VideoObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:VirtualLocation",
      "@type": "rdfs:Class",
      "rdfs:comment": "An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.",
      "rdfs:label": "VirtualLocation",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:Pond",
      "@type": "rdfs:Class",
      "rdfs:comment": "A pond.",
      "rdfs:label": "Pond",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:ListPrice",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents the list price (the price a product is actually advertised for) of an offered product.",
      "rdfs:label": "ListPrice",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:audience",
      "@type": "rdf:Property",
      "rdfs:comment": "An intended audience, i.e. a group for whom something was created.",
      "rdfs:label": "audience",
      "schema:domainIncludes": [
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:PlayAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Audience"
      }
    },
    {
      "@id": "schema:cvdNumC19MechVentPats",
      "@type": "rdf:Property",
      "rdfs:comment": "numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.",
      "rdfs:label": "cvdNumC19MechVentPats",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:disambiguatingDescription",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.",
      "rdfs:label": "disambiguatingDescription",
      "rdfs:subPropertyOf": {
        "@id": "schema:description"
      },
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ActionStatusType",
      "@type": "rdfs:Class",
      "rdfs:comment": "The status of an Action.",
      "rdfs:label": "ActionStatusType",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:UserCheckins",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserCheckins",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:IngredientsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content discussing ingredients-related aspects of a health topic.",
      "rdfs:label": "IngredientsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:availableLanguage",
      "@type": "rdf:Property",
      "rdfs:comment": "A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]",
      "rdfs:label": "availableLanguage",
      "schema:domainIncludes": [
        {
          "@id": "schema:ServiceChannel"
        },
        {
          "@id": "schema:TouristAttraction"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:LodgingBusiness"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Language"
        }
      ]
    },
    {
      "@id": "schema:value",
      "@type": "rdf:Property",
      "rdfs:comment": "The value of the quantitative value or property value node.\\n\\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "value",
      "schema:domainIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Boolean"
        },
        {
          "@id": "schema:StructuredValue"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:EmailMessage",
      "@type": "rdfs:Class",
      "rdfs:comment": "An email message.",
      "rdfs:label": "EmailMessage",
      "rdfs:subClassOf": {
        "@id": "schema:Message"
      }
    },
    {
      "@id": "schema:PeopleAudience",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of characteristics belonging to people, e.g. who compose an item's target audience.",
      "rdfs:label": "PeopleAudience",
      "rdfs:subClassOf": {
        "@id": "schema:Audience"
      }
    },
    {
      "@id": "schema:referencesOrder",
      "@type": "rdf:Property",
      "rdfs:comment": "The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.",
      "rdfs:label": "referencesOrder",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Order"
      }
    },
    {
      "@id": "schema:Audience",
      "@type": "rdfs:Class",
      "rdfs:comment": "Intended audience for an item, i.e. the group for whom the item was created.",
      "rdfs:label": "Audience",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:confirmationNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "A number that confirms the given order or payment has been received.",
      "rdfs:label": "confirmationNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:LifestyleModification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.",
      "rdfs:label": "LifestyleModification",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:itemDefectReturnFees",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of return fees for returns of defect products.",
      "rdfs:label": "itemDefectReturnFees",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnFeesEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:SeaBodyOfWater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sea (for example, the Caspian sea).",
      "rdfs:label": "SeaBodyOfWater",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:HowItWorksHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content that discusses and explains how a particular health-related topic works, e.g. in terms of mechanisms and underlying science.",
      "rdfs:label": "HowItWorksHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:alumni",
      "@type": "rdf:Property",
      "rdfs:comment": "Alumni of an organization.",
      "rdfs:label": "alumni",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:EducationalOrganization"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:alumniOf"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:AutoDealer",
      "@type": "rdfs:Class",
      "rdfs:comment": "An car dealership.",
      "rdfs:label": "AutoDealer",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:LoanOrCredit",
      "@type": "rdfs:Class",
      "rdfs:comment": "A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.",
      "rdfs:label": "LoanOrCredit",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialProduct"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:cvdFacilityId",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]] to indicate the county. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.",
      "rdfs:label": "cvdFacilityId",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:HealthInsurancePlan",
      "@type": "rdfs:Class",
      "rdfs:comment": "A US-style health insurance plan, including PPOs, EPOs, and HMOs. ",
      "rdfs:label": "HealthInsurancePlan",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:USNonprofitType",
      "@type": "rdfs:Class",
      "rdfs:comment": "USNonprofitType: Non-profit organization type originating from the United States.",
      "rdfs:label": "USNonprofitType",
      "rdfs:subClassOf": {
        "@id": "schema:NonprofitType"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:firstAppearance",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the first known occurence of a [[Claim]] in some [[CreativeWork]].",
      "rdfs:label": "firstAppearance",
      "rdfs:subPropertyOf": {
        "@id": "schema:workExample"
      },
      "schema:domainIncludes": {
        "@id": "schema:Claim"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1828"
      }
    },
    {
      "@id": "schema:House",
      "@type": "rdfs:Class",
      "rdfs:comment": "A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/House\">http://en.wikipedia.org/wiki/House</a>).",
      "rdfs:label": "House",
      "rdfs:subClassOf": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:sponsor",
      "@type": "rdf:Property",
      "rdfs:comment": "A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
      "rdfs:label": "sponsor",
      "schema:domainIncludes": [
        {
          "@id": "schema:Grant"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:MedicalStudy"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:itemOffered",
      "@type": "rdf:Property",
      "rdfs:comment": "An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.",
      "rdfs:label": "itemOffered",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:offers"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Trip"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:AggregateOffer"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:MenuItem"
        }
      ]
    },
    {
      "@id": "schema:trainingSalary",
      "@type": "rdf:Property",
      "rdfs:comment": "The estimated salary earned while in the program.",
      "rdfs:label": "trainingSalary",
      "schema:domainIncludes": [
        {
          "@id": "schema:WorkBasedProgram"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmountDistribution"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2460"
        }
      ]
    },
    {
      "@id": "schema:afterMedia",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object representing the circumstances after performing this direction.",
      "rdfs:label": "afterMedia",
      "schema:domainIncludes": {
        "@id": "schema:HowToDirection"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:itemListOrder",
      "@type": "rdf:Property",
      "rdfs:comment": "Type of ordering (e.g. Ascending, Descending, Unordered).",
      "rdfs:label": "itemListOrder",
      "schema:domainIncludes": {
        "@id": "schema:ItemList"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ItemListOrderType"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:CollegeOrUniversity",
      "@type": "rdfs:Class",
      "rdfs:comment": "A college, university, or other third-level educational institution.",
      "rdfs:label": "CollegeOrUniversity",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:ResumeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).",
      "rdfs:label": "ResumeAction",
      "rdfs:subClassOf": {
        "@id": "schema:ControlAction"
      }
    },
    {
      "@id": "schema:MerchantReturnUnspecified",
      "@type": "schema:MerchantReturnEnumeration",
      "rdfs:comment": "Specifies that a product return policy is not provided.",
      "rdfs:label": "MerchantReturnUnspecified",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:CheckAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.",
      "rdfs:label": "CheckAction",
      "rdfs:subClassOf": {
        "@id": "schema:FindAction"
      }
    },
    {
      "@id": "schema:monthsOfExperience",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the minimal number of months of experience required for a position.",
      "rdfs:label": "monthsOfExperience",
      "schema:domainIncludes": {
        "@id": "schema:OccupationalExperienceRequirements"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2681"
      }
    },
    {
      "@id": "schema:Article",
      "@type": "rdfs:Class",
      "rdfs:comment": "An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\\n\\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).",
      "rdfs:label": "Article",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:StatisticalPopulation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property [[populationType]] is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]] of East Podunk California, would be described by applying the appropriate [[homeLocation]] and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people.\nThe properties [[numConstraints]] and [[constrainingProperty]] are used to specify which of the populations properties are used to specify the population. Note that the sense of \"population\" used here is the general sense of a statistical\npopulation, and does not imply that the population consists of people. For example, a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.\n  ",
      "rdfs:label": "StatisticalPopulation",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:WearableSizeSystemAU",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Australian size system for wearables.",
      "rdfs:label": "WearableSizeSystemAU",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:LowCalorieDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet focused on reduced calorie intake.",
      "rdfs:label": "LowCalorieDiet"
    },
    {
      "@id": "schema:State",
      "@type": "rdfs:Class",
      "rdfs:comment": "A state or province of a country.",
      "rdfs:label": "State",
      "rdfs:subClassOf": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:steeringPosition",
      "@type": "rdf:Property",
      "rdfs:comment": "The position of the steering wheel or similar device (mostly for cars).",
      "rdfs:label": "steeringPosition",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SteeringPositionValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:recommendationStrength",
      "@type": "rdf:Property",
      "rdfs:comment": "Strength of the guideline's recommendation (e.g. 'class I').",
      "rdfs:label": "recommendationStrength",
      "schema:domainIncludes": {
        "@id": "schema:MedicalGuidelineRecommendation"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PodcastEpisode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single episode of a podcast series.",
      "rdfs:label": "PodcastEpisode",
      "rdfs:subClassOf": {
        "@id": "schema:Episode"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/373"
      }
    },
    {
      "@id": "schema:UserLikes",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserLikes",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:molecularFormula",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "The empirical formula is the simplest whole number ratio of all the atoms in a molecule.",
      "rdfs:label": "molecularFormula",
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:gtin14",
      "@type": "rdf:Property",
      "rdfs:comment": "The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
      "rdfs:label": "gtin14",
      "rdfs:subPropertyOf": [
        {
          "@id": "schema:identifier"
        },
        {
          "@id": "schema:gtin"
        }
      ],
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:lesserOrEqual",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.",
      "rdfs:label": "lesserOrEqual",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:availabilityEnds",
      "@type": "rdf:Property",
      "rdfs:comment": "The end of the availability of the product or service included in the offer.",
      "rdfs:label": "availabilityEnds",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Time"
        },
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1741"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
        }
      ]
    },
    {
      "@id": "schema:WPAdBlock",
      "@type": "rdfs:Class",
      "rdfs:comment": "An advertising section of the page.",
      "rdfs:label": "WPAdBlock",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:TouristDestination",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other [[Place]].  A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.\n  (See examples below).",
      "rdfs:label": "TouristDestination",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it"
        }
      ]
    },
    {
      "@id": "schema:educationalUse",
      "@type": "rdf:Property",
      "rdfs:comment": "The purpose of a work in the context of education; for example, 'assignment', 'group work'.",
      "rdfs:label": "educationalUse",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:LearningResource"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:actionPlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.",
      "rdfs:label": "actionPlatform",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:organizer",
      "@type": "rdf:Property",
      "rdfs:comment": "An organizer of an Event.",
      "rdfs:label": "organizer",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:Beach",
      "@type": "rdfs:Class",
      "rdfs:comment": "Beach.",
      "rdfs:label": "Beach",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:MedicalTrialDesign",
      "@type": "rdfs:Class",
      "rdfs:comment": "Design models for medical trials. Enumerated type.",
      "rdfs:label": "MedicalTrialDesign",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_WikiDoc"
      }
    },
    {
      "@id": "schema:videoFrameSize",
      "@type": "rdf:Property",
      "rdfs:comment": "The frame size of the video.",
      "rdfs:label": "videoFrameSize",
      "schema:domainIncludes": {
        "@id": "schema:VideoObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:TrainStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A train station.",
      "rdfs:label": "TrainStation",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:claimInterpreter",
      "@type": "rdf:Property",
      "rdfs:comment": "For a [[Claim]] interpreted from [[MediaObject]] content\n    sed to indicate a claim contained, implied or refined from the content of a [[MediaObject]].",
      "rdfs:label": "claimInterpreter",
      "schema:domainIncludes": {
        "@id": "schema:Claim"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:greaterOrEqual",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.",
      "rdfs:label": "greaterOrEqual",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:LakeBodyOfWater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A lake (for example, Lake Pontrachain).",
      "rdfs:label": "LakeBodyOfWater",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:actor",
      "@type": "rdf:Property",
      "rdfs:comment": "An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.",
      "rdfs:label": "actor",
      "schema:domainIncludes": [
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:PodcastSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:Episode"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:DecontextualizedContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'missing context' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'missing context': Presenting unaltered video in an inaccurate manner that misrepresents the footage. For example, using incorrect dates or locations, altering the transcript or sharing brief clips from a longer video to mislead viewers. (A video rated 'original' can also be missing context.)\n\nFor an [[ImageObject]] to be 'missing context': Presenting unaltered images in an inaccurate manner to misrepresent the image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a different time or place. (An image rated 'original' can also be missing context.)\n\nFor an [[ImageObject]] with embedded text to be 'missing context': An unaltered image presented in an inaccurate manner to misrepresent the image and mislead the viewer. For example, a common tactic is using an unaltered image but saying it came from a different time or place. (An 'original' image with inaccurate text would generally fall in this category.)\n\nFor an [[AudioObject]] to be 'missing context': Unaltered audio presented in an inaccurate manner that misrepresents it. For example, using incorrect dates or locations, or sharing brief clips from a longer recording to mislead viewers. (Audio rated “original” can also be missing context.)\n",
      "rdfs:label": "DecontextualizedContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:chemicalComposition",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/ChemicalSubstance"
      },
      "rdfs:comment": "The chemical composition describes the identity and relative ratio of the chemical elements that make up the substance.",
      "rdfs:label": "chemicalComposition",
      "schema:domainIncludes": {
        "@id": "schema:ChemicalSubstance"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:deathPlace",
      "@type": "rdf:Property",
      "rdfs:comment": "The place where the person died.",
      "rdfs:label": "deathPlace",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:CompilationAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "CompilationAlbum.",
      "rdfs:label": "CompilationAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:hasHealthAspect",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.",
      "rdfs:label": "hasHealthAspect",
      "schema:domainIncludes": {
        "@id": "schema:HealthTopicContent"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HealthAspectEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:CampingPitch",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or [[Campground]].\\n\\n\nIn British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.\n(Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\\n\\n\nSee also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).\n",
      "rdfs:label": "CampingPitch",
      "rdfs:subClassOf": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:interactionService",
      "@type": "rdf:Property",
      "rdfs:comment": "The WebSite or SoftwareApplication where the interactions took place.",
      "rdfs:label": "interactionService",
      "schema:domainIncludes": {
        "@id": "schema:InteractionCounter"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebSite"
        },
        {
          "@id": "schema:SoftwareApplication"
        }
      ]
    },
    {
      "@id": "schema:Place",
      "@type": "rdfs:Class",
      "rdfs:comment": "Entities that have a somewhat fixed, physical extension.",
      "rdfs:label": "Place",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:TieAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of reaching a draw in a competitive activity.",
      "rdfs:label": "TieAction",
      "rdfs:subClassOf": {
        "@id": "schema:AchieveAction"
      }
    },
    {
      "@id": "schema:workFeatured",
      "@type": "rdf:Property",
      "rdfs:comment": "A work featured in some event, e.g. exhibited in an ExhibitionEvent.\n       Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).",
      "rdfs:label": "workFeatured",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:floorLevel",
      "@type": "rdf:Property",
      "rdfs:comment": "The floor level for an [[Accommodation]] in a multi-storey building. Since counting\n  systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system should be used where possible.",
      "rdfs:label": "floorLevel",
      "schema:domainIncludes": {
        "@id": "schema:Accommodation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:paymentAccepted",
      "@type": "rdf:Property",
      "rdfs:comment": "Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.",
      "rdfs:label": "paymentAccepted",
      "schema:domainIncludes": {
        "@id": "schema:LocalBusiness"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:events",
      "@type": "rdf:Property",
      "rdfs:comment": "Upcoming or past events associated with this place or organization.",
      "rdfs:label": "events",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      },
      "schema:supersededBy": {
        "@id": "schema:event"
      }
    },
    {
      "@id": "schema:bookingAgent",
      "@type": "rdf:Property",
      "rdfs:comment": "'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.",
      "rdfs:label": "bookingAgent",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:broker"
      }
    },
    {
      "@id": "schema:seatRow",
      "@type": "rdf:Property",
      "rdfs:comment": "The row location of the reserved seat (e.g., B).",
      "rdfs:label": "seatRow",
      "schema:domainIncludes": {
        "@id": "schema:Seat"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Toxicologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with poisons, their nature, effects and detection and involved in the treatment of poisoning.",
      "rdfs:label": "Toxicologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:eventAttendanceMode",
      "@type": "rdf:Property",
      "rdfs:comment": "The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.",
      "rdfs:label": "eventAttendanceMode",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EventAttendanceModeEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:byMonth",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-12. January is 1.",
      "rdfs:label": "byMonth",
      "schema:domainIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:isUnlabelledFallback",
      "@type": "rdf:Property",
      "rdfs:comment": "This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.",
      "rdfs:label": "isUnlabelledFallback",
      "schema:domainIncludes": [
        {
          "@id": "schema:ShippingRateSettings"
        },
        {
          "@id": "schema:DeliveryTimeSettings"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:GeneralContractor",
      "@type": "rdfs:Class",
      "rdfs:comment": "A general contractor.",
      "rdfs:label": "GeneralContractor",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:dosageForm",
      "@type": "rdf:Property",
      "rdfs:comment": "A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.",
      "rdfs:label": "dosageForm",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:MedicalRiskScore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.",
      "rdfs:label": "MedicalRiskScore",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalRiskEstimator"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:buyer",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The participant/person/organization that bought the object.",
      "rdfs:label": "buyer",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:SellAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:lastReviewed",
      "@type": "rdf:Property",
      "rdfs:comment": "Date on which the content on this web page was last reviewed for accuracy and/or completeness.",
      "rdfs:label": "lastReviewed",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:OnlineFull",
      "@type": "schema:GameServerStatus",
      "rdfs:comment": "Game server status: OnlineFull. Server is online but unavailable. The maximum number of players has reached.",
      "rdfs:label": "OnlineFull"
    },
    {
      "@id": "schema:steps",
      "@type": "rdf:Property",
      "rdfs:comment": "A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).",
      "rdfs:label": "steps",
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToSection"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:step"
      }
    },
    {
      "@id": "schema:serviceArea",
      "@type": "rdf:Property",
      "rdfs:comment": "The geographic area where the service is provided.",
      "rdfs:label": "serviceArea",
      "schema:domainIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:AdministrativeArea"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:areaServed"
      }
    },
    {
      "@id": "schema:PreOrderAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent orders a (not yet released) object/product/service to be delivered/sent.",
      "rdfs:label": "PreOrderAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1125"
      }
    },
    {
      "@id": "schema:ItemListOrderAscending",
      "@type": "schema:ItemListOrderType",
      "rdfs:comment": "An ItemList ordered with lower values listed first.",
      "rdfs:label": "ItemListOrderAscending"
    },
    {
      "@id": "schema:InternationalTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "An international trial.",
      "rdfs:label": "InternationalTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:marginOfError",
      "@type": "rdf:Property",
      "rdfs:comment": "A marginOfError for an [[Observation]].",
      "rdfs:label": "marginOfError",
      "schema:domainIncludes": {
        "@id": "schema:Observation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:NoteDigitalDocument",
      "@type": "rdfs:Class",
      "rdfs:comment": "A file containing a note, primarily for the author.",
      "rdfs:label": "NoteDigitalDocument",
      "rdfs:subClassOf": {
        "@id": "schema:DigitalDocument"
      }
    },
    {
      "@id": "schema:gettingTestedInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about getting tested (for a [[MedicalCondition]]), e.g. in the context of a pandemic.",
      "rdfs:label": "gettingTestedInfo",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:WebContent"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:CssSelectorType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Text representing a CSS selector.",
      "rdfs:label": "CssSelectorType",
      "rdfs:subClassOf": {
        "@id": "schema:Text"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1672"
      }
    },
    {
      "@id": "schema:exerciseType",
      "@type": "rdf:Property",
      "rdfs:comment": "Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.",
      "rdfs:label": "exerciseType",
      "schema:domainIncludes": [
        {
          "@id": "schema:ExercisePlan"
        },
        {
          "@id": "schema:ExerciseAction"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:WarrantyScope",
      "@type": "rdfs:Class",
      "rdfs:comment": "A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#Labor-BringIn\\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp\n      ",
      "rdfs:label": "WarrantyScope",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:dropoffLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "Where a rental car can be dropped off.",
      "rdfs:label": "dropoffLocation",
      "schema:domainIncludes": {
        "@id": "schema:RentalCarReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:imagingTechnique",
      "@type": "rdf:Property",
      "rdfs:comment": "Imaging technique used.",
      "rdfs:label": "imagingTechnique",
      "schema:domainIncludes": {
        "@id": "schema:ImagingTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalImagingTechnique"
      }
    },
    {
      "@id": "schema:mainContentOfPage",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates if this web page element is the main subject of the page.",
      "rdfs:label": "mainContentOfPage",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:sdDatePublished",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]",
      "rdfs:label": "sdDatePublished",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1886"
      }
    },
    {
      "@id": "schema:Neurologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that studies the nerves and nervous system and its respective disease states.",
      "rdfs:label": "Neurologic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:BoardingPolicyType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of boarding policy used by an airline.",
      "rdfs:label": "BoardingPolicyType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:PodcastSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A podcast is an episodic series of digital audio or video files which a user can download and listen to.",
      "rdfs:label": "PodcastSeries",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/373"
      }
    },
    {
      "@id": "schema:Property",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "rdf:Property"
      },
      "rdfs:comment": "A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.",
      "rdfs:label": "Property",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      }
    },
    {
      "@id": "schema:PublicToilet",
      "@type": "rdfs:Class",
      "rdfs:comment": "A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.",
      "rdfs:label": "PublicToilet",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1624"
      }
    },
    {
      "@id": "schema:MedicalAudience",
      "@type": "rdfs:Class",
      "rdfs:comment": "Target audiences for medical web pages.",
      "rdfs:label": "MedicalAudience",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Audience"
        },
        {
          "@id": "schema:PeopleAudience"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:chemicalRole",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/ChemicalSubstance"
      },
      "rdfs:comment": "A role played by the BioChemEntity within a chemical context.",
      "rdfs:label": "chemicalRole",
      "schema:domainIncludes": [
        {
          "@id": "schema:ChemicalSubstance"
        },
        {
          "@id": "schema:MolecularEntity"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DefinedTerm"
      }
    },
    {
      "@id": "schema:highPrice",
      "@type": "rdf:Property",
      "rdfs:comment": "The highest price of all offers available.\\n\\nUsage guidelines:\\n\\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.",
      "rdfs:label": "highPrice",
      "schema:domainIncludes": {
        "@id": "schema:AggregateOffer"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:labelDetails",
      "@type": "rdf:Property",
      "rdfs:comment": "Link to the drug's label details.",
      "rdfs:label": "labelDetails",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:constrainingProperty",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a property used as a constraint to define a [[StatisticalPopulation]] with respect to the set of entities\n  corresponding to an indicated type (via [[populationType]]).",
      "rdfs:label": "constrainingProperty",
      "schema:domainIncludes": {
        "@id": "schema:StatisticalPopulation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:numberOfPreviousOwners",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of owners of the vehicle, including the current one.\\n\\nTypical unit code(s): C62",
      "rdfs:label": "numberOfPreviousOwners",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:associatedReview",
      "@type": "rdf:Property",
      "rdfs:comment": "An associated [[Review]].",
      "rdfs:label": "associatedReview",
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:dietFeatures",
      "@type": "rdf:Property",
      "rdfs:comment": "Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines.",
      "rdfs:label": "dietFeatures",
      "schema:domainIncludes": {
        "@id": "schema:Diet"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:partOfEpisode",
      "@type": "rdf:Property",
      "rdfs:comment": "The episode to which this clip belongs.",
      "rdfs:label": "partOfEpisode",
      "rdfs:subPropertyOf": {
        "@id": "schema:isPartOf"
      },
      "schema:domainIncludes": {
        "@id": "schema:Clip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Episode"
      }
    },
    {
      "@id": "schema:gameTip",
      "@type": "rdf:Property",
      "rdfs:comment": "Links to tips, tactics, etc.",
      "rdfs:label": "gameTip",
      "schema:domainIncludes": {
        "@id": "schema:VideoGame"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:employmentUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.",
      "rdfs:label": "employmentUnit",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2296"
      }
    },
    {
      "@id": "schema:floorSize",
      "@type": "rdf:Property",
      "rdfs:comment": "The size of the accommodation, e.g. in square meter or squarefoot.\nTypical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard ",
      "rdfs:label": "floorSize",
      "schema:domainIncludes": [
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:Accommodation"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:priceComponent",
      "@type": "rdf:Property",
      "rdfs:comment": "This property links to all [[UnitPriceSpecification]] nodes that apply in parallel for the [[CompoundPriceSpecification]] node.",
      "rdfs:label": "priceComponent",
      "schema:domainIncludes": {
        "@id": "schema:CompoundPriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:email",
      "@type": "rdf:Property",
      "rdfs:comment": "Email address.",
      "rdfs:label": "email",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:ContactPoint"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:relatedAnatomy",
      "@type": "rdf:Property",
      "rdfs:comment": "Anatomical systems or structures that relate to the superficial anatomy.",
      "rdfs:label": "relatedAnatomy",
      "schema:domainIncludes": {
        "@id": "schema:SuperficialAnatomy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:AnatomicalSystem"
        }
      ]
    },
    {
      "@id": "schema:holdingArchive",
      "@type": "rdf:Property",
      "rdfs:comment": {
        "@language": "en",
        "@value": "[[ArchiveOrganization]] that holds, keeps or maintains the [[ArchiveComponent]]."
      },
      "rdfs:label": {
        "@language": "en",
        "@value": "holdingArchive"
      },
      "schema:domainIncludes": {
        "@id": "schema:ArchiveComponent"
      },
      "schema:inverseOf": {
        "@id": "schema:archiveHeld"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ArchiveOrganization"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1758"
      }
    },
    {
      "@id": "schema:taxID",
      "@type": "rdf:Property",
      "rdfs:comment": "The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.",
      "rdfs:label": "taxID",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:supply",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub-property of instrument. A supply consumed when performing instructions or a direction.",
      "rdfs:label": "supply",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:HowTo"
        },
        {
          "@id": "schema:HowToDirection"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:HowToSupply"
        }
      ]
    },
    {
      "@id": "schema:stepValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.",
      "rdfs:label": "stepValue",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:LaboratoryScience",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A medical science pertaining to chemical, hematological, immunologic, microscopic, or bacteriological diagnostic analyses or research.",
      "rdfs:label": "LaboratoryScience",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:superEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.",
      "rdfs:label": "superEvent",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:inverseOf": {
        "@id": "schema:subEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:BroadcastChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A unique instance of a BroadcastService on a CableOrSatelliteService lineup.",
      "rdfs:label": "BroadcastChannel",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:alternativeOf",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Gene"
      },
      "rdfs:comment": "Another gene which is a variation of this one.",
      "rdfs:label": "alternativeOf",
      "schema:domainIncludes": {
        "@id": "schema:Gene"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Gene"
      }
    },
    {
      "@id": "schema:hasEnergyEfficiencyCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no certification) for a product according to an international energy efficiency standard.",
      "rdfs:label": "hasEnergyEfficiencyCategory",
      "schema:domainIncludes": {
        "@id": "schema:EnergyConsumptionDetails"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EnergyEfficiencyEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:baseSalary",
      "@type": "rdf:Property",
      "rdfs:comment": "The base salary of the job or of an employee in an EmployeeRole.",
      "rdfs:label": "baseSalary",
      "schema:domainIncludes": [
        {
          "@id": "schema:EmployeeRole"
        },
        {
          "@id": "schema:JobPosting"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PriceSpecification"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:hasOccupation",
      "@type": "rdf:Property",
      "rdfs:comment": "The Person's occupation. For past professions, use Role for expressing dates.",
      "rdfs:label": "hasOccupation",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Occupation"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:isPlanForApartment",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates some accommodation that this floor plan describes.",
      "rdfs:label": "isPlanForApartment",
      "schema:domainIncludes": {
        "@id": "schema:FloorPlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Accommodation"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:AllergiesHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about the allergy-related aspects of a health topic.",
      "rdfs:label": "AllergiesHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:spatialCoverage",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/spatial"
      },
      "rdfs:comment": "The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of\n      contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates\n      areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.",
      "rdfs:label": "spatialCoverage",
      "rdfs:subPropertyOf": {
        "@id": "schema:contentLocation"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:propertyID",
      "@type": "rdf:Property",
      "rdfs:comment": "A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be\n(1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)\na URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).\nStandards bodies should promote a standard prefix for the identifiers of properties from their standards.",
      "rdfs:label": "propertyID",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValue"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:ReplyAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of responding to a question/message asked/sent by the object. Related to [[AskAction]]\\n\\nRelated actions:\\n\\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.",
      "rdfs:label": "ReplyAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:VisualArtwork",
      "@type": "rdfs:Class",
      "rdfs:comment": "A work of art that is primarily visual in character.",
      "rdfs:label": "VisualArtwork",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_VisualArtworkClass"
      }
    },
    {
      "@id": "schema:ConvenienceStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A convenience store.",
      "rdfs:label": "ConvenienceStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:UserPageVisits",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserPageVisits",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:costPerUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "The cost per unit of the drug.",
      "rdfs:label": "costPerUnit",
      "schema:domainIncludes": {
        "@id": "schema:DrugCost"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:quest",
      "@type": "rdf:Property",
      "rdfs:comment": "The task that a player-controlled character, or group of characters may complete in order to gain a reward.",
      "rdfs:label": "quest",
      "schema:domainIncludes": [
        {
          "@id": "schema:Game"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:toLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The final location of the object or the agent after the action.",
      "rdfs:label": "toLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:MoveAction"
        },
        {
          "@id": "schema:TransferAction"
        },
        {
          "@id": "schema:ExerciseAction"
        },
        {
          "@id": "schema:InsertAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:workPerformed",
      "@type": "rdf:Property",
      "rdfs:comment": "A work performed in some event, for example a play performed in a TheaterEvent.",
      "rdfs:label": "workPerformed",
      "rdfs:subPropertyOf": {
        "@id": "schema:workFeatured"
      },
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:geoOverlaps",
      "@type": "rdf:Property",
      "rdfs:comment": "Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
      "rdfs:label": "geoOverlaps",
      "schema:domainIncludes": [
        {
          "@id": "schema:GeospatialGeometry"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeospatialGeometry"
        }
      ]
    },
    {
      "@id": "schema:countriesNotSupported",
      "@type": "rdf:Property",
      "rdfs:comment": "Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.",
      "rdfs:label": "countriesNotSupported",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:broadcastAffiliateOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The media network(s) whose content is broadcast on this station.",
      "rdfs:label": "broadcastAffiliateOf",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:GovernmentBenefitsType",
      "@type": "rdfs:Class",
      "rdfs:comment": "GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.",
      "rdfs:label": "GovernmentBenefitsType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:healthPlanDrugTier",
      "@type": "rdf:Property",
      "rdfs:comment": "The tier(s) of drugs offered by this formulary or insurance plan.",
      "rdfs:label": "healthPlanDrugTier",
      "schema:domainIncludes": [
        {
          "@id": "schema:HealthInsurancePlan"
        },
        {
          "@id": "schema:HealthPlanFormulary"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:OutletStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "An outlet store.",
      "rdfs:label": "OutletStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:successorOf",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer from a newer variant of a product  to its previous, often discontinued predecessor.",
      "rdfs:label": "successorOf",
      "schema:domainIncludes": {
        "@id": "schema:ProductModel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ProductModel"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:gameItem",
      "@type": "rdf:Property",
      "rdfs:comment": "An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.",
      "rdfs:label": "gameItem",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:Game"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:hasCourseInstance",
      "@type": "rdf:Property",
      "rdfs:comment": "An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.",
      "rdfs:label": "hasCourseInstance",
      "schema:domainIncludes": {
        "@id": "schema:Course"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CourseInstance"
      }
    },
    {
      "@id": "schema:VideoObject",
      "@type": "rdfs:Class",
      "rdfs:comment": "A video file.",
      "rdfs:label": "VideoObject",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:ReplaceAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of editing a recipient by replacing an old object with a new object.",
      "rdfs:label": "ReplaceAction",
      "rdfs:subClassOf": {
        "@id": "schema:UpdateAction"
      }
    },
    {
      "@id": "schema:AutomatedTeller",
      "@type": "rdfs:Class",
      "rdfs:comment": "ATM/cash machine.",
      "rdfs:label": "AutomatedTeller",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialService"
      }
    },
    {
      "@id": "schema:ApplyAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of registering to an organization/service without the guarantee to receive it.\\n\\nRelated actions:\\n\\n* [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.",
      "rdfs:label": "ApplyAction",
      "rdfs:subClassOf": {
        "@id": "schema:OrganizeAction"
      }
    },
    {
      "@id": "schema:appearance",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates an occurence of a [[Claim]] in some [[CreativeWork]].",
      "rdfs:label": "appearance",
      "rdfs:subPropertyOf": {
        "@id": "schema:workExample"
      },
      "schema:domainIncludes": {
        "@id": "schema:Claim"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1828"
      }
    },
    {
      "@id": "schema:MusicGroup",
      "@type": "rdfs:Class",
      "rdfs:comment": "A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.",
      "rdfs:label": "MusicGroup",
      "rdfs:subClassOf": {
        "@id": "schema:PerformingGroup"
      }
    },
    {
      "@id": "schema:guidelineDate",
      "@type": "rdf:Property",
      "rdfs:comment": "Date on which this guideline's recommendation was made.",
      "rdfs:label": "guidelineDate",
      "schema:domainIncludes": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      }
    },
    {
      "@id": "schema:letterer",
      "@type": "rdf:Property",
      "rdfs:comment": "The individual who adds lettering, including speech balloons and sound effects, to artwork.",
      "rdfs:label": "letterer",
      "schema:domainIncludes": [
        {
          "@id": "schema:ComicStory"
        },
        {
          "@id": "schema:ComicIssue"
        },
        {
          "@id": "schema:VisualArtwork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:accelerationTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\\n\\nTypical unit code(s): SEC for seconds\\n\\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use \"SEC\" for seconds and indicate the velocities in the [[name]] of the [[QuantitativeValue]], or use [[valueReference]] with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to specify the reference speeds.",
      "rdfs:label": "accelerationTime",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:foodEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The specific food event where the action occurred.",
      "rdfs:label": "foodEvent",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:CookAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:FoodEvent"
      }
    },
    {
      "@id": "schema:tocContinuation",
      "@type": "rdf:Property",
      "rdfs:comment": "A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]] that would be the default next item to play or render.",
      "rdfs:label": "tocContinuation",
      "schema:domainIncludes": {
        "@id": "schema:HyperTocEntry"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HyperTocEntry"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2766"
      }
    },
    {
      "@id": "schema:recordLabel",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/mo/label"
      },
      "rdfs:comment": "The label that issued the release.",
      "rdfs:label": "recordLabel",
      "schema:domainIncludes": {
        "@id": "schema:MusicRelease"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:ItemPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A page devoted to a single item, such as a particular product or hotel.",
      "rdfs:label": "ItemPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:doseUnit",
      "@type": "rdf:Property",
      "rdfs:comment": "The unit of the dose, e.g. 'mg'.",
      "rdfs:label": "doseUnit",
      "schema:domainIncludes": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:securityScreening",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of security screening the passenger is subject to.",
      "rdfs:label": "securityScreening",
      "schema:domainIncludes": {
        "@id": "schema:FlightReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:material",
      "@type": "rdf:Property",
      "rdfs:comment": "A material that something is made from, e.g. leather, wool, cotton, paper.",
      "rdfs:label": "material",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:downPayment",
      "@type": "rdf:Property",
      "rdfs:comment": "a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price.",
      "rdfs:label": "downPayment",
      "schema:domainIncludes": {
        "@id": "schema:RepaymentSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:realEstateAgent",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The real estate agent involved in the action.",
      "rdfs:label": "realEstateAgent",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:RentAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:RealEstateAgent"
      }
    },
    {
      "@id": "schema:HardwareStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hardware store.",
      "rdfs:label": "HardwareStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:endOffset",
      "@type": "rdf:Property",
      "rdfs:comment": "The end time of the clip expressed as the number of seconds from the beginning of the work.",
      "rdfs:label": "endOffset",
      "schema:domainIncludes": {
        "@id": "schema:Clip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:HyperTocEntry"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2021"
      }
    },
    {
      "@id": "schema:UnemploymentSupport",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "UnemploymentSupport: this is a benefit for unemployment support.",
      "rdfs:label": "UnemploymentSupport",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:artform",
      "@type": "rdf:Property",
      "rdfs:comment": "e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.",
      "rdfs:label": "artform",
      "schema:domainIncludes": {
        "@id": "schema:VisualArtwork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:isInvolvedInBiologicalProcess",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/BioChemEntity"
      },
      "rdfs:comment": "Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.",
      "rdfs:label": "isInvolvedInBiologicalProcess",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ]
    },
    {
      "@id": "schema:MedicalRiskCalculator",
      "@type": "rdfs:Class",
      "rdfs:comment": "A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.",
      "rdfs:label": "MedicalRiskCalculator",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalRiskEstimator"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:hasOfferCatalog",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates an OfferCatalog listing for this Organization, Person, or Service.",
      "rdfs:label": "hasOfferCatalog",
      "schema:domainIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:OfferCatalog"
      }
    },
    {
      "@id": "schema:Locksmith",
      "@type": "rdfs:Class",
      "rdfs:comment": "A locksmith.",
      "rdfs:label": "Locksmith",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:numberOfEmployees",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of employees in an organization e.g. business.",
      "rdfs:label": "numberOfEmployees",
      "schema:domainIncludes": [
        {
          "@id": "schema:BusinessAudience"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      }
    },
    {
      "@id": "schema:recordedIn",
      "@type": "rdf:Property",
      "rdfs:comment": "The CreativeWork that captured all or part of this Event.",
      "rdfs:label": "recordedIn",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:inverseOf": {
        "@id": "schema:recordedAt"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:ActiveActionStatus",
      "@type": "schema:ActionStatusType",
      "rdfs:comment": "An in-progress action (e.g, while watching the movie, or driving to a location).",
      "rdfs:label": "ActiveActionStatus"
    },
    {
      "@id": "schema:subStageSuffix",
      "@type": "rdf:Property",
      "rdfs:comment": "The substage, e.g. 'a' for Stage IIIa.",
      "rdfs:label": "subStageSuffix",
      "schema:domainIncludes": {
        "@id": "schema:MedicalConditionStage"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ReservationStatusType",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerated status values for Reservation.",
      "rdfs:label": "ReservationStatusType",
      "rdfs:subClassOf": {
        "@id": "schema:StatusEnumeration"
      }
    },
    {
      "@id": "schema:arrivalTerminal",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifier of the flight's arrival terminal.",
      "rdfs:label": "arrivalTerminal",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:AudioObjectSnapshot",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.",
      "rdfs:label": "AudioObjectSnapshot",
      "rdfs:subClassOf": {
        "@id": "schema:AudioObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:ReturnInStore",
      "@type": "schema:ReturnMethodEnumeration",
      "rdfs:comment": "Specifies that product returns must be made in a store.",
      "rdfs:label": "ReturnInStore",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:seasonNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "Position of the season within an ordered group of seasons.",
      "rdfs:label": "seasonNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:position"
      },
      "schema:domainIncludes": {
        "@id": "schema:CreativeWorkSeason"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Integer"
        }
      ]
    },
    {
      "@id": "schema:SeekToAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically represented with a URL template structure.",
      "rdfs:label": "SeekToAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2722"
      }
    },
    {
      "@id": "schema:suggestedAnswer",
      "@type": "rdf:Property",
      "rdfs:comment": "An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.",
      "rdfs:label": "suggestedAnswer",
      "schema:domainIncludes": {
        "@id": "schema:Question"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Answer"
        },
        {
          "@id": "schema:ItemList"
        }
      ]
    },
    {
      "@id": "schema:MedicalGuidelineRecommendation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.",
      "rdfs:label": "MedicalGuidelineRecommendation",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:HealthAndBeautyBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "Health and beauty.",
      "rdfs:label": "HealthAndBeautyBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:TattooParlor",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tattoo parlor.",
      "rdfs:label": "TattooParlor",
      "rdfs:subClassOf": {
        "@id": "schema:HealthAndBeautyBusiness"
      }
    },
    {
      "@id": "schema:DonateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of providing goods, services, or money without compensation, often for philanthropic reasons.",
      "rdfs:label": "DonateAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:UsageOrScheduleHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about how, when, frequency and dosage of a topic.",
      "rdfs:label": "UsageOrScheduleHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:salaryUponCompletion",
      "@type": "rdf:Property",
      "rdfs:comment": "The expected salary upon completing the training.",
      "rdfs:label": "salaryUponCompletion",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmountDistribution"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:inChIKey",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).",
      "rdfs:label": "inChIKey",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasRepresentation"
      },
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Guide",
      "@type": "rdfs:Class",
      "rdfs:comment": "[[Guide]] is a page or article that recommend specific products or services, or aspects of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may represent a Ranked List and recommend specific products or services with ranking.",
      "rdfs:label": "Guide",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2405"
      }
    },
    {
      "@id": "schema:activityDuration",
      "@type": "rdf:Property",
      "rdfs:comment": "Length of time to engage in the activity.",
      "rdfs:label": "activityDuration",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Duration"
        }
      ]
    },
    {
      "@id": "schema:sportsEvent",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The sports event where this action occurred.",
      "rdfs:label": "sportsEvent",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SportsEvent"
      }
    },
    {
      "@id": "schema:AddAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of editing by adding an object to a collection.",
      "rdfs:label": "AddAction",
      "rdfs:subClassOf": {
        "@id": "schema:UpdateAction"
      }
    },
    {
      "@id": "schema:infectiousAgent",
      "@type": "rdf:Property",
      "rdfs:comment": "The actual infectious agent, such as a specific bacterium.",
      "rdfs:label": "infectiousAgent",
      "schema:domainIncludes": {
        "@id": "schema:InfectiousDisease"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BoatTerminal",
      "@type": "rdfs:Class",
      "rdfs:comment": "A terminal for boats, ships, and other water vessels.",
      "rdfs:label": "BoatTerminal",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1755"
      }
    },
    {
      "@id": "schema:validThrough",
      "@type": "rdf:Property",
      "rdfs:comment": "The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.",
      "rdfs:label": "validThrough",
      "schema:domainIncludes": [
        {
          "@id": "schema:LocationFeatureSpecification"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:OpeningHoursSpecification"
        },
        {
          "@id": "schema:JobPosting"
        },
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PriceSpecification"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:MedicalProcedure",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/50731006"
      },
      "rdfs:comment": "A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.",
      "rdfs:label": "MedicalProcedure",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:VeganDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet exclusive of all animal products.",
      "rdfs:label": "VeganDiet"
    },
    {
      "@id": "schema:DigitalDocument",
      "@type": "rdfs:Class",
      "rdfs:comment": "An electronic file or document.",
      "rdfs:label": "DigitalDocument",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:Nonprofit501c6",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c6: Non-profit type referring to Business Leagues, Chambers of Commerce, Real Estate Boards.",
      "rdfs:label": "Nonprofit501c6",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:acceptsReservations",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.",
      "rdfs:label": "acceptsReservations",
      "schema:domainIncludes": {
        "@id": "schema:FoodEstablishment"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Boolean"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:PublicHolidays",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "This stands for any day that is a public holiday; it is a placeholder for all official public holidays in some particular location. While not technically a \"day of the week\", it can be used with [[OpeningHoursSpecification]]. In the context of an opening hours specification it can be used to indicate opening hours on public holidays, overriding general opening hours for the day of the week on which a public holiday occurs.",
      "rdfs:label": "PublicHolidays",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:variantCover",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the variant cover\n    \tfor the issue, if the issue is a variant printing. For example, \"Bryan Hitch\n    \tVariant Cover\" or \"2nd Printing Variant\".",
      "rdfs:label": "variantCover",
      "schema:domainIncludes": {
        "@id": "schema:ComicIssue"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Cardiovascular",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of heart and vasculature.",
      "rdfs:label": "Cardiovascular",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Intangible",
      "@type": "rdfs:Class",
      "rdfs:comment": "A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.",
      "rdfs:label": "Intangible",
      "rdfs:subClassOf": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:knows",
      "@type": "rdf:Property",
      "rdfs:comment": "The most generic bi-directional social/work relation.",
      "rdfs:label": "knows",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:timeOfDay",
      "@type": "rdf:Property",
      "rdfs:comment": "The time of day the program normally runs. For example, \"evenings\".",
      "rdfs:label": "timeOfDay",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:MedicalGuideline",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.",
      "rdfs:label": "MedicalGuideline",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:workHours",
      "@type": "rdf:Property",
      "rdfs:comment": "The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).",
      "rdfs:label": "workHours",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:isRelatedTo",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to another, somehow related product (or multiple products).",
      "rdfs:label": "isRelatedTo",
      "schema:domainIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:AudioObject",
      "@type": "rdfs:Class",
      "rdfs:comment": "An audio file.",
      "rdfs:label": "AudioObject",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:IndividualProduct",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single, identifiable product instance (e.g. a laptop with a particular serial number).",
      "rdfs:label": "IndividualProduct",
      "rdfs:subClassOf": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:MusculoskeletalExam",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Musculoskeletal system clinical examination.",
      "rdfs:label": "MusculoskeletalExam",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:reviewBody",
      "@type": "rdf:Property",
      "rdfs:comment": "The actual body of the review.",
      "rdfs:label": "reviewBody",
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:yearlyRevenue",
      "@type": "rdf:Property",
      "rdfs:comment": "The size of the business in annual revenue.",
      "rdfs:label": "yearlyRevenue",
      "schema:domainIncludes": {
        "@id": "schema:BusinessAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      }
    },
    {
      "@id": "schema:MotorizedBicycle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.",
      "rdfs:label": "MotorizedBicycle",
      "rdfs:subClassOf": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:ItemAvailability",
      "@type": "rdfs:Class",
      "rdfs:comment": "A list of possible product availability options.",
      "rdfs:label": "ItemAvailability",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      }
    },
    {
      "@id": "schema:inProductGroupWithID",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]]. ",
      "rdfs:label": "inProductGroupWithID",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:SocialMediaPosting",
      "@type": "rdfs:Class",
      "rdfs:comment": "A post to a social media platform, including blog posts, tweets, Facebook posts, etc.",
      "rdfs:label": "SocialMediaPosting",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      }
    },
    {
      "@id": "schema:numberOfPlayers",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicate how many people can play this game (minimum, maximum, or range).",
      "rdfs:label": "numberOfPlayers",
      "schema:domainIncludes": [
        {
          "@id": "schema:Game"
        },
        {
          "@id": "schema:VideoGameSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      }
    },
    {
      "@id": "schema:OfflinePermanently",
      "@type": "schema:GameServerStatus",
      "rdfs:comment": "Game server status: OfflinePermanently. Server is offline and not available.",
      "rdfs:label": "OfflinePermanently"
    },
    {
      "@id": "schema:coursePrerequisites",
      "@type": "rdf:Property",
      "rdfs:comment": "Requirements for taking the Course. May be completion of another [[Course]] or a textual description like \"permission of instructor\". Requirements may be a pre-requisite competency, referenced using [[AlignmentObject]].",
      "rdfs:label": "coursePrerequisites",
      "schema:domainIncludes": {
        "@id": "schema:Course"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Course"
        },
        {
          "@id": "schema:AlignmentObject"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:AggregateOffer",
      "@type": "rdfs:Class",
      "rdfs:comment": "When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\\n\\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.",
      "rdfs:label": "AggregateOffer",
      "rdfs:subClassOf": {
        "@id": "schema:Offer"
      }
    },
    {
      "@id": "schema:Poster",
      "@type": "rdfs:Class",
      "rdfs:comment": "A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.",
      "rdfs:label": "Poster",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1448"
      }
    },
    {
      "@id": "schema:embedUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an ```embed``` tag and should not be the same as the content of the ```loc``` tag.",
      "rdfs:label": "embedUrl",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:CourseInstance",
      "@type": "rdfs:Class",
      "rdfs:comment": "An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.",
      "rdfs:label": "CourseInstance",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:experienceInPlaceOfEducation",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.",
      "rdfs:label": "experienceInPlaceOfEducation",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2681"
      }
    },
    {
      "@id": "schema:arterialBranch",
      "@type": "rdf:Property",
      "rdfs:comment": "The branches that comprise the arterial structure.",
      "rdfs:label": "arterialBranch",
      "schema:domainIncludes": {
        "@id": "schema:Artery"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:FDAcategoryC",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation by the US FDA signifying that animal reproduction studies have shown an adverse effect on the fetus and there are no adequate and well-controlled studies in humans, but potential benefits may warrant use of the drug in pregnant women despite potential risks.",
      "rdfs:label": "FDAcategoryC",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:weightTotal",
      "@type": "rdf:Property",
      "rdfs:comment": "The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.\\n\\nTypical unit code(s): KGM for kilogram, LBR for pound\\n\\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "weightTotal",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:orderNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The identifier of the transaction.",
      "rdfs:label": "orderNumber",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:FourWheelDriveConfiguration",
      "@type": "schema:DriveWheelConfigurationValue",
      "rdfs:comment": "Four-wheel drive is a transmission layout where the engine primarily drives two wheels with a part-time four-wheel drive capability.",
      "rdfs:label": "FourWheelDriveConfiguration",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:legislationApplies",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#implements"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#implements"
      },
      "rdfs:comment": "Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the <a href=\"/legislationTransposes\">legislationTransposes</a> property. For example an informative consolidated law of a European Union's member state \"applies\" the consolidated version of the European Directive implemented in it.",
      "rdfs:label": "legislationApplies",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:accommodationFloorPlan",
      "@type": "rdf:Property",
      "rdfs:comment": "A floorplan of some [[Accommodation]].",
      "rdfs:label": "accommodationFloorPlan",
      "schema:domainIncludes": [
        {
          "@id": "schema:Residence"
        },
        {
          "@id": "schema:Accommodation"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:FloorPlan"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:ReturnByMail",
      "@type": "schema:ReturnMethodEnumeration",
      "rdfs:comment": "Specifies that product returns must to be done by mail.",
      "rdfs:label": "ReturnByMail",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:interactionCount",
      "@type": "rdf:Property",
      "rdfs:comment": "This property is deprecated, alongside the UserInteraction types on which it depended.",
      "rdfs:label": "interactionCount",
      "schema:supersededBy": {
        "@id": "schema:interactionStatistic"
      }
    },
    {
      "@id": "schema:EducationEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Education event.",
      "rdfs:label": "EducationEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:pickupTime",
      "@type": "rdf:Property",
      "rdfs:comment": "When a taxi will pickup a passenger or a rental car can be picked up.",
      "rdfs:label": "pickupTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:TaxiReservation"
        },
        {
          "@id": "schema:RentalCarReservation"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:accountOverdraftLimit",
      "@type": "rdf:Property",
      "rdfs:comment": "An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money.",
      "rdfs:label": "accountOverdraftLimit",
      "schema:domainIncludes": {
        "@id": "schema:BankAccount"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:endorsee",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The person/organization being supported.",
      "rdfs:label": "endorsee",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:EndorseAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:MisconceptionsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content about common misconceptions and myths that are related to a topic.",
      "rdfs:label": "MisconceptionsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:ownershipFundingInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.",
      "rdfs:label": "ownershipFundingInfo",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:NewsMediaOrganization"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AboutPage"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:BedType",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of bed. This is used for indicating the bed or beds available in an accommodation.",
      "rdfs:label": "BedType",
      "rdfs:subClassOf": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1262"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
        }
      ]
    },
    {
      "@id": "schema:encodingType",
      "@type": "rdf:Property",
      "rdfs:comment": "The supported encoding type(s) for an EntryPoint request.",
      "rdfs:label": "encodingType",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:CovidTestingFacility",
      "@type": "rdfs:Class",
      "rdfs:comment": "A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus\n      disease is available. If the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other\n      non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information\n      about that place e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.\n      ",
      "rdfs:label": "CovidTestingFacility",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalClinic"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:SizeSystemEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates common size systems for different categories of products, for example \"EN-13402\" or \"UK\" for wearables or \"Imperial\" for screws.",
      "rdfs:label": "SizeSystemEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:publication",
      "@type": "rdf:Property",
      "rdfs:comment": "A publication event associated with the item.",
      "rdfs:label": "publication",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PublicationEvent"
      }
    },
    {
      "@id": "schema:WearableSizeGroupExtraShort",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Extra Short\" for wearables.",
      "rdfs:label": "WearableSizeGroupExtraShort",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:FurnitureStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A furniture store.",
      "rdfs:label": "FurnitureStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:costOrigin",
      "@type": "rdf:Property",
      "rdfs:comment": "Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.",
      "rdfs:label": "costOrigin",
      "schema:domainIncludes": {
        "@id": "schema:DrugCost"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PodcastSeason",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.",
      "rdfs:label": "PodcastSeason",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeason"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/373"
      }
    },
    {
      "@id": "schema:noBylinesPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement explaining when authors of articles are not named in bylines.",
      "rdfs:label": "noBylinesPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": {
        "@id": "schema:NewsMediaOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1688"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:trainName",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of the train (e.g. The Orient Express).",
      "rdfs:label": "trainName",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:firstPerformance",
      "@type": "rdf:Property",
      "rdfs:comment": "The date and place the work was first performed.",
      "rdfs:label": "firstPerformance",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:MedicalObservationalStudyDesign",
      "@type": "rdfs:Class",
      "rdfs:comment": "Design models for observational medical studies. Enumerated type.",
      "rdfs:label": "MedicalObservationalStudyDesign",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:box",
      "@type": "rdf:Property",
      "rdfs:comment": "A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.",
      "rdfs:label": "box",
      "schema:domainIncludes": {
        "@id": "schema:GeoShape"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:featureList",
      "@type": "rdf:Property",
      "rdfs:comment": "Features or modules provided by this application (and possibly required by other applications).",
      "rdfs:label": "featureList",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:CDCPMDRecord",
      "@type": "rdfs:Class",
      "rdfs:comment": "A CDCPMDRecord is a data structure representing a record in a CDC tabular data format\n      used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative\n      definitions used as the source here.\n      ",
      "rdfs:label": "CDCPMDRecord",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:deliveryTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The total delay between the receipt of the order and the goods reaching the final customer.",
      "rdfs:label": "deliveryTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:DeliveryTimeSettings"
        },
        {
          "@id": "schema:OfferShippingDetails"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ShippingDeliveryTime"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:HobbyShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "A store that sells materials useful or necessary for various hobbies.",
      "rdfs:label": "HobbyShop",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:sharedContent",
      "@type": "rdf:Property",
      "rdfs:comment": "A CreativeWork such as an image, video, or audio clip shared as part of this posting.",
      "rdfs:label": "sharedContent",
      "schema:domainIncludes": {
        "@id": "schema:SocialMediaPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:dateIssued",
      "@type": "rdf:Property",
      "rdfs:comment": "The date the ticket was issued.",
      "rdfs:label": "dateIssued",
      "schema:domainIncludes": {
        "@id": "schema:Ticket"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Date"
        }
      ]
    },
    {
      "@id": "schema:biologicalRole",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "A role played by the BioChemEntity within a biological context.",
      "rdfs:label": "biologicalRole",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DefinedTerm"
      }
    },
    {
      "@id": "schema:mapType",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the kind of Map, from the MapCategoryType Enumeration.",
      "rdfs:label": "mapType",
      "schema:domainIncludes": {
        "@id": "schema:Map"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MapCategoryType"
      }
    },
    {
      "@id": "schema:WearableSizeSystemEurope",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "European size system for wearables.",
      "rdfs:label": "WearableSizeSystemEurope",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Mosque",
      "@type": "rdfs:Class",
      "rdfs:comment": "A mosque.",
      "rdfs:label": "Mosque",
      "rdfs:subClassOf": {
        "@id": "schema:PlaceOfWorship"
      }
    },
    {
      "@id": "schema:Radiography",
      "@type": [
        "schema:MedicalSpecialty",
        "schema:MedicalImagingTechnique"
      ],
      "rdfs:comment": "Radiography is an imaging technique that uses electromagnetic radiation other than visible light, especially X-rays, to view the internal structure of a non-uniformly composed and opaque object such as the human body.",
      "rdfs:label": "Radiography",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:taxonRank",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Taxon"
      },
      "rdfs:comment": "The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary – (typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs).",
      "rdfs:label": "taxonRank",
      "schema:domainIncludes": {
        "@id": "schema:Taxon"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:homeTeam",
      "@type": "rdf:Property",
      "rdfs:comment": "The home team in a sports event.",
      "rdfs:label": "homeTeam",
      "rdfs:subPropertyOf": {
        "@id": "schema:competitor"
      },
      "schema:domainIncludes": {
        "@id": "schema:SportsEvent"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:SportsTeam"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:OrderReturned",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing that an order has been returned.",
      "rdfs:label": "OrderReturned"
    },
    {
      "@id": "schema:returnMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of return method offered, specified from an enumeration.",
      "rdfs:label": "returnMethod",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnMethodEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:speechToTextMarkup",
      "@type": "rdf:Property",
      "rdfs:comment": "Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).",
      "rdfs:label": "speechToTextMarkup",
      "schema:domainIncludes": {
        "@id": "schema:PronounceableText"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2108"
      }
    },
    {
      "@id": "schema:PaintAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of producing a painting, typically with paint and canvas as instruments.",
      "rdfs:label": "PaintAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:Midwifery",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A nurse-like health profession that deals with pregnancy, childbirth, and the postpartum period (including care of the newborn), besides sexual and reproductive health of women throughout their lives.",
      "rdfs:label": "Midwifery",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:transitTimeLabel",
      "@type": "rdf:Property",
      "rdfs:comment": "Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).",
      "rdfs:label": "transitTimeLabel",
      "schema:domainIncludes": [
        {
          "@id": "schema:OfferShippingDetails"
        },
        {
          "@id": "schema:DeliveryTimeSettings"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:closes",
      "@type": "rdf:Property",
      "rdfs:comment": "The closing hour of the place or service on the given day(s) of the week.",
      "rdfs:label": "closes",
      "schema:domainIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Time"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:healthPlanCostSharing",
      "@type": "rdf:Property",
      "rdfs:comment": "Whether The costs to the patient for services under this network or formulary.",
      "rdfs:label": "healthPlanCostSharing",
      "schema:domainIncludes": [
        {
          "@id": "schema:HealthPlanNetwork"
        },
        {
          "@id": "schema:HealthPlanFormulary"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:WearableMeasurementInseam",
      "@type": "schema:WearableMeasurementTypeEnumeration",
      "rdfs:comment": "Measurement of the inseam, for example of pants",
      "rdfs:label": "WearableMeasurementInseam",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:targetDescription",
      "@type": "rdf:Property",
      "rdfs:comment": "The description of a node in an established educational framework.",
      "rdfs:label": "targetDescription",
      "schema:domainIncludes": {
        "@id": "schema:AlignmentObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:OnSitePickup",
      "@type": "schema:DeliveryMethod",
      "rdfs:comment": "A DeliveryMethod in which an item is collected on site, e.g. in a store or at a box office.",
      "rdfs:label": "OnSitePickup"
    },
    {
      "@id": "schema:percentile90",
      "@type": "rdf:Property",
      "rdfs:comment": "The 90th percentile value.",
      "rdfs:label": "percentile90",
      "schema:domainIncludes": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:Completed",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Completed.",
      "rdfs:label": "Completed",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Review",
      "@type": "rdfs:Class",
      "rdfs:comment": "A review of an item - for example, of a restaurant, movie, or store.",
      "rdfs:label": "Review",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:hasMenu",
      "@type": "rdf:Property",
      "rdfs:comment": "Either the actual menu as a structured representation, as text, or a URL of the menu.",
      "rdfs:label": "hasMenu",
      "schema:domainIncludes": {
        "@id": "schema:FoodEstablishment"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Menu"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:SinglePlayer",
      "@type": "schema:GamePlayMode",
      "rdfs:comment": "Play mode: SinglePlayer. Which is played by a lone player.",
      "rdfs:label": "SinglePlayer"
    },
    {
      "@id": "schema:OnlineEventAttendanceMode",
      "@type": "schema:EventAttendanceModeEnumeration",
      "rdfs:comment": "OnlineEventAttendanceMode - an event that is primarily conducted online. ",
      "rdfs:label": "OnlineEventAttendanceMode",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:ReportedDoseSchedule",
      "@type": "rdfs:Class",
      "rdfs:comment": "A patient-reported or observed dosing schedule for a drug or supplement.",
      "rdfs:label": "ReportedDoseSchedule",
      "rdfs:subClassOf": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:termsPerYear",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.",
      "rdfs:label": "termsPerYear",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2419"
      }
    },
    {
      "@id": "schema:pathophysiology",
      "@type": "rdf:Property",
      "rdfs:comment": "Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.",
      "rdfs:label": "pathophysiology",
      "schema:domainIncludes": [
        {
          "@id": "schema:PhysicalActivity"
        },
        {
          "@id": "schema:MedicalCondition"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:encodingFormat",
      "@type": "rdf:Property",
      "rdfs:comment": "Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).\n\nIn cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.\n\nUnregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.",
      "rdfs:label": "encodingFormat",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:comprisedOf",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system.",
      "rdfs:label": "comprisedOf",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalSystem"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AnatomicalSystem"
        },
        {
          "@id": "schema:AnatomicalStructure"
        }
      ]
    },
    {
      "@id": "schema:offerCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of offers for the product.",
      "rdfs:label": "offerCount",
      "schema:domainIncludes": {
        "@id": "schema:AggregateOffer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:MusicAlbumReleaseType",
      "@type": "rdfs:Class",
      "rdfs:comment": "The kind of release which this album is: single, EP or album.",
      "rdfs:label": "MusicAlbumReleaseType",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:FullRefund",
      "@type": "schema:RefundTypeEnumeration",
      "rdfs:comment": "Specifies that a refund can be done in the full amount the customer paid for the product",
      "rdfs:label": "FullRefund",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:PropertyValueSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Property value specification.",
      "rdfs:label": "PropertyValueSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_ActionCollabClass"
      }
    },
    {
      "@id": "schema:False",
      "@type": "schema:Boolean",
      "rdfs:comment": "The boolean value false.",
      "rdfs:label": "False"
    },
    {
      "@id": "schema:ownedFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The date and time of obtaining the product.",
      "rdfs:label": "ownedFrom",
      "schema:domainIncludes": {
        "@id": "schema:OwnershipInfo"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:ElectronicsStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "An electronics store.",
      "rdfs:label": "ElectronicsStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:Language",
      "@type": "rdfs:Class",
      "rdfs:comment": "Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].",
      "rdfs:label": "Language",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:InStock",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item is in stock.",
      "rdfs:label": "InStock"
    },
    {
      "@id": "schema:ReactAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of responding instinctively and emotionally to an object, expressing a sentiment.",
      "rdfs:label": "ReactAction",
      "rdfs:subClassOf": {
        "@id": "schema:AssessAction"
      }
    },
    {
      "@id": "schema:engineDisplacement",
      "@type": "rdf:Property",
      "rdfs:comment": "The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement. \\n\\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\\n* Note 1: You can link to information about how the given value has been determined using the [[valueReference]] property.\\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "engineDisplacement",
      "schema:domainIncludes": {
        "@id": "schema:EngineSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:AccountingService",
      "@type": "rdfs:Class",
      "rdfs:comment": "Accountancy business.\\n\\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\\(s).\n      ",
      "rdfs:label": "AccountingService",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialService"
      }
    },
    {
      "@id": "schema:hoursAvailable",
      "@type": "rdf:Property",
      "rdfs:comment": "The hours during which this service or contact is available.",
      "rdfs:label": "hoursAvailable",
      "schema:domainIncludes": [
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:LocationFeatureSpecification"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      }
    },
    {
      "@id": "schema:founder",
      "@type": "rdf:Property",
      "rdfs:comment": "A person who founded this organization.",
      "rdfs:label": "founder",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:WearableSizeGroupBig",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Big\" for wearables.",
      "rdfs:label": "WearableSizeGroupBig",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:performers",
      "@type": "rdf:Property",
      "rdfs:comment": "The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.",
      "rdfs:label": "performers",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:performer"
      }
    },
    {
      "@id": "schema:ParcelService",
      "@type": "schema:DeliveryMethod",
      "rdfs:comment": "A private parcel service as the delivery mode available for a certain offer.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#DHL\\n* http://purl.org/goodrelations/v1#FederalExpress\\n* http://purl.org/goodrelations/v1#UPS\n      ",
      "rdfs:label": "ParcelService",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:MerchantReturnUnlimitedWindow",
      "@type": "schema:MerchantReturnEnumeration",
      "rdfs:comment": "Specifies that there is an unlimited window for product returns.",
      "rdfs:label": "MerchantReturnUnlimitedWindow",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:ExchangeRateSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value representing exchange rate.",
      "rdfs:label": "ExchangeRateSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:ResultsNotAvailable",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Results are not available.",
      "rdfs:label": "ResultsNotAvailable",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:PoliceStation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A police station.",
      "rdfs:label": "PoliceStation",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:EmergencyService"
        }
      ]
    },
    {
      "@id": "schema:Otolaryngologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with the ear, nose and throat and their respective disease states.",
      "rdfs:label": "Otolaryngologic",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:partOfTVSeries",
      "@type": "rdf:Property",
      "rdfs:comment": "The TV series to which this episode or season belongs.",
      "rdfs:label": "partOfTVSeries",
      "rdfs:subPropertyOf": {
        "@id": "schema:isPartOf"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:TVClip"
        },
        {
          "@id": "schema:TVSeason"
        },
        {
          "@id": "schema:TVEpisode"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:TVSeries"
      },
      "schema:supersededBy": {
        "@id": "schema:partOfSeries"
      }
    },
    {
      "@id": "schema:observedNode",
      "@type": "rdf:Property",
      "rdfs:comment": "The observedNode of an [[Observation]], often a [[StatisticalPopulation]].",
      "rdfs:label": "observedNode",
      "schema:domainIncludes": {
        "@id": "schema:Observation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:StatisticalPopulation"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:Longitudinal",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "Unlike cross-sectional studies, longitudinal studies track the same people, and therefore the differences observed in those people are less likely to be the result of cultural differences across generations. Longitudinal studies are also used in medicine to uncover predictors of certain diseases.",
      "rdfs:label": "Longitudinal",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ComputerLanguage",
      "@type": "rdfs:Class",
      "rdfs:comment": "This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the [[Language]] type.",
      "rdfs:label": "ComputerLanguage",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:DepartAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants.",
      "rdfs:label": "DepartAction",
      "rdfs:subClassOf": {
        "@id": "schema:MoveAction"
      }
    },
    {
      "@id": "schema:PET",
      "@type": "schema:MedicalImagingTechnique",
      "rdfs:comment": "Positron emission tomography imaging.",
      "rdfs:label": "PET",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Neuro",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Neurological system clinical examination.",
      "rdfs:label": "Neuro",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:surface",
      "@type": "rdf:Property",
      "rdfs:comment": "A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.",
      "rdfs:label": "surface",
      "rdfs:subPropertyOf": {
        "@id": "schema:material"
      },
      "schema:domainIncludes": {
        "@id": "schema:VisualArtwork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:artworkSurface"
      }
    },
    {
      "@id": "schema:MedicalResearcher",
      "@type": "schema:MedicalAudienceType",
      "rdfs:comment": "Medical researchers.",
      "rdfs:label": "MedicalResearcher",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:cvdCollectionDate",
      "@type": "rdf:Property",
      "rdfs:comment": "collectiondate - Date for which patient counts are reported.",
      "rdfs:label": "cvdCollectionDate",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:WebSite",
      "@type": "rdfs:Class",
      "rdfs:comment": "A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.",
      "rdfs:label": "WebSite",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:numberOfFullBathrooms",
      "@type": "rdf:Property",
      "rdfs:comment": "Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).",
      "rdfs:label": "numberOfFullBathrooms",
      "schema:domainIncludes": [
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:Accommodation"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:ShippingRateSettings",
      "@type": "rdfs:Class",
      "rdfs:comment": "A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].",
      "rdfs:label": "ShippingRateSettings",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:EndorseAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent approves/certifies/likes/supports/sanction an object.",
      "rdfs:label": "EndorseAction",
      "rdfs:subClassOf": {
        "@id": "schema:ReactAction"
      }
    },
    {
      "@id": "schema:actionStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the current disposition of the Action.",
      "rdfs:label": "actionStatus",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ActionStatusType"
      }
    },
    {
      "@id": "schema:Tuesday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Monday and Wednesday.",
      "rdfs:label": "Tuesday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q127"
      }
    },
    {
      "@id": "schema:WPFooter",
      "@type": "rdfs:Class",
      "rdfs:comment": "The footer section of the page.",
      "rdfs:label": "WPFooter",
      "rdfs:subClassOf": {
        "@id": "schema:WebPageElement"
      }
    },
    {
      "@id": "schema:mediaItemAppearance",
      "@type": "rdf:Property",
      "rdfs:comment": "In the context of a [[MediaReview]], indicates specific media item(s) that are grouped using a [[MediaReviewItem]].",
      "rdfs:label": "mediaItemAppearance",
      "schema:domainIncludes": {
        "@id": "schema:MediaReviewItem"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:busName",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of the bus (e.g. Bolt Express).",
      "rdfs:label": "busName",
      "schema:domainIncludes": {
        "@id": "schema:BusTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Patient",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/116154003"
      },
      "rdfs:comment": "A patient is any person recipient of health care services.",
      "rdfs:label": "Patient",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:MedicalAudience"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:FMRadioChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A radio channel that uses FM.",
      "rdfs:label": "FMRadioChannel",
      "rdfs:subClassOf": {
        "@id": "schema:RadioChannel"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:HealthCare",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "HealthCare: this is a benefit for health care.",
      "rdfs:label": "HealthCare",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:Female",
      "@type": "schema:GenderType",
      "rdfs:comment": "The female gender.",
      "rdfs:label": "Female"
    },
    {
      "@id": "schema:verificationFactCheckingPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]] or other fact-checking [[Organization]].",
      "rdfs:label": "verificationFactCheckingPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": {
        "@id": "schema:NewsMediaOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:InvestmentOrDeposit",
      "@type": "rdfs:Class",
      "rdfs:comment": "A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.",
      "rdfs:label": "InvestmentOrDeposit",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialProduct"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:affectedBy",
      "@type": "rdf:Property",
      "rdfs:comment": "Drugs that affect the test's results.",
      "rdfs:label": "affectedBy",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Drug"
      }
    },
    {
      "@id": "schema:InsuranceAgency",
      "@type": "rdfs:Class",
      "rdfs:comment": "An Insurance agency.",
      "rdfs:label": "InsuranceAgency",
      "rdfs:subClassOf": {
        "@id": "schema:FinancialService"
      }
    },
    {
      "@id": "schema:ReturnLabelCustomerResponsibility",
      "@type": "schema:ReturnLabelSourceEnumeration",
      "rdfs:comment": "Indicated that creating a return label is the responsibility of the customer.",
      "rdfs:label": "ReturnLabelCustomerResponsibility",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:acceptedOffer",
      "@type": "rdf:Property",
      "rdfs:comment": "The offer(s) -- e.g., product, quantity and price combinations -- included in the order.",
      "rdfs:label": "acceptedOffer",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Offer"
      }
    },
    {
      "@id": "schema:recordingOf",
      "@type": "rdf:Property",
      "rdfs:comment": "The composition this track is a recording of.",
      "rdfs:label": "recordingOf",
      "schema:domainIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:inverseOf": {
        "@id": "schema:recordedAs"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:image",
      "@type": "rdf:Property",
      "rdfs:comment": "An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].",
      "rdfs:label": "image",
      "schema:domainIncludes": {
        "@id": "schema:Thing"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ImageObject"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:DanceGroup",
      "@type": "rdfs:Class",
      "rdfs:comment": "A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.",
      "rdfs:label": "DanceGroup",
      "rdfs:subClassOf": {
        "@id": "schema:PerformingGroup"
      }
    },
    {
      "@id": "schema:AutomotiveBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "Car repair, sales, or parts.",
      "rdfs:label": "AutomotiveBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:vehicleTransmission",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) (\"gearbox\" for cars).",
      "rdfs:label": "vehicleTransmission",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:MedicalDevice",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/63653004"
      },
      "rdfs:comment": "Any object used in a medical capacity, such as to diagnose or treat a patient.",
      "rdfs:label": "MedicalDevice",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:occupationalCredentialAwarded",
      "@type": "rdf:Property",
      "rdfs:comment": "A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.",
      "rdfs:label": "occupationalCredentialAwarded",
      "schema:domainIncludes": [
        {
          "@id": "schema:Course"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:EducationalOccupationalCredential"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:BodyMeasurementFoot",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Foot length (measured between end of the most prominent toe and the most prominent part of the heel). Used, for example, to measure socks.",
      "rdfs:label": "BodyMeasurementFoot",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:maximumVirtualAttendeeCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]). ",
      "rdfs:label": "maximumVirtualAttendeeCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1842"
      }
    },
    {
      "@id": "schema:DDxElement",
      "@type": "rdfs:Class",
      "rdfs:comment": "An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.",
      "rdfs:label": "DDxElement",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIntangible"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:addOn",
      "@type": "rdf:Property",
      "rdfs:comment": "An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).",
      "rdfs:label": "addOn",
      "schema:domainIncludes": {
        "@id": "schema:Offer"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Offer"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:TaxiStand",
      "@type": "rdfs:Class",
      "rdfs:comment": "A taxi stand.",
      "rdfs:label": "TaxiStand",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:FloorPlan",
      "@type": "rdfs:Class",
      "rdfs:comment": "A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]].  A FloorPlan is always in the context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using [[image]]. ",
      "rdfs:label": "FloorPlan",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:regionDrained",
      "@type": "rdf:Property",
      "rdfs:comment": "The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.",
      "rdfs:label": "regionDrained",
      "schema:domainIncludes": [
        {
          "@id": "schema:Vein"
        },
        {
          "@id": "schema:LymphaticVessel"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:AnatomicalSystem"
        }
      ]
    },
    {
      "@id": "schema:InviteAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of asking someone to attend an event. Reciprocal of RsvpAction.",
      "rdfs:label": "InviteAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:Genitourinary",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Genitourinary system function assessment with clinical examination.",
      "rdfs:label": "Genitourinary",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:startDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
      "rdfs:label": "startDate",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:DatedMoneySpecification"
        },
        {
          "@id": "schema:Role"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:CreativeWorkSeries"
        },
        {
          "@id": "schema:MerchantReturnPolicySeasonalOverride"
        },
        {
          "@id": "schema:Schedule"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2486"
      }
    },
    {
      "@id": "schema:EmployeeRole",
      "@type": "rdfs:Class",
      "rdfs:comment": "A subclass of OrganizationRole used to describe employee relationships.",
      "rdfs:label": "EmployeeRole",
      "rdfs:subClassOf": {
        "@id": "schema:OrganizationRole"
      }
    },
    {
      "@id": "schema:PregnancyHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Content discussing pregnancy-related aspects of a health topic.",
      "rdfs:label": "PregnancyHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2799"
      }
    },
    {
      "@id": "schema:replacer",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The object that replaces.",
      "rdfs:label": "replacer",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:ReplaceAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:applicationCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "Type of software application, e.g. 'Game, Multimedia'.",
      "rdfs:label": "applicationCategory",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:HealthPlanCostSharingSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A description of costs to the patient under a given network or formulary.",
      "rdfs:label": "HealthPlanCostSharingSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:servesCuisine",
      "@type": "rdf:Property",
      "rdfs:comment": "The cuisine of the restaurant.",
      "rdfs:label": "servesCuisine",
      "schema:domainIncludes": {
        "@id": "schema:FoodEstablishment"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:worksFor",
      "@type": "rdf:Property",
      "rdfs:comment": "Organizations that the person works for.",
      "rdfs:label": "worksFor",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:httpMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.",
      "rdfs:label": "httpMethod",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Eye",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Eye or ophtalmological function assessment with clinical examination.",
      "rdfs:label": "Eye",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:interactingDrug",
      "@type": "rdf:Property",
      "rdfs:comment": "Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications.",
      "rdfs:label": "interactingDrug",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Drug"
      }
    },
    {
      "@id": "schema:monthlyMinimumRepaymentAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month.",
      "rdfs:label": "monthlyMinimumRepaymentAmount",
      "schema:domainIncludes": {
        "@id": "schema:PaymentCard"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:MerchantReturnPolicySeasonalOverride",
      "@type": "rdfs:Class",
      "rdfs:comment": "A seasonal override of a return policy, for example used for holidays.",
      "rdfs:label": "MerchantReturnPolicySeasonalOverride",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:Homeopathic",
      "@type": "schema:MedicineSystem",
      "rdfs:comment": "A system of medicine based on the principle that a disease can be cured by a substance that produces similar symptoms in healthy people.",
      "rdfs:label": "Homeopathic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:HomeAndConstructionBusiness",
      "@type": "rdfs:Class",
      "rdfs:comment": "A construction business.\\n\\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around homes and buildings.\\n\\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\\(s).",
      "rdfs:label": "HomeAndConstructionBusiness",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:dropoffTime",
      "@type": "rdf:Property",
      "rdfs:comment": "When a rental car can be dropped off.",
      "rdfs:label": "dropoffTime",
      "schema:domainIncludes": {
        "@id": "schema:RentalCarReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:DeleteAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of editing a recipient by removing one of its objects.",
      "rdfs:label": "DeleteAction",
      "rdfs:subClassOf": {
        "@id": "schema:UpdateAction"
      }
    },
    {
      "@id": "schema:Attorney",
      "@type": "rdfs:Class",
      "rdfs:comment": "Professional service: Attorney. \\n\\nThis type is deprecated - [[LegalService]] is more inclusive and less ambiguous.",
      "rdfs:label": "Attorney",
      "rdfs:subClassOf": {
        "@id": "schema:LegalService"
      }
    },
    {
      "@id": "schema:MensClothingStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A men's clothing store.",
      "rdfs:label": "MensClothingStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:programName",
      "@type": "rdf:Property",
      "rdfs:comment": "The program providing the membership.",
      "rdfs:label": "programName",
      "schema:domainIncludes": {
        "@id": "schema:ProgramMembership"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:addressCountry",
      "@type": "rdf:Property",
      "rdfs:comment": "The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).",
      "rdfs:label": "addressCountry",
      "schema:domainIncludes": [
        {
          "@id": "schema:DefinedRegion"
        },
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:GeoCoordinates"
        },
        {
          "@id": "schema:PostalAddress"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Country"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:connectedTo",
      "@type": "rdf:Property",
      "rdfs:comment": "Other anatomical structures to which this structure is connected.",
      "rdfs:label": "connectedTo",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:inLanguage",
      "@type": "rdf:Property",
      "rdfs:comment": "The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].",
      "rdfs:label": "inLanguage",
      "schema:domainIncludes": [
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:BroadcastService"
        },
        {
          "@id": "schema:WriteAction"
        },
        {
          "@id": "schema:LinkRole"
        },
        {
          "@id": "schema:PronounceableText"
        },
        {
          "@id": "schema:CommunicateAction"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Language"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2382"
      }
    },
    {
      "@id": "schema:AutoWash",
      "@type": "rdfs:Class",
      "rdfs:comment": "A car wash business.",
      "rdfs:label": "AutoWash",
      "rdfs:subClassOf": {
        "@id": "schema:AutomotiveBusiness"
      }
    },
    {
      "@id": "schema:targetCollection",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The collection target of the action.",
      "rdfs:label": "targetCollection",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:UpdateAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:dateModified",
      "@type": "rdf:Property",
      "rdfs:comment": "The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.",
      "rdfs:label": "dateModified",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:DataFeedItem"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:ReceiveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\\n\\nRelated actions:\\n\\n* [[SendAction]]: The reciprocal of ReceiveAction.\\n* [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).",
      "rdfs:label": "ReceiveAction",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      }
    },
    {
      "@id": "schema:reviews",
      "@type": "rdf:Property",
      "rdfs:comment": "Review of the item.",
      "rdfs:label": "reviews",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      },
      "schema:supersededBy": {
        "@id": "schema:review"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryF",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class F as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryF",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:permitAudience",
      "@type": "rdf:Property",
      "rdfs:comment": "The target audience for this permit.",
      "rdfs:label": "permitAudience",
      "schema:domainIncludes": {
        "@id": "schema:Permit"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Audience"
      }
    },
    {
      "@id": "schema:durationOfWarranty",
      "@type": "rdf:Property",
      "rdfs:comment": "The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.",
      "rdfs:label": "durationOfWarranty",
      "schema:domainIncludes": {
        "@id": "schema:WarrantyPromise"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:NotInForce",
      "@type": "schema:LegalForceStatus",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#InForce-notInForce"
      },
      "rdfs:comment": "Indicates that a legislation is currently not in force.",
      "rdfs:label": "NotInForce",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:dateCreated",
      "@type": "rdf:Property",
      "rdfs:comment": "The date on which the CreativeWork was created or the item was added to a DataFeed.",
      "rdfs:label": "dateCreated",
      "schema:domainIncludes": [
        {
          "@id": "schema:DataFeedItem"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Date"
        },
        {
          "@id": "schema:DateTime"
        }
      ]
    },
    {
      "@id": "schema:Boolean",
      "@type": [
        "rdfs:Class",
        "schema:DataType"
      ],
      "rdfs:comment": "Boolean: True or False.",
      "rdfs:label": "Boolean"
    },
    {
      "@id": "schema:MovieSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A series of movies. Included movies can be indicated with the hasPart property.",
      "rdfs:label": "MovieSeries",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      }
    },
    {
      "@id": "schema:performer",
      "@type": "rdf:Property",
      "rdfs:comment": "A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.",
      "rdfs:label": "performer",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:sodiumContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of milligrams of sodium.",
      "rdfs:label": "sodiumContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:sku",
      "@type": "rdf:Property",
      "rdfs:comment": "The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.",
      "rdfs:label": "sku",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Demand"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Discontinued",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item has been discontinued.",
      "rdfs:label": "Discontinued"
    },
    {
      "@id": "schema:telephone",
      "@type": "rdf:Property",
      "rdfs:comment": "The telephone number.",
      "rdfs:label": "telephone",
      "schema:domainIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ContactPoint"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:parentService",
      "@type": "rdf:Property",
      "rdfs:comment": "A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.",
      "rdfs:label": "parentService",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastService"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BroadcastService"
      }
    },
    {
      "@id": "schema:greater",
      "@type": "rdf:Property",
      "rdfs:comment": "This ordering relation for qualitative values indicates that the subject is greater than the object.",
      "rdfs:label": "greater",
      "schema:domainIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:openingHoursSpecification",
      "@type": "rdf:Property",
      "rdfs:comment": "The opening hours of a certain place.",
      "rdfs:label": "openingHoursSpecification",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:LodgingReservation",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservation for lodging at a hotel, motel, inn, etc.\\n\\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.",
      "rdfs:label": "LodgingReservation",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:webCheckinTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time when a passenger can check into the flight online.",
      "rdfs:label": "webCheckinTime",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:originAddress",
      "@type": "rdf:Property",
      "rdfs:comment": "Shipper's address.",
      "rdfs:label": "originAddress",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PostalAddress"
      }
    },
    {
      "@id": "schema:LiveAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "LiveAlbum.",
      "rdfs:label": "LiveAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:referenceQuantity",
      "@type": "rdf:Property",
      "rdfs:comment": "The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.",
      "rdfs:label": "referenceQuantity",
      "schema:domainIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsProperties"
        }
      ]
    },
    {
      "@id": "schema:Invoice",
      "@type": "rdfs:Class",
      "rdfs:comment": "A statement of the money due for goods or services; a bill.",
      "rdfs:label": "Invoice",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:SportingGoodsStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sporting goods store.",
      "rdfs:label": "SportingGoodsStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:hasPOS",
      "@type": "rdf:Property",
      "rdfs:comment": "Points-of-Sales operated by the organization or person.",
      "rdfs:label": "hasPOS",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:associatedMedia",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object that encodes this CreativeWork. This property is a synonym for encoding.",
      "rdfs:label": "associatedMedia",
      "schema:domainIncludes": [
        {
          "@id": "schema:HyperTocEntry"
        },
        {
          "@id": "schema:HyperToc"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:MediaObject"
      }
    },
    {
      "@id": "schema:jobBenefits",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of benefits associated with the job.",
      "rdfs:label": "jobBenefits",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:CafeOrCoffeeShop",
      "@type": "rdfs:Class",
      "rdfs:comment": "A cafe or coffee shop.",
      "rdfs:label": "CafeOrCoffeeShop",
      "rdfs:subClassOf": {
        "@id": "schema:FoodEstablishment"
      }
    },
    {
      "@id": "schema:isConsumableFor",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to another product (or multiple products) for which this product is a consumable.",
      "rdfs:label": "isConsumableFor",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:WearableSizeSystemIT",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Italian size system for wearables.",
      "rdfs:label": "WearableSizeSystemIT",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:AlbumRelease",
      "@type": "schema:MusicAlbumReleaseType",
      "rdfs:comment": "AlbumRelease.",
      "rdfs:label": "AlbumRelease",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:dataFeedElement",
      "@type": "rdf:Property",
      "rdfs:comment": "An item within in a data feed. Data feeds may have many elements.",
      "rdfs:label": "dataFeedElement",
      "schema:domainIncludes": {
        "@id": "schema:DataFeed"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        },
        {
          "@id": "schema:DataFeedItem"
        }
      ]
    },
    {
      "@id": "schema:educationalFramework",
      "@type": "rdf:Property",
      "rdfs:comment": "The framework to which the resource being described is aligned.",
      "rdfs:label": "educationalFramework",
      "schema:domainIncludes": {
        "@id": "schema:AlignmentObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EnergyStarCertified",
      "@type": "schema:EnergyStarEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EnergyStar certification.",
      "rdfs:label": "EnergyStarCertified",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:ReservationPackage",
      "@type": "rdfs:Class",
      "rdfs:comment": "A group of multiple reservations with common values for all sub-reservations.",
      "rdfs:label": "ReservationPackage",
      "rdfs:subClassOf": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:departureTerminal",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifier of the flight's departure terminal.",
      "rdfs:label": "departureTerminal",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BodyMeasurementNeck",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Girth of neck. Used, for example, to fit shirts.",
      "rdfs:label": "BodyMeasurementNeck",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:GeoCircle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape\n          it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.\n          The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.\n       ",
      "rdfs:label": "GeoCircle",
      "rdfs:subClassOf": {
        "@id": "schema:GeoShape"
      }
    },
    {
      "@id": "schema:Consortium",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Consortium is a membership [[Organization]] whose members are typically Organizations.",
      "rdfs:label": "Consortium",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1559"
      }
    },
    {
      "@id": "schema:WarrantyPromise",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.",
      "rdfs:label": "WarrantyPromise",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:currentExchangeRate",
      "@type": "rdf:Property",
      "rdfs:comment": "The current price of a currency.",
      "rdfs:label": "currentExchangeRate",
      "schema:domainIncludes": {
        "@id": "schema:ExchangeRateSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:newsUpdatesAndGuidelines",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page containing [[SpecialAnnouncement]] markup on a site.",
      "rdfs:label": "newsUpdatesAndGuidelines",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:WebContent"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:SocialEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Social event.",
      "rdfs:label": "SocialEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:relatedDrug",
      "@type": "rdf:Property",
      "rdfs:comment": "Any other drug related to this one, for example commonly-prescribed alternatives.",
      "rdfs:label": "relatedDrug",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Drug"
      }
    },
    {
      "@id": "schema:includesAttraction",
      "@type": "rdf:Property",
      "rdfs:comment": "Attraction located at destination.",
      "rdfs:label": "includesAttraction",
      "schema:domainIncludes": {
        "@id": "schema:TouristDestination"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:TouristAttraction"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it"
        }
      ]
    },
    {
      "@id": "schema:HighSchool",
      "@type": "rdfs:Class",
      "rdfs:comment": "A high school.",
      "rdfs:label": "HighSchool",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:colleague",
      "@type": "rdf:Property",
      "rdfs:comment": "A colleague of the person.",
      "rdfs:label": "colleague",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:gtin",
      "@type": "rdf:Property",
      "rdfs:comment": "A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a \"GS1 Digital Link\" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.\n   ",
      "rdfs:label": "gtin",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:unitCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.",
      "rdfs:label": "unitCode",
      "schema:domainIncludes": [
        {
          "@id": "schema:UnitPriceSpecification"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:TypeAndQuantityNode"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Museum",
      "@type": "rdfs:Class",
      "rdfs:comment": "A museum.",
      "rdfs:label": "Museum",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:GeoShape",
      "@type": "rdfs:Class",
      "rdfs:comment": "The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.",
      "rdfs:label": "GeoShape",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:Date",
      "@type": [
        "rdfs:Class",
        "schema:DataType"
      ],
      "rdfs:comment": "A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
      "rdfs:label": "Date"
    },
    {
      "@id": "schema:geographicArea",
      "@type": "rdf:Property",
      "rdfs:comment": "The geographic area associated with the audience.",
      "rdfs:label": "geographicArea",
      "schema:domainIncludes": {
        "@id": "schema:Audience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      }
    },
    {
      "@id": "schema:interpretedAsClaim",
      "@type": "rdf:Property",
      "rdfs:comment": "Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].",
      "rdfs:label": "interpretedAsClaim",
      "rdfs:subPropertyOf": {
        "@id": "schema:description"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Claim"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:DoseSchedule",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific dosing schedule for a drug or supplement.",
      "rdfs:label": "DoseSchedule",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIntangible"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:BrokerageAccount",
      "@type": "rdfs:Class",
      "rdfs:comment": "An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.",
      "rdfs:label": "BrokerageAccount",
      "rdfs:subClassOf": {
        "@id": "schema:InvestmentOrDeposit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:CheckoutPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Checkout page.",
      "rdfs:label": "CheckoutPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:PublicationIssue",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.org/ontology/bibo/Issue"
      },
      "rdfs:comment": "A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\\n\\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).",
      "rdfs:label": "PublicationIssue",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:LoseAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of being defeated in a competitive activity.",
      "rdfs:label": "LoseAction",
      "rdfs:subClassOf": {
        "@id": "schema:AchieveAction"
      }
    },
    {
      "@id": "schema:departureAirport",
      "@type": "rdf:Property",
      "rdfs:comment": "The airport where the flight originates.",
      "rdfs:label": "departureAirport",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Airport"
      }
    },
    {
      "@id": "schema:targetName",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of a node in an established educational framework.",
      "rdfs:label": "targetName",
      "schema:domainIncludes": {
        "@id": "schema:AlignmentObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Comment",
      "@type": "rdfs:Class",
      "rdfs:comment": "A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.",
      "rdfs:label": "Comment",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:identifyingTest",
      "@type": "rdf:Property",
      "rdfs:comment": "A diagnostic test that can identify this sign.",
      "rdfs:label": "identifyingTest",
      "schema:domainIncludes": {
        "@id": "schema:MedicalSign"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTest"
      }
    },
    {
      "@id": "schema:AnatomicalSystem",
      "@type": "rdfs:Class",
      "rdfs:comment": "An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can includes circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.",
      "rdfs:label": "AnatomicalSystem",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:LowFatDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet focused on reduced fat and cholesterol intake.",
      "rdfs:label": "LowFatDiet"
    },
    {
      "@id": "schema:SpreadsheetDigitalDocument",
      "@type": "rdfs:Class",
      "rdfs:comment": "A spreadsheet file.",
      "rdfs:label": "SpreadsheetDigitalDocument",
      "rdfs:subClassOf": {
        "@id": "schema:DigitalDocument"
      }
    },
    {
      "@id": "schema:review",
      "@type": "rdf:Property",
      "rdfs:comment": "A review of the item.",
      "rdfs:label": "review",
      "schema:domainIncludes": [
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Brand"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Review"
      }
    },
    {
      "@id": "schema:ZoneBoardingPolicy",
      "@type": "schema:BoardingPolicyType",
      "rdfs:comment": "The airline boards by zones of the plane.",
      "rdfs:label": "ZoneBoardingPolicy"
    },
    {
      "@id": "schema:reservationStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The current status of the reservation.",
      "rdfs:label": "reservationStatus",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReservationStatusType"
      }
    },
    {
      "@id": "schema:measuredValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The measuredValue of an [[Observation]].",
      "rdfs:label": "measuredValue",
      "schema:domainIncludes": {
        "@id": "schema:Observation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DataType"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:performerIn",
      "@type": "rdf:Property",
      "rdfs:comment": "Event that this person is a performer or participant in.",
      "rdfs:label": "performerIn",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:Nonprofit501e",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501e: Non-profit type referring to Cooperative Hospital Service Organizations.",
      "rdfs:label": "Nonprofit501e",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:vehicleEngine",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about the engine or engines of the vehicle.",
      "rdfs:label": "vehicleEngine",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:EngineSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:maxValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The upper value of some characteristic or property.",
      "rdfs:label": "maxValue",
      "schema:domainIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PropertyValueSpecification"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:inDefinedTermSet",
      "@type": "rdf:Property",
      "rdfs:comment": "A [[DefinedTermSet]] that contains this term.",
      "rdfs:label": "inDefinedTermSet",
      "rdfs:subPropertyOf": {
        "@id": "schema:isPartOf"
      },
      "schema:domainIncludes": {
        "@id": "schema:DefinedTerm"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:DefinedTermSet"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:screenCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of screens in the movie theater.",
      "rdfs:label": "screenCount",
      "schema:domainIncludes": {
        "@id": "schema:MovieTheater"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:subEvents",
      "@type": "rdf:Property",
      "rdfs:comment": "Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.",
      "rdfs:label": "subEvents",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      },
      "schema:supersededBy": {
        "@id": "schema:subEvent"
      }
    },
    {
      "@id": "schema:ToyStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A toy store.",
      "rdfs:label": "ToyStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:fiberContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of fiber.",
      "rdfs:label": "fiberContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:IgnoreAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of intentionally disregarding the object. An agent ignores an object.",
      "rdfs:label": "IgnoreAction",
      "rdfs:subClassOf": {
        "@id": "schema:AssessAction"
      }
    },
    {
      "@id": "schema:requiredGender",
      "@type": "rdf:Property",
      "rdfs:comment": "Audiences defined by a person's gender.",
      "rdfs:label": "requiredGender",
      "schema:domainIncludes": {
        "@id": "schema:PeopleAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:HowOrWhereHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Information about how or where to find a topic. Also may contain location data that can be used for where to look for help if the topic is observed.",
      "rdfs:label": "HowOrWhereHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:OfferCatalog",
      "@type": "rdfs:Class",
      "rdfs:comment": "An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.",
      "rdfs:label": "OfferCatalog",
      "rdfs:subClassOf": {
        "@id": "schema:ItemList"
      }
    },
    {
      "@id": "schema:penciler",
      "@type": "rdf:Property",
      "rdfs:comment": "The individual who draws the primary narrative artwork.",
      "rdfs:label": "penciler",
      "schema:domainIncludes": [
        {
          "@id": "schema:ComicIssue"
        },
        {
          "@id": "schema:VisualArtwork"
        },
        {
          "@id": "schema:ComicStory"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryC",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class C as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryC",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:SubscribeAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\\n\\nRelated actions:\\n\\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\\n* [[RegisterAction]]: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.",
      "rdfs:label": "SubscribeAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:CrossSectional",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "Studies carried out on pre-existing data (usually from 'snapshot' surveys), such as that collected by the Census Bureau. Sometimes called Prevalence Studies.",
      "rdfs:label": "CrossSectional",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:episode",
      "@type": "rdf:Property",
      "rdfs:comment": "An episode of a tv, radio or game media within a series or season.",
      "rdfs:label": "episode",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasPart"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:CreativeWorkSeason"
        },
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:RadioSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Episode"
      }
    },
    {
      "@id": "schema:PathologyTest",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.",
      "rdfs:label": "PathologyTest",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:readBy",
      "@type": "rdf:Property",
      "rdfs:comment": "A person who reads (performs) the audiobook.",
      "rdfs:label": "readBy",
      "rdfs:subPropertyOf": {
        "@id": "schema:actor"
      },
      "schema:domainIncludes": {
        "@id": "schema:Audiobook"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:bookEdition",
      "@type": "rdf:Property",
      "rdfs:comment": "The edition of the book.",
      "rdfs:label": "bookEdition",
      "schema:domainIncludes": {
        "@id": "schema:Book"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:BodyOfWater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A body of water, such as a sea, ocean, or lake.",
      "rdfs:label": "BodyOfWater",
      "rdfs:subClassOf": {
        "@id": "schema:Landform"
      }
    },
    {
      "@id": "schema:antagonist",
      "@type": "rdf:Property",
      "rdfs:comment": "The muscle whose action counteracts the specified muscle.",
      "rdfs:label": "antagonist",
      "schema:domainIncludes": {
        "@id": "schema:Muscle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Muscle"
      }
    },
    {
      "@id": "schema:healthCondition",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifying the health condition(s) of a patient, medical study, or other target audience.",
      "rdfs:label": "healthCondition",
      "schema:domainIncludes": [
        {
          "@id": "schema:PeopleAudience"
        },
        {
          "@id": "schema:MedicalStudy"
        },
        {
          "@id": "schema:Patient"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalCondition"
      }
    },
    {
      "@id": "schema:WearableSizeSystemFR",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "French size system for wearables.",
      "rdfs:label": "WearableSizeSystemFR",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:WearableSizeGroupPetite",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Petite\" for wearables.",
      "rdfs:label": "WearableSizeGroupPetite",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:WearableSizeGroupMisses",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Misses\" (also known as \"Missy\") for wearables.",
      "rdfs:label": "WearableSizeGroupMisses",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Mountain",
      "@type": "rdfs:Class",
      "rdfs:comment": "A mountain, like Mount Whitney or Mount Everest.",
      "rdfs:label": "Mountain",
      "rdfs:subClassOf": {
        "@id": "schema:Landform"
      }
    },
    {
      "@id": "schema:RentalVehicleUsage",
      "@type": "schema:CarUsageType",
      "rdfs:comment": "Indicates the usage of the vehicle as a rental car.",
      "rdfs:label": "RentalVehicleUsage",
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:includesHealthPlanFormulary",
      "@type": "rdf:Property",
      "rdfs:comment": "Formularies covered by this plan.",
      "rdfs:label": "includesHealthPlanFormulary",
      "schema:domainIncludes": {
        "@id": "schema:HealthInsurancePlan"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HealthPlanFormulary"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:merchant",
      "@type": "rdf:Property",
      "rdfs:comment": "'merchant' is an out-dated term for 'seller'.",
      "rdfs:label": "merchant",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:seller"
      }
    },
    {
      "@id": "schema:publisherImprint",
      "@type": "rdf:Property",
      "rdfs:comment": "The publishing division which published the comic.",
      "rdfs:label": "publisherImprint",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:APIReference",
      "@type": "rdfs:Class",
      "rdfs:comment": "Reference documentation for application programming interfaces (APIs).",
      "rdfs:label": "APIReference",
      "rdfs:subClassOf": {
        "@id": "schema:TechArticle"
      }
    },
    {
      "@id": "schema:Nonprofit501c7",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c7: Non-profit type referring to Social and Recreational Clubs.",
      "rdfs:label": "Nonprofit501c7",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:LandmarksOrHistoricalBuildings",
      "@type": "rdfs:Class",
      "rdfs:comment": "An historical landmark or building.",
      "rdfs:label": "LandmarksOrHistoricalBuildings",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:Diet",
      "@type": "rdfs:Class",
      "rdfs:comment": "A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.",
      "rdfs:label": "Diet",
      "rdfs:subClassOf": [
        {
          "@id": "schema:LifestyleModification"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:bioChemInteraction",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org"
      },
      "rdfs:comment": "A BioChemEntity that is known to interact with this item.",
      "rdfs:label": "bioChemInteraction",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BioChemEntity"
      }
    },
    {
      "@id": "schema:secondaryPrevention",
      "@type": "rdf:Property",
      "rdfs:comment": "A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition.",
      "rdfs:label": "secondaryPrevention",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTherapy"
      }
    },
    {
      "@id": "schema:dayOfWeek",
      "@type": "rdf:Property",
      "rdfs:comment": "The day of the week for which these opening hours are valid.",
      "rdfs:label": "dayOfWeek",
      "schema:domainIncludes": [
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:OpeningHoursSpecification"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DayOfWeek"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:CableOrSatelliteService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A service which provides access to media programming like TV or radio. Access may be via cable or satellite.",
      "rdfs:label": "CableOrSatelliteService",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:itemCondition",
      "@type": "rdf:Property",
      "rdfs:comment": "A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.",
      "rdfs:label": "itemCondition",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:MerchantReturnPolicy"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:OfferItemCondition"
      }
    },
    {
      "@id": "schema:MedicalCondition",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.",
      "rdfs:label": "MedicalCondition",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:BusStop",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bus stop.",
      "rdfs:label": "BusStop",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:Offer",
      "@type": "rdfs:Class",
      "rdfs:comment": "An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\\n\\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\\n\\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).",
      "rdfs:label": "Offer",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:seeks",
      "@type": "rdf:Property",
      "rdfs:comment": "A pointer to products or services sought by the organization or person (demand).",
      "rdfs:label": "seeks",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Demand"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Cemetery",
      "@type": "rdfs:Class",
      "rdfs:comment": "A graveyard.",
      "rdfs:label": "Cemetery",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:BusinessEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Business event.",
      "rdfs:label": "BusinessEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:relatedCondition",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical condition associated with this anatomy.",
      "rdfs:label": "relatedCondition",
      "schema:domainIncludes": [
        {
          "@id": "schema:AnatomicalSystem"
        },
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:SuperficialAnatomy"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalCondition"
      }
    },
    {
      "@id": "schema:CookAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of producing/preparing food.",
      "rdfs:label": "CookAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:RemixAlbum",
      "@type": "schema:MusicAlbumProductionType",
      "rdfs:comment": "RemixAlbum.",
      "rdfs:label": "RemixAlbum",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:paymentUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "The URL for sending a payment.",
      "rdfs:label": "paymentUrl",
      "schema:domainIncludes": {
        "@id": "schema:Order"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:targetPlatform",
      "@type": "rdf:Property",
      "rdfs:comment": "Type of app development: phone, Metro style, desktop, XBox, etc.",
      "rdfs:label": "targetPlatform",
      "schema:domainIncludes": {
        "@id": "schema:APIReference"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:sourcedFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "The neurological pathway that originates the neurons.",
      "rdfs:label": "sourcedFrom",
      "schema:domainIncludes": {
        "@id": "schema:Nerve"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BrainStructure"
      }
    },
    {
      "@id": "schema:Nonprofit501c21",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c21: Non-profit type referring to Black Lung Benefit Trusts.",
      "rdfs:label": "Nonprofit501c21",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:inker",
      "@type": "rdf:Property",
      "rdfs:comment": "The individual who traces over the pencil drawings in ink after pencils are complete.",
      "rdfs:label": "inker",
      "schema:domainIncludes": [
        {
          "@id": "schema:VisualArtwork"
        },
        {
          "@id": "schema:ComicIssue"
        },
        {
          "@id": "schema:ComicStory"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:Recipe",
      "@type": "rdfs:Class",
      "rdfs:comment": "A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.",
      "rdfs:label": "Recipe",
      "rdfs:subClassOf": {
        "@id": "schema:HowTo"
      }
    },
    {
      "@id": "schema:AllocateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of organizing tasks/objects/events by associating resources to it.",
      "rdfs:label": "AllocateAction",
      "rdfs:subClassOf": {
        "@id": "schema:OrganizeAction"
      }
    },
    {
      "@id": "schema:contactPoints",
      "@type": "rdf:Property",
      "rdfs:comment": "A contact point for a person or organization.",
      "rdfs:label": "contactPoints",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:ContactPoint"
      },
      "schema:supersededBy": {
        "@id": "schema:contactPoint"
      }
    },
    {
      "@id": "schema:ticketedSeat",
      "@type": "rdf:Property",
      "rdfs:comment": "The seat associated with the ticket.",
      "rdfs:label": "ticketedSeat",
      "schema:domainIncludes": {
        "@id": "schema:Ticket"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Seat"
      }
    },
    {
      "@id": "schema:accessibilityAPI",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates that the resource is compatible with the referenced accessibility API ([WebSchemas wiki lists possible values](http://www.w3.org/wiki/WebSchemas/Accessibility)).",
      "rdfs:label": "accessibilityAPI",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:departureStation",
      "@type": "rdf:Property",
      "rdfs:comment": "The station from which the train departs.",
      "rdfs:label": "departureStation",
      "schema:domainIncludes": {
        "@id": "schema:TrainTrip"
      },
      "schema:rangeIncludes": {
        "@id": "schema:TrainStation"
      }
    },
    {
      "@id": "schema:map",
      "@type": "rdf:Property",
      "rdfs:comment": "A URL to a map of the place.",
      "rdfs:label": "map",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      },
      "schema:supersededBy": {
        "@id": "schema:hasMap"
      }
    },
    {
      "@id": "schema:MedicalGuidelineContraindication",
      "@type": "rdfs:Class",
      "rdfs:comment": "A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.",
      "rdfs:label": "MedicalGuidelineContraindication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:legalName",
      "@type": "rdf:Property",
      "rdfs:comment": "The official name of the organization, e.g. the registered company name.",
      "rdfs:label": "legalName",
      "schema:domainIncludes": {
        "@id": "schema:Organization"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:OriginalShippingFees",
      "@type": "schema:ReturnFeesEnumeration",
      "rdfs:comment": "Specifies that the customer must pay the original shipping costs when returning a product.",
      "rdfs:label": "OriginalShippingFees",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2288"
      }
    },
    {
      "@id": "schema:Nonprofit501c27",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c27: Non-profit type referring to State-Sponsored Workers' Compensation Reinsurance Organizations.",
      "rdfs:label": "Nonprofit501c27",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:targetProduct",
      "@type": "rdf:Property",
      "rdfs:comment": "Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.",
      "rdfs:label": "targetProduct",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareSourceCode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SoftwareApplication"
      }
    },
    {
      "@id": "schema:relatedStructure",
      "@type": "rdf:Property",
      "rdfs:comment": "Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system.",
      "rdfs:label": "relatedStructure",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalSystem"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:Menu",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured representation of food or drink items available from a FoodEstablishment.",
      "rdfs:label": "Menu",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:inventoryLevel",
      "@type": "rdf:Property",
      "rdfs:comment": "The current approximate inventory level for the item or items.",
      "rdfs:label": "inventoryLevel",
      "schema:domainIncludes": [
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:SomeProducts"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:LowSaltDiet",
      "@type": "schema:RestrictedDiet",
      "rdfs:comment": "A diet focused on reduced sodium intake.",
      "rdfs:label": "LowSaltDiet"
    },
    {
      "@id": "schema:ElementarySchool",
      "@type": "rdfs:Class",
      "rdfs:comment": "An elementary school.",
      "rdfs:label": "ElementarySchool",
      "rdfs:subClassOf": {
        "@id": "schema:EducationalOrganization"
      }
    },
    {
      "@id": "schema:version",
      "@type": "rdf:Property",
      "rdfs:comment": "The version of the CreativeWork embodied by a specified resource.",
      "rdfs:label": "version",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:ParentAudience",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of characteristics describing parents, who can be interested in viewing some content.",
      "rdfs:label": "ParentAudience",
      "rdfs:subClassOf": {
        "@id": "schema:PeopleAudience"
      }
    },
    {
      "@id": "schema:educationalRole",
      "@type": "rdf:Property",
      "rdfs:comment": "An educationalRole of an EducationalAudience.",
      "rdfs:label": "educationalRole",
      "schema:domainIncludes": {
        "@id": "schema:EducationalAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:eventSchedule",
      "@type": "rdf:Property",
      "rdfs:comment": "Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of\n      repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly\n      gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that\n      is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated\n      [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months\n      or seasons.",
      "rdfs:label": "eventSchedule",
      "schema:domainIncludes": {
        "@id": "schema:Event"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Schedule"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:Dataset",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": [
        {
          "@id": "http://rdfs.org/ns/void#Dataset"
        },
        {
          "@id": "http://www.w3.org/ns/dcat#Dataset"
        },
        {
          "@id": "http://purl.org/dc/dcmitype/Dataset"
        }
      ],
      "rdfs:comment": "A body of structured information describing some topic(s) of interest.",
      "rdfs:label": "Dataset",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_DatasetClass"
      }
    },
    {
      "@id": "schema:Fungus",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "Pathogenic fungus.",
      "rdfs:label": "Fungus",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:course",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The course where this action was taken.",
      "rdfs:label": "course",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      },
      "schema:supersededBy": {
        "@id": "schema:exerciseCourse"
      }
    },
    {
      "@id": "schema:Courthouse",
      "@type": "rdfs:Class",
      "rdfs:comment": "A courthouse.",
      "rdfs:label": "Courthouse",
      "rdfs:subClassOf": {
        "@id": "schema:GovernmentBuilding"
      }
    },
    {
      "@id": "schema:RearWheelDriveConfiguration",
      "@type": "schema:DriveWheelConfigurationValue",
      "rdfs:comment": "Real-wheel drive is a transmission layout where the engine drives the rear wheels.",
      "rdfs:label": "RearWheelDriveConfiguration",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:restockingFee",
      "@type": "rdf:Property",
      "rdfs:comment": "Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use [[Number]] to specify a percentage of the product price paid by the customer.",
      "rdfs:label": "restockingFee",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:RadioSeason",
      "@type": "rdfs:Class",
      "rdfs:comment": "Season dedicated to radio broadcast and associated online delivery.",
      "rdfs:label": "RadioSeason",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeason"
      }
    },
    {
      "@id": "schema:icaoCode",
      "@type": "rdf:Property",
      "rdfs:comment": "ICAO identifier for an airport.",
      "rdfs:label": "icaoCode",
      "schema:domainIncludes": {
        "@id": "schema:Airport"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:cookingMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The method of cooking, such as Frying, Steaming, ...",
      "rdfs:label": "cookingMethod",
      "schema:domainIncludes": {
        "@id": "schema:Recipe"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Nonprofit501c24",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c24: Non-profit type referring to Section 4049 ERISA Trusts.",
      "rdfs:label": "Nonprofit501c24",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:NLNonprofitType",
      "@type": "rdfs:Class",
      "rdfs:comment": "NLNonprofitType: Non-profit organization type originating from the Netherlands.",
      "rdfs:label": "NLNonprofitType",
      "rdfs:subClassOf": {
        "@id": "schema:NonprofitType"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:OrderDelivered",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing successful delivery of an order.",
      "rdfs:label": "OrderDelivered"
    },
    {
      "@id": "schema:financialAidEligible",
      "@type": "rdf:Property",
      "rdfs:comment": "A financial aid type or program which students may use to pay for tuition or fees associated with the program.",
      "rdfs:label": "financialAidEligible",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2418"
      }
    },
    {
      "@id": "schema:AboutPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: About page.",
      "rdfs:label": "AboutPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:DrugStrength",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific strength in which a medical drug is available in a specific country.",
      "rdfs:label": "DrugStrength",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIntangible"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Aquarium",
      "@type": "rdfs:Class",
      "rdfs:comment": "Aquarium.",
      "rdfs:label": "Aquarium",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:Library",
      "@type": "rdfs:Class",
      "rdfs:comment": "A library.",
      "rdfs:label": "Library",
      "rdfs:subClassOf": {
        "@id": "schema:LocalBusiness"
      }
    },
    {
      "@id": "schema:Taxi",
      "@type": "rdfs:Class",
      "rdfs:comment": "A taxi.",
      "rdfs:label": "Taxi",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      },
      "schema:supersededBy": {
        "@id": "schema:TaxiService"
      }
    },
    {
      "@id": "schema:applicantLocationRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.",
      "rdfs:label": "applicantLocationRequirements",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2083"
      }
    },
    {
      "@id": "schema:bodyLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "Location in the body of the anatomical structure.",
      "rdfs:label": "bodyLocation",
      "schema:domainIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:MedicalProcedure"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:bestRating",
      "@type": "rdf:Property",
      "rdfs:comment": "The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.",
      "rdfs:label": "bestRating",
      "schema:domainIncludes": {
        "@id": "schema:Rating"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Number"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:CheckInAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\\n\\nRelated actions:\\n\\n* [[CheckOutAction]]: The antonym of CheckInAction.\\n* [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.",
      "rdfs:label": "CheckInAction",
      "rdfs:subClassOf": {
        "@id": "schema:CommunicateAction"
      }
    },
    {
      "@id": "schema:instrument",
      "@type": "rdf:Property",
      "rdfs:comment": "The object that helped the agent perform the action. e.g. John wrote a book with *a pen*.",
      "rdfs:label": "instrument",
      "schema:domainIncludes": {
        "@id": "schema:Action"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:learningResourceType",
      "@type": "rdf:Property",
      "rdfs:comment": "The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.",
      "rdfs:label": "learningResourceType",
      "schema:domainIncludes": [
        {
          "@id": "schema:LearningResource"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        }
      ]
    },
    {
      "@id": "schema:postalCodeRange",
      "@type": "rdf:Property",
      "rdfs:comment": "A defined range of postal codes.",
      "rdfs:label": "postalCodeRange",
      "schema:domainIncludes": {
        "@id": "schema:DefinedRegion"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PostalCodeRangeSpecification"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:MedicalClinic",
      "@type": "rdfs:Class",
      "rdfs:comment": "A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.",
      "rdfs:label": "MedicalClinic",
      "rdfs:subClassOf": [
        {
          "@id": "schema:MedicalOrganization"
        },
        {
          "@id": "schema:MedicalBusiness"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:issuedBy",
      "@type": "rdf:Property",
      "rdfs:comment": "The organization issuing the ticket or permit.",
      "rdfs:label": "issuedBy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Ticket"
        },
        {
          "@id": "schema:Permit"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:passengerPriorityStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).",
      "rdfs:label": "passengerPriorityStatus",
      "schema:domainIncludes": {
        "@id": "schema:FlightReservation"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:dateReceived",
      "@type": "rdf:Property",
      "rdfs:comment": "The date/time the message was received if a single recipient exists.",
      "rdfs:label": "dateReceived",
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:Artery",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.bioontology.org/ontology/SNOMEDCT/51114001"
      },
      "rdfs:comment": "A type of blood vessel that specifically carries blood away from the heart.",
      "rdfs:label": "Artery",
      "rdfs:subClassOf": {
        "@id": "schema:Vessel"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:additionalProperty",
      "@type": "rdf:Property",
      "rdfs:comment": "A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\\n\\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.\n",
      "rdfs:label": "additionalProperty",
      "schema:domainIncludes": [
        {
          "@id": "schema:MerchantReturnPolicy"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:PropertyValue"
      }
    },
    {
      "@id": "schema:competitor",
      "@type": "rdf:Property",
      "rdfs:comment": "A competitor in a sports event.",
      "rdfs:label": "competitor",
      "schema:domainIncludes": {
        "@id": "schema:SportsEvent"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:SportsTeam"
        }
      ]
    },
    {
      "@id": "schema:InteractAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of interacting with another person or organization.",
      "rdfs:label": "InteractAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:diversityStaffingReport",
      "@type": "rdf:Property",
      "rdfs:comment": "For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.",
      "rdfs:label": "diversityStaffingReport",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:NewsMediaOrganization"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Article"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:minimumPaymentDue",
      "@type": "rdf:Property",
      "rdfs:comment": "The minimum payment required at this time.",
      "rdfs:label": "minimumPaymentDue",
      "schema:domainIncludes": {
        "@id": "schema:Invoice"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MonetaryAmount"
        },
        {
          "@id": "schema:PriceSpecification"
        }
      ]
    },
    {
      "@id": "schema:Conversation",
      "@type": "rdfs:Class",
      "rdfs:comment": "One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.",
      "rdfs:label": "Conversation",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:drugClass",
      "@type": "rdf:Property",
      "rdfs:comment": "The class of drug this belongs to (e.g., statins).",
      "rdfs:label": "drugClass",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DrugClass"
      }
    },
    {
      "@id": "schema:InvestmentFund",
      "@type": "rdfs:Class",
      "rdfs:comment": "A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.",
      "rdfs:label": "InvestmentFund",
      "rdfs:subClassOf": {
        "@id": "schema:InvestmentOrDeposit"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        }
      ]
    },
    {
      "@id": "schema:urlTemplate",
      "@type": "rdf:Property",
      "rdfs:comment": "An url template (RFC6570) that will be used to construct the target of the execution of the action.",
      "rdfs:label": "urlTemplate",
      "schema:domainIncludes": {
        "@id": "schema:EntryPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:AdvertiserContentArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.",
      "rdfs:label": "AdvertiserContentArticle",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        }
      ]
    },
    {
      "@id": "schema:TransformedContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'transformed content' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'transformed content':  or all of the video has been manipulated to transform the footage itself. This category includes using tools like the Adobe Suite to change the speed of the video, add or remove visual elements or dub audio. Deepfakes are also a subset of transformation.\n\nFor an [[ImageObject]] to be transformed content': Adding or deleting visual elements to give the image a different meaning with the intention to mislead.\n\nFor an [[ImageObject]] with embedded text to be 'transformed content': Adding or deleting visual elements to give the image a different meaning with the intention to mislead.\n\nFor an [[AudioObject]] to be 'transformed content': Part or all of the audio has been manipulated to alter the words or sounds, or the audio has been synthetically generated, such as to create a sound-alike voice.\n",
      "rdfs:label": "TransformedContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:Answer",
      "@type": "rdfs:Class",
      "rdfs:comment": "An answer offered to a question; perhaps correct, perhaps opinionated or wrong.",
      "rdfs:label": "Answer",
      "rdfs:subClassOf": {
        "@id": "schema:Comment"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_QAStackExchange"
      }
    },
    {
      "@id": "schema:MedicalEvidenceLevel",
      "@type": "rdfs:Class",
      "rdfs:comment": "Level of evidence for a medical guideline. Enumerated type.",
      "rdfs:label": "MedicalEvidenceLevel",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:returnShippingFeesAmount",
      "@type": "rdf:Property",
      "rdfs:comment": "Amount of shipping costs for product returns (for any reason). Applicable when property [[returnFees]] equals [[ReturnShippingFees]].",
      "rdfs:label": "returnShippingFeesAmount",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MonetaryAmount"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:DietarySupplement",
      "@type": "rdfs:Class",
      "rdfs:comment": "A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.",
      "rdfs:label": "DietarySupplement",
      "rdfs:subClassOf": {
        "@id": "schema:Substance"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:startTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\\n\\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.",
      "rdfs:label": "startTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:InteractionCounter"
        },
        {
          "@id": "schema:Action"
        },
        {
          "@id": "schema:Schedule"
        },
        {
          "@id": "schema:FoodEstablishmentReservation"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Time"
        },
        {
          "@id": "schema:DateTime"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2493"
      }
    },
    {
      "@id": "schema:OrderPaymentDue",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing that payment is due on an order.",
      "rdfs:label": "OrderPaymentDue"
    },
    {
      "@id": "schema:Friday",
      "@type": "schema:DayOfWeek",
      "rdfs:comment": "The day of the week between Thursday and Saturday.",
      "rdfs:label": "Friday",
      "schema:sameAs": {
        "@id": "http://www.wikidata.org/entity/Q130"
      }
    },
    {
      "@id": "schema:Role",
      "@type": "rdfs:Class",
      "rdfs:comment": "Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\\n\\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).",
      "rdfs:label": "Role",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:TechArticle",
      "@type": "rdfs:Class",
      "rdfs:comment": "A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.",
      "rdfs:label": "TechArticle",
      "rdfs:subClassOf": {
        "@id": "schema:Article"
      }
    },
    {
      "@id": "schema:Genetic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to hereditary transmission and the variation of inherited characteristics and disorders.",
      "rdfs:label": "Genetic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Corporation",
      "@type": "rdfs:Class",
      "rdfs:comment": "Organization: A business corporation.",
      "rdfs:label": "Corporation",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      }
    },
    {
      "@id": "schema:CommentPermission",
      "@type": "schema:DigitalDocumentPermissionType",
      "rdfs:comment": "Permission to add comments to the document.",
      "rdfs:label": "CommentPermission"
    },
    {
      "@id": "schema:GovernmentOrganization",
      "@type": "rdfs:Class",
      "rdfs:comment": "A governmental organization or agency.",
      "rdfs:label": "GovernmentOrganization",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:discussionUrl",
      "@type": "rdf:Property",
      "rdfs:comment": "A link to the page containing the comments of the CreativeWork.",
      "rdfs:label": "discussionUrl",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:URL"
      }
    },
    {
      "@id": "schema:BroadcastEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "An over the air or online broadcast event.",
      "rdfs:label": "BroadcastEvent",
      "rdfs:subClassOf": {
        "@id": "schema:PublicationEvent"
      }
    },
    {
      "@id": "schema:StagedContent",
      "@type": "schema:MediaManipulationRatingEnumeration",
      "rdfs:comment": "Content coded 'staged content' in a [[MediaReview]], considered in the context of how it was published or shared.\n\nFor a [[VideoObject]] to be 'staged content': A video that has been created using actors or similarly contrived.\n\nFor an [[ImageObject]] to be 'staged content': An image that was created using actors or similarly contrived, such as a screenshot of a fake tweet.\n\nFor an [[ImageObject]] with embedded text to be 'staged content': An image that was created using actors or similarly contrived, such as a screenshot of a fake tweet.\n\nFor an [[AudioObject]] to be 'staged content': Audio that has been created using actors or similarly contrived.\n",
      "rdfs:label": "StagedContent",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:TollFree",
      "@type": "schema:ContactPointOption",
      "rdfs:comment": "The associated telephone number is toll free.",
      "rdfs:label": "TollFree"
    },
    {
      "@id": "schema:PaymentAutomaticallyApplied",
      "@type": "schema:PaymentStatusType",
      "rdfs:comment": "An automatic payment system is in place and will be used.",
      "rdfs:label": "PaymentAutomaticallyApplied"
    },
    {
      "@id": "schema:businessDays",
      "@type": "rdf:Property",
      "rdfs:comment": "Days of the week when the merchant typically operates, indicated via opening hours markup.",
      "rdfs:label": "businessDays",
      "schema:domainIncludes": {
        "@id": "schema:ShippingDeliveryTime"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OpeningHoursSpecification"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:Service",
      "@type": "rdfs:Class",
      "rdfs:comment": "A service provided by an organization, e.g. delivery service, print services, etc.",
      "rdfs:label": "Service",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:Canal",
      "@type": "rdfs:Class",
      "rdfs:comment": "A canal, like the Panama Canal.",
      "rdfs:label": "Canal",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:provider",
      "@type": "rdf:Property",
      "rdfs:comment": "The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.",
      "rdfs:label": "provider",
      "schema:domainIncludes": [
        {
          "@id": "schema:Reservation"
        },
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:ParcelDelivery"
        },
        {
          "@id": "schema:Service"
        },
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Trip"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
      }
    },
    {
      "@id": "schema:availableChannel",
      "@type": "rdf:Property",
      "rdfs:comment": "A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).",
      "rdfs:label": "availableChannel",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ServiceChannel"
      }
    },
    {
      "@id": "schema:populationType",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the populationType common to all members of a [[StatisticalPopulation]].",
      "rdfs:label": "populationType",
      "schema:domainIncludes": {
        "@id": "schema:StatisticalPopulation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Class"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2291"
      }
    },
    {
      "@id": "schema:exerciseCourse",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of location. The course where this action was taken.",
      "rdfs:label": "exerciseCourse",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:OpeningHoursSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A structured value providing information about the opening hours of a place or a certain service inside a place.\\n\\n\nThe place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\\n\\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.\n      ",
      "rdfs:label": "OpeningHoursSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:LinkRole",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Role that represents a Web link e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.",
      "rdfs:label": "LinkRole",
      "rdfs:subClassOf": {
        "@id": "schema:Role"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1045"
      }
    },
    {
      "@id": "schema:PlaceboControlledTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A placebo-controlled trial design.",
      "rdfs:label": "PlaceboControlledTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Appearance",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Appearance assessment with clinical examination.",
      "rdfs:label": "Appearance",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryG",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class G as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryG",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:recognizedBy",
      "@type": "rdf:Property",
      "rdfs:comment": "An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation.",
      "rdfs:label": "recognizedBy",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalCredential"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:loser",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The loser of the action.",
      "rdfs:label": "loser",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:WinAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:InstallAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of installing an application.",
      "rdfs:label": "InstallAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:relatedTherapy",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical therapy related to this anatomy.",
      "rdfs:label": "relatedTherapy",
      "schema:domainIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:SuperficialAnatomy"
        },
        {
          "@id": "schema:AnatomicalSystem"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalTherapy"
      }
    },
    {
      "@id": "schema:BuyAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.",
      "rdfs:label": "BuyAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:DriveWheelConfigurationValue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A value indicating which roadwheels will receive torque.",
      "rdfs:label": "DriveWheelConfigurationValue",
      "rdfs:subClassOf": {
        "@id": "schema:QualitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:deliveryMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of instrument. The method of delivery.",
      "rdfs:label": "deliveryMethod",
      "rdfs:subPropertyOf": {
        "@id": "schema:instrument"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:TrackAction"
        },
        {
          "@id": "schema:ReceiveAction"
        },
        {
          "@id": "schema:SendAction"
        },
        {
          "@id": "schema:OrderAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:DeliveryMethod"
      }
    },
    {
      "@id": "schema:OceanBodyOfWater",
      "@type": "rdfs:Class",
      "rdfs:comment": "An ocean (for example, the Pacific).",
      "rdfs:label": "OceanBodyOfWater",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:Bone",
      "@type": "rdfs:Class",
      "rdfs:comment": "Rigid connective tissue that comprises up the skeletal structure of the human body.",
      "rdfs:label": "Bone",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:SizeGroupEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumerates common size groups for various product categories.",
      "rdfs:label": "SizeGroupEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:paymentMethod",
      "@type": "rdf:Property",
      "rdfs:comment": "The name of the credit card or other method of payment for the order.",
      "rdfs:label": "paymentMethod",
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:PaymentMethod"
      }
    },
    {
      "@id": "schema:ViewAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of consuming static visual content.",
      "rdfs:label": "ViewAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:homeLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "A contact location for a person's residence.",
      "rdfs:label": "homeLocation",
      "rdfs:subPropertyOf": {
        "@id": "schema:location"
      },
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:ContactPoint"
        }
      ]
    },
    {
      "@id": "schema:acceptedAnswer",
      "@type": "rdf:Property",
      "rdfs:comment": "The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.",
      "rdfs:label": "acceptedAnswer",
      "rdfs:subPropertyOf": {
        "@id": "schema:suggestedAnswer"
      },
      "schema:domainIncludes": {
        "@id": "schema:Question"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:Answer"
        }
      ]
    },
    {
      "@id": "schema:PercutaneousProcedure",
      "@type": "schema:MedicalProcedureType",
      "rdfs:comment": "A type of medical procedure that involves percutaneous techniques, where access to organs or tissue is achieved via needle-puncture of the skin. For example, catheter-based procedures like stent delivery.",
      "rdfs:label": "PercutaneousProcedure",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:signDetected",
      "@type": "rdf:Property",
      "rdfs:comment": "A sign detected by the test.",
      "rdfs:label": "signDetected",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalSign"
      }
    },
    {
      "@id": "schema:bookingTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The date and time the reservation was booked.",
      "rdfs:label": "bookingTime",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:publicTransportClosuresInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about public transport closures.",
      "rdfs:label": "publicTransportClosuresInfo",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebContent"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:DigitalDocumentPermission",
      "@type": "rdfs:Class",
      "rdfs:comment": "A permission for a particular person or group to access a particular file.",
      "rdfs:label": "DigitalDocumentPermission",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:WearableSizeGroupTall",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Tall\" for wearables.",
      "rdfs:label": "WearableSizeGroupTall",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:ClaimReview",
      "@type": "rdfs:Class",
      "rdfs:comment": "A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).",
      "rdfs:label": "ClaimReview",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1061"
      }
    },
    {
      "@id": "schema:PerformanceRole",
      "@type": "rdfs:Class",
      "rdfs:comment": "A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.",
      "rdfs:label": "PerformanceRole",
      "rdfs:subClassOf": {
        "@id": "schema:Role"
      }
    },
    {
      "@id": "schema:InvoicePrice",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents the invoice price of an offered product.",
      "rdfs:label": "InvoicePrice",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:SRP",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents the suggested retail price (\"SRP\") of an offered product.",
      "rdfs:label": "SRP",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:lyricist",
      "@type": "rdf:Property",
      "rdfs:comment": "The person who wrote the words.",
      "rdfs:label": "lyricist",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:UnRegisterAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of un-registering from a service.\\n\\nRelated actions:\\n\\n* [[RegisterAction]]: antonym of UnRegisterAction.\\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.",
      "rdfs:label": "UnRegisterAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:InForce",
      "@type": "schema:LegalForceStatus",
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#InForce-inForce"
      },
      "rdfs:comment": "Indicates that a legislation is in force.",
      "rdfs:label": "InForce",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        }
      ]
    },
    {
      "@id": "schema:FDAnotEvaluated",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation that the drug in question has not been assigned a pregnancy category designation by the US FDA.",
      "rdfs:label": "FDAnotEvaluated",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:amountOfThisGood",
      "@type": "rdf:Property",
      "rdfs:comment": "The quantity of the goods included in the offer.",
      "rdfs:label": "amountOfThisGood",
      "schema:domainIncludes": {
        "@id": "schema:TypeAndQuantityNode"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:providesBroadcastService",
      "@type": "rdf:Property",
      "rdfs:comment": "The BroadcastService offered on this channel.",
      "rdfs:label": "providesBroadcastService",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastChannel"
      },
      "schema:inverseOf": {
        "@id": "schema:hasBroadcastChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BroadcastService"
      }
    },
    {
      "@id": "schema:frequency",
      "@type": "rdf:Property",
      "rdfs:comment": "How often the dose is taken, e.g. 'daily'.",
      "rdfs:label": "frequency",
      "schema:domainIncludes": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:FDAcategoryB",
      "@type": "schema:DrugPregnancyCategory",
      "rdfs:comment": "A designation by the US FDA signifying that animal reproduction studies have failed to demonstrate a risk to the fetus and there are no adequate and well-controlled studies in pregnant women.",
      "rdfs:label": "FDAcategoryB",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:biomechnicalClass",
      "@type": "rdf:Property",
      "rdfs:comment": "The biomechanical properties of the bone.",
      "rdfs:label": "biomechnicalClass",
      "schema:domainIncludes": {
        "@id": "schema:Joint"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:HealthTopicContent",
      "@type": "rdfs:Class",
      "rdfs:comment": "[[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.\n  ",
      "rdfs:label": "HealthTopicContent",
      "rdfs:subClassOf": {
        "@id": "schema:WebContent"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:OrderAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "An agent orders an object/product/service to be delivered/sent.",
      "rdfs:label": "OrderAction",
      "rdfs:subClassOf": {
        "@id": "schema:TradeAction"
      }
    },
    {
      "@id": "schema:Nonprofit501d",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501d: Non-profit type referring to Religious and Apostolic Associations.",
      "rdfs:label": "Nonprofit501d",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:instructor",
      "@type": "rdf:Property",
      "rdfs:comment": "A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].",
      "rdfs:label": "instructor",
      "schema:domainIncludes": {
        "@id": "schema:CourseInstance"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:WearableSizeGroupWomens",
      "@type": "schema:WearableSizeGroupEnumeration",
      "rdfs:comment": "Size group \"Womens\" for wearables.",
      "rdfs:label": "WearableSizeGroupWomens",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:Infectious",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "Something in medical science that pertains to infectious diseases i.e caused by bacterial, viral, fungal or parasitic infections.",
      "rdfs:label": "Infectious",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Class",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "rdfs:Class"
      },
      "rdfs:comment": "A class, also often called a 'Type'; equivalent to rdfs:Class.",
      "rdfs:label": "Class",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryD",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class D as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryD",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:Integer",
      "@type": "rdfs:Class",
      "rdfs:comment": "Data type: Integer.",
      "rdfs:label": "Integer",
      "rdfs:subClassOf": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:occupationalCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\\n\nNote: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.",
      "rdfs:label": "occupationalCategory",
      "schema:domainIncludes": [
        {
          "@id": "schema:JobPosting"
        },
        {
          "@id": "schema:EducationalOccupationalProgram"
        },
        {
          "@id": "schema:Occupation"
        },
        {
          "@id": "schema:WorkBasedProgram"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:CategoryCode"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2289"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2192"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/2460"
        }
      ]
    },
    {
      "@id": "schema:isVariantOf",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.",
      "rdfs:label": "isVariantOf",
      "schema:domainIncludes": [
        {
          "@id": "schema:ProductModel"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:inverseOf": {
        "@id": "schema:hasVariant"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ProductModel"
        },
        {
          "@id": "schema:ProductGroup"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:OneTimePayments",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "OneTimePayments: this is a benefit for one-time payments for individuals.",
      "rdfs:label": "OneTimePayments",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:Float",
      "@type": "rdfs:Class",
      "rdfs:comment": "Data type: Floating number.",
      "rdfs:label": "Float",
      "rdfs:subClassOf": {
        "@id": "schema:Number"
      }
    },
    {
      "@id": "schema:drug",
      "@type": "rdf:Property",
      "rdfs:comment": "Specifying a drug or medicine used in a medication procedure.",
      "rdfs:label": "drug",
      "schema:domainIncludes": [
        {
          "@id": "schema:MedicalCondition"
        },
        {
          "@id": "schema:TherapeuticProcedure"
        },
        {
          "@id": "schema:Patient"
        },
        {
          "@id": "schema:DrugClass"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Drug"
      }
    },
    {
      "@id": "schema:publishedOn",
      "@type": "rdf:Property",
      "rdfs:comment": "A broadcast service associated with the publication event.",
      "rdfs:label": "publishedOn",
      "schema:domainIncludes": {
        "@id": "schema:PublicationEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:BroadcastService"
      }
    },
    {
      "@id": "schema:callSign",
      "@type": "rdf:Property",
      "rdfs:comment": "A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.",
      "rdfs:label": "callSign",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:BroadcastService"
        },
        {
          "@id": "schema:Vehicle"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2109"
      }
    },
    {
      "@id": "schema:QualitativeValue",
      "@type": "rdfs:Class",
      "rdfs:comment": "A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.",
      "rdfs:label": "QualitativeValue",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:musicCompositionForm",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of composition (e.g. overture, sonata, symphony, etc.).",
      "rdfs:label": "musicCompositionForm",
      "schema:domainIncludes": {
        "@id": "schema:MusicComposition"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:mealService",
      "@type": "rdf:Property",
      "rdfs:comment": "Description of the meals that will be provided or available for purchase.",
      "rdfs:label": "mealService",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:ReadAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of consuming written content.",
      "rdfs:label": "ReadAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:RelatedTopicsHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Other prominent or relevant topics tied to the main topic.",
      "rdfs:label": "RelatedTopicsHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:SportsTeam",
      "@type": "rdfs:Class",
      "rdfs:comment": "Organization: Sports team.",
      "rdfs:label": "SportsTeam",
      "rdfs:subClassOf": {
        "@id": "schema:SportsOrganization"
      }
    },
    {
      "@id": "schema:unnamedSourcesPolicy",
      "@type": "rdf:Property",
      "rdfs:comment": "For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.",
      "rdfs:label": "unnamedSourcesPolicy",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:NewsMediaOrganization"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:memoryRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Minimum memory requirements.",
      "rdfs:label": "memoryRequirements",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:grantee",
      "@type": "rdf:Property",
      "rdfs:comment": "The person, organization, contact point, or audience that has been granted this permission.",
      "rdfs:label": "grantee",
      "schema:domainIncludes": {
        "@id": "schema:DigitalDocumentPermission"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Audience"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:productGroupID",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a textual identifier for a ProductGroup.",
      "rdfs:label": "productGroupID",
      "schema:domainIncludes": {
        "@id": "schema:ProductGroup"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:usedToDiagnose",
      "@type": "rdf:Property",
      "rdfs:comment": "A condition the test is used to diagnose.",
      "rdfs:label": "usedToDiagnose",
      "schema:domainIncludes": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalCondition"
      }
    },
    {
      "@id": "schema:code",
      "@type": "rdf:Property",
      "rdfs:comment": "A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.",
      "rdfs:label": "code",
      "schema:domainIncludes": {
        "@id": "schema:MedicalEntity"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalCode"
      }
    },
    {
      "@id": "schema:gameServer",
      "@type": "rdf:Property",
      "rdfs:comment": "The server on which  it is possible to play the game.",
      "rdfs:label": "gameServer",
      "schema:domainIncludes": {
        "@id": "schema:VideoGame"
      },
      "schema:inverseOf": {
        "@id": "schema:game"
      },
      "schema:rangeIncludes": {
        "@id": "schema:GameServer"
      }
    },
    {
      "@id": "schema:boardingGroup",
      "@type": "rdf:Property",
      "rdfs:comment": "The airline-specific indicator of boarding order / preference.",
      "rdfs:label": "boardingGroup",
      "schema:domainIncludes": {
        "@id": "schema:FlightReservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:SearchResultsPage",
      "@type": "rdfs:Class",
      "rdfs:comment": "Web page type: Search results page.",
      "rdfs:label": "SearchResultsPage",
      "rdfs:subClassOf": {
        "@id": "schema:WebPage"
      }
    },
    {
      "@id": "schema:numberOfAvailableAccommodationUnits",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].",
      "rdfs:label": "numberOfAvailableAccommodationUnits",
      "schema:domainIncludes": [
        {
          "@id": "schema:FloorPlan"
        },
        {
          "@id": "schema:ApartmentComplex"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2373"
      }
    },
    {
      "@id": "schema:Registry",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "A registry-based study design.",
      "rdfs:label": "Registry",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Periodical",
      "@type": "rdfs:Class",
      "http://www.w3.org/2002/07/owl#equivalentClass": {
        "@id": "http://purl.org/ontology/bibo/Periodical"
      },
      "rdfs:comment": "A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.\\n\\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).",
      "rdfs:label": "Periodical",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWorkSeries"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:CassetteFormat",
      "@type": "schema:MusicReleaseFormatType",
      "rdfs:comment": "CassetteFormat.",
      "rdfs:label": "CassetteFormat",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:availableFrom",
      "@type": "rdf:Property",
      "rdfs:comment": "When the item is available for pickup from the store, locker, etc.",
      "rdfs:label": "availableFrom",
      "schema:domainIncludes": {
        "@id": "schema:DeliveryEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:diseasePreventionInfo",
      "@type": "rdf:Property",
      "rdfs:comment": "Information about disease prevention.",
      "rdfs:label": "diseasePreventionInfo",
      "schema:domainIncludes": {
        "@id": "schema:SpecialAnnouncement"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:WebContent"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2490"
      }
    },
    {
      "@id": "schema:mechanismOfAction",
      "@type": "rdf:Property",
      "rdfs:comment": "The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.",
      "rdfs:label": "mechanismOfAction",
      "schema:domainIncludes": [
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:DietarySupplement"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:CategoryCode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A Category Code.",
      "rdfs:label": "CategoryCode",
      "rdfs:subClassOf": {
        "@id": "schema:DefinedTerm"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/894"
      }
    },
    {
      "@id": "schema:followup",
      "@type": "rdf:Property",
      "rdfs:comment": "Typical or recommended followup care after the procedure is performed.",
      "rdfs:label": "followup",
      "schema:domainIncludes": {
        "@id": "schema:MedicalProcedure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:coach",
      "@type": "rdf:Property",
      "rdfs:comment": "A person that acts in a coaching role for a sports team.",
      "rdfs:label": "coach",
      "schema:domainIncludes": {
        "@id": "schema:SportsTeam"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:WriteAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of authoring written creative content.",
      "rdfs:label": "WriteAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:coverageStartTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.",
      "rdfs:label": "coverageStartTime",
      "schema:domainIncludes": {
        "@id": "schema:LiveBlogPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DateTime"
      }
    },
    {
      "@id": "schema:PerformAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of participating in performance arts.",
      "rdfs:label": "PerformAction",
      "rdfs:subClassOf": {
        "@id": "schema:PlayAction"
      }
    },
    {
      "@id": "schema:checkoutTime",
      "@type": "rdf:Property",
      "rdfs:comment": "The latest someone may check out of a lodging establishment.",
      "rdfs:label": "checkoutTime",
      "schema:domainIncludes": [
        {
          "@id": "schema:LodgingBusiness"
        },
        {
          "@id": "schema:LodgingReservation"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:DateTime"
        },
        {
          "@id": "schema:Time"
        }
      ]
    },
    {
      "@id": "schema:bloodSupply",
      "@type": "rdf:Property",
      "rdfs:comment": "The blood vessel that carries blood from the heart to the muscle.",
      "rdfs:label": "bloodSupply",
      "schema:domainIncludes": {
        "@id": "schema:Muscle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Vessel"
      }
    },
    {
      "@id": "schema:Dermatology",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that pertains to diagnosis and treatment of disorders of skin.",
      "rdfs:label": "Dermatology",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:contentSize",
      "@type": "rdf:Property",
      "rdfs:comment": "File size in (mega/kilo) bytes.",
      "rdfs:label": "contentSize",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Trip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A trip or journey. An itinerary of visits to one or more places.",
      "rdfs:label": "Trip",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
      }
    },
    {
      "@id": "schema:fileFormat",
      "@type": "rdf:Property",
      "rdfs:comment": "Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.",
      "rdfs:label": "fileFormat",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:supersededBy": {
        "@id": "schema:encodingFormat"
      }
    },
    {
      "@id": "schema:SportsClub",
      "@type": "rdfs:Class",
      "rdfs:comment": "A sports club.",
      "rdfs:label": "SportsClub",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:partOfTrip",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifies that this [[Trip]] is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip.",
      "rdfs:label": "partOfTrip",
      "schema:domainIncludes": {
        "@id": "schema:Trip"
      },
      "schema:inverseOf": {
        "@id": "schema:subTrip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Trip"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        }
      ]
    },
    {
      "@id": "schema:requiredMinAge",
      "@type": "rdf:Property",
      "rdfs:comment": "Audiences defined by a person's minimum age.",
      "rdfs:label": "requiredMinAge",
      "schema:domainIncludes": {
        "@id": "schema:PeopleAudience"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:percentile10",
      "@type": "rdf:Property",
      "rdfs:comment": "The 10th percentile value.",
      "rdfs:label": "percentile10",
      "schema:domainIncludes": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:hostingOrganization",
      "@type": "rdf:Property",
      "rdfs:comment": "The organization (airline, travelers' club, etc.) the membership is made with.",
      "rdfs:label": "hostingOrganization",
      "schema:domainIncludes": {
        "@id": "schema:ProgramMembership"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Organization"
      }
    },
    {
      "@id": "schema:WebAPI",
      "@type": "rdfs:Class",
      "rdfs:comment": "An application programming interface accessible over Web/Internet technologies.",
      "rdfs:label": "WebAPI",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1423"
      }
    },
    {
      "@id": "schema:producer",
      "@type": "rdf:Property",
      "rdfs:comment": "The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).",
      "rdfs:label": "producer",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ]
    },
    {
      "@id": "schema:rsvpResponse",
      "@type": "rdf:Property",
      "rdfs:comment": "The response (yes, no, maybe) to the RSVP.",
      "rdfs:label": "rsvpResponse",
      "schema:domainIncludes": {
        "@id": "schema:RsvpAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:RsvpResponseType"
      }
    },
    {
      "@id": "schema:validIn",
      "@type": "rdf:Property",
      "rdfs:comment": "The geographic area where a permit or similar thing is valid.",
      "rdfs:label": "validIn",
      "schema:domainIncludes": [
        {
          "@id": "schema:Permit"
        },
        {
          "@id": "schema:EducationalOccupationalCredential"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:AdministrativeArea"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:negativeNotes",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), negative considerations - either as unstructured text, or a list.",
      "rdfs:label": "negativeNotes",
      "schema:domainIncludes": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:ListItem"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:WebContent"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2832"
      }
    },
    {
      "@id": "schema:FreeReturn",
      "@type": "schema:ReturnFeesEnumeration",
      "rdfs:comment": "Specifies that product returns are free of charge for the customer.",
      "rdfs:label": "FreeReturn",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:citation",
      "@type": "rdf:Property",
      "rdfs:comment": "A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.",
      "rdfs:label": "citation",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:NoninvasiveProcedure",
      "@type": "schema:MedicalProcedureType",
      "rdfs:comment": "A type of medical procedure that involves noninvasive techniques.",
      "rdfs:label": "NoninvasiveProcedure",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:HomeGoodsStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "A home goods store.",
      "rdfs:label": "HomeGoodsStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:subReservation",
      "@type": "rdf:Property",
      "rdfs:comment": "The individual reservations included in the package. Typically a repeated property.",
      "rdfs:label": "subReservation",
      "schema:domainIncludes": {
        "@id": "schema:ReservationPackage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Reservation"
      }
    },
    {
      "@id": "schema:EatAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of swallowing solid objects.",
      "rdfs:label": "EatAction",
      "rdfs:subClassOf": {
        "@id": "schema:ConsumeAction"
      }
    },
    {
      "@id": "schema:claimReviewed",
      "@type": "rdf:Property",
      "rdfs:comment": "A short summary of the specific claims reviewed in a ClaimReview.",
      "rdfs:label": "claimReviewed",
      "schema:domainIncludes": {
        "@id": "schema:ClaimReview"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1061"
      }
    },
    {
      "@id": "schema:arrivalGate",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifier of the flight's arrival gate.",
      "rdfs:label": "arrivalGate",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Hotel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.\n",
      "rdfs:label": "Hotel",
      "rdfs:subClassOf": {
        "@id": "schema:LodgingBusiness"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:MoneyTransfer",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of transferring money from one place to another place. This may occur electronically or physically.",
      "rdfs:label": "MoneyTransfer",
      "rdfs:subClassOf": {
        "@id": "schema:TransferAction"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
        }
      ]
    },
    {
      "@id": "schema:Code",
      "@type": "rdfs:Class",
      "rdfs:comment": "Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.",
      "rdfs:label": "Code",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:supersededBy": {
        "@id": "schema:SoftwareSourceCode"
      }
    },
    {
      "@id": "schema:ImagingTest",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any medical imaging modality typically used for diagnostic purposes.",
      "rdfs:label": "ImagingTest",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalTest"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Map",
      "@type": "rdfs:Class",
      "rdfs:comment": "A map.",
      "rdfs:label": "Map",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:directors",
      "@type": "rdf:Property",
      "rdfs:comment": "A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.",
      "rdfs:label": "directors",
      "schema:domainIncludes": [
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:RadioSeries"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:TVSeries"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:director"
      }
    },
    {
      "@id": "schema:masthead",
      "@type": "rdf:Property",
      "rdfs:comment": "For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial management.",
      "rdfs:label": "masthead",
      "rdfs:subPropertyOf": {
        "@id": "schema:publishingPrinciples"
      },
      "schema:domainIncludes": {
        "@id": "schema:NewsMediaOrganization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1525"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:Play",
      "@type": "rdfs:Class",
      "rdfs:comment": "A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].",
      "rdfs:label": "Play",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1816"
      }
    },
    {
      "@id": "schema:broadcastServiceTier",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of service required to have access to the channel (e.g. Standard or Premium).",
      "rdfs:label": "broadcastServiceTier",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:broadcastFrequencyValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The frequency in MHz for a particular broadcast.",
      "rdfs:label": "broadcastFrequencyValue",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastFrequencySpecification"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1004"
      }
    },
    {
      "@id": "schema:WearableSizeSystemMX",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "Mexican size system for wearables.",
      "rdfs:label": "WearableSizeSystemMX",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:TypesHealthAspect",
      "@type": "schema:HealthAspectEnumeration",
      "rdfs:comment": "Categorization and other types related to a topic.",
      "rdfs:label": "TypesHealthAspect",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2374"
      }
    },
    {
      "@id": "schema:FoodService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A food service, like breakfast, lunch, or dinner.",
      "rdfs:label": "FoodService",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      },
      "schema:source": {
        "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology"
      }
    },
    {
      "@id": "schema:tongueWeight",
      "@type": "rdf:Property",
      "rdfs:comment": "The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR)\\n\\nTypical unit code(s): KGM for kilogram, LBR for pound\\n\\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "tongueWeight",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:GovernmentPermit",
      "@type": "rdfs:Class",
      "rdfs:comment": "A permit issued by a government agency.",
      "rdfs:label": "GovernmentPermit",
      "rdfs:subClassOf": {
        "@id": "schema:Permit"
      }
    },
    {
      "@id": "schema:vehicleSeatingCapacity",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.\\n\\nTypical unit code(s): C62 for persons.",
      "rdfs:label": "vehicleSeatingCapacity",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Number"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:OfferForPurchase",
      "@type": "rdfs:Class",
      "rdfs:comment": "An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose\n  [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for\n  background on the underlying concepts.\n  ",
      "rdfs:label": "OfferForPurchase",
      "rdfs:subClassOf": {
        "@id": "schema:Offer"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2348"
      }
    },
    {
      "@id": "schema:WearableSizeSystemGS1",
      "@type": "schema:WearableSizeSystemEnumeration",
      "rdfs:comment": "GS1 (formerly NRF) size system for wearables.",
      "rdfs:label": "WearableSizeSystemGS1",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:CriticReview",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.",
      "rdfs:label": "CriticReview",
      "rdfs:subClassOf": {
        "@id": "schema:Review"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1589"
      }
    },
    {
      "@id": "schema:Reservoir",
      "@type": "rdfs:Class",
      "rdfs:comment": "A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.",
      "rdfs:label": "Reservoir",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:MeasurementTypeEnumeration",
      "@type": "rdfs:Class",
      "rdfs:comment": "Enumeration of common measurement types (or dimensions), for example \"chest\" for a person, \"inseam\" for pants, \"gauge\" for screws, or \"wheel\" for bicycles.",
      "rdfs:label": "MeasurementTypeEnumeration",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:reservationFor",
      "@type": "rdf:Property",
      "rdfs:comment": "The thing -- flight, event, restaurant,etc. being reserved.",
      "rdfs:label": "reservationFor",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:activityFrequency",
      "@type": "rdf:Property",
      "rdfs:comment": "How often one should engage in the activity.",
      "rdfs:label": "activityFrequency",
      "schema:domainIncludes": {
        "@id": "schema:ExercisePlan"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:MedicalImagingTechnique",
      "@type": "rdfs:Class",
      "rdfs:comment": "Any medical imaging modality typically used for diagnostic purposes. Enumerated type.",
      "rdfs:label": "MedicalImagingTechnique",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalEnumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:HealthPlanFormulary",
      "@type": "rdfs:Class",
      "rdfs:comment": "For a given health insurance plan, the specification for costs and coverage of prescription drugs. ",
      "rdfs:label": "HealthPlanFormulary",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1062"
      }
    },
    {
      "@id": "schema:FollowAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\\n\\nRelated actions:\\n\\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\\n* [[RegisterAction]]: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).",
      "rdfs:label": "FollowAction",
      "rdfs:subClassOf": {
        "@id": "schema:InteractAction"
      }
    },
    {
      "@id": "schema:TouristTrip",
      "@type": "rdfs:Class",
      "rdfs:comment": "A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.\n  (See examples below).",
      "rdfs:label": "TouristTrip",
      "rdfs:subClassOf": {
        "@id": "schema:Trip"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1810"
        }
      ]
    },
    {
      "@id": "schema:TVEpisode",
      "@type": "rdfs:Class",
      "rdfs:comment": "A TV episode which can be part of a series or season.",
      "rdfs:label": "TVEpisode",
      "rdfs:subClassOf": {
        "@id": "schema:Episode"
      }
    },
    {
      "@id": "schema:SoldOut",
      "@type": "schema:ItemAvailability",
      "rdfs:comment": "Indicates that the item has sold out.",
      "rdfs:label": "SoldOut"
    },
    {
      "@id": "schema:dependencies",
      "@type": "rdf:Property",
      "rdfs:comment": "Prerequisites needed to fulfill steps in article.",
      "rdfs:label": "dependencies",
      "schema:domainIncludes": {
        "@id": "schema:TechArticle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:insertion",
      "@type": "rdf:Property",
      "rdfs:comment": "The place of attachment of a muscle, or what the muscle moves.",
      "rdfs:label": "insertion",
      "schema:domainIncludes": {
        "@id": "schema:Muscle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalStructure"
      }
    },
    {
      "@id": "schema:employmentType",
      "@type": "rdf:Property",
      "rdfs:comment": "Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).",
      "rdfs:label": "employmentType",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Waterfall",
      "@type": "rdfs:Class",
      "rdfs:comment": "A waterfall, like Niagara.",
      "rdfs:label": "Waterfall",
      "rdfs:subClassOf": {
        "@id": "schema:BodyOfWater"
      }
    },
    {
      "@id": "schema:parentItem",
      "@type": "rdf:Property",
      "rdfs:comment": "The parent of a question, answer or item in general.",
      "rdfs:label": "parentItem",
      "schema:domainIncludes": {
        "@id": "schema:Comment"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Comment"
      }
    },
    {
      "@id": "schema:MovingCompany",
      "@type": "rdfs:Class",
      "rdfs:comment": "A moving company.",
      "rdfs:label": "MovingCompany",
      "rdfs:subClassOf": {
        "@id": "schema:HomeAndConstructionBusiness"
      }
    },
    {
      "@id": "schema:free",
      "@type": "rdf:Property",
      "rdfs:comment": "A flag to signal that the item, event, or place is accessible for free.",
      "rdfs:label": "free",
      "schema:domainIncludes": {
        "@id": "schema:PublicationEvent"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      },
      "schema:supersededBy": {
        "@id": "schema:isAccessibleForFree"
      }
    },
    {
      "@id": "schema:ReservationPending",
      "@type": "schema:ReservationStatusType",
      "rdfs:comment": "The status of a reservation when a request has been sent, but not confirmed.",
      "rdfs:label": "ReservationPending"
    },
    {
      "@id": "schema:ApartmentComplex",
      "@type": "rdfs:Class",
      "rdfs:comment": "Residence type: Apartment complex.",
      "rdfs:label": "ApartmentComplex",
      "rdfs:subClassOf": {
        "@id": "schema:Residence"
      }
    },
    {
      "@id": "schema:customerRemorseReturnLabelSource",
      "@type": "rdf:Property",
      "rdfs:comment": "The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due to customer remorse.",
      "rdfs:label": "customerRemorseReturnLabelSource",
      "schema:domainIncludes": {
        "@id": "schema:MerchantReturnPolicy"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ReturnLabelSourceEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2880"
      }
    },
    {
      "@id": "schema:valueReference",
      "@type": "rdf:Property",
      "rdfs:comment": "A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.",
      "rdfs:label": "valueReference",
      "schema:domainIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:QualitativeValue"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:StructuredValue"
        },
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:MeasurementTypeEnumeration"
        },
        {
          "@id": "schema:QuantitativeValue"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Enumeration"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:addressRegion",
      "@type": "rdf:Property",
      "rdfs:comment": "The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country) ",
      "rdfs:label": "addressRegion",
      "schema:domainIncludes": [
        {
          "@id": "schema:DefinedRegion"
        },
        {
          "@id": "schema:PostalAddress"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:sportsTeam",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The sports team that participated on this action.",
      "rdfs:label": "sportsTeam",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:ExerciseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:SportsTeam"
      }
    },
    {
      "@id": "schema:publicationType",
      "@type": "rdf:Property",
      "rdfs:comment": "The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).",
      "rdfs:label": "publicationType",
      "schema:domainIncludes": {
        "@id": "schema:MedicalScholarlyArticle"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:advanceBookingRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "The amount of time that is required between accepting the offer and the actual usage of the resource or service.",
      "rdfs:label": "advanceBookingRequirement",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:partOfSystem",
      "@type": "rdf:Property",
      "rdfs:comment": "The anatomical or organ system that this structure is part of.",
      "rdfs:label": "partOfSystem",
      "schema:domainIncludes": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:AnatomicalSystem"
      }
    },
    {
      "@id": "schema:priceSpecification",
      "@type": "rdf:Property",
      "rdfs:comment": "One or more detailed price specifications, indicating the unit price and delivery or payment charges.",
      "rdfs:label": "priceSpecification",
      "schema:domainIncludes": [
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:TradeAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:Suspended",
      "@type": "schema:MedicalStudyStatus",
      "rdfs:comment": "Suspended.",
      "rdfs:label": "Suspended",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:EBook",
      "@type": "schema:BookFormatType",
      "rdfs:comment": "Book format: Ebook.",
      "rdfs:label": "EBook"
    },
    {
      "@id": "schema:Vessel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.",
      "rdfs:label": "Vessel",
      "rdfs:subClassOf": {
        "@id": "schema:AnatomicalStructure"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:associatedPathophysiology",
      "@type": "rdf:Property",
      "rdfs:comment": "If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.",
      "rdfs:label": "associatedPathophysiology",
      "schema:domainIncludes": [
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:SuperficialAnatomy"
        },
        {
          "@id": "schema:AnatomicalSystem"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Florist",
      "@type": "rdfs:Class",
      "rdfs:comment": "A florist.",
      "rdfs:label": "Florist",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:Psychiatric",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that is concerned with the study, treatment, and prevention of mental illness, using both medical and psychological therapies.",
      "rdfs:label": "Psychiatric",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:playerType",
      "@type": "rdf:Property",
      "rdfs:comment": "Player type required&#x2014;for example, Flash or Silverlight.",
      "rdfs:label": "playerType",
      "schema:domainIncludes": {
        "@id": "schema:MediaObject"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:sugarContent",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of grams of sugar.",
      "rdfs:label": "sugarContent",
      "schema:domainIncludes": {
        "@id": "schema:NutritionInformation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Mass"
      }
    },
    {
      "@id": "schema:monoisotopicMolecularWeight",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/MolecularEntity"
      },
      "rdfs:comment": "The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include the units the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.",
      "rdfs:label": "monoisotopicMolecularWeight",
      "schema:domainIncludes": {
        "@id": "schema:MolecularEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:QuantitativeValue"
        }
      ]
    },
    {
      "@id": "schema:isEncodedByBioChemEntity",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Gene"
      },
      "rdfs:comment": "Another BioChemEntity encoding by this one.",
      "rdfs:label": "isEncodedByBioChemEntity",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:inverseOf": {
        "@id": "schema:encodesBioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Gene"
      }
    },
    {
      "@id": "schema:MaximumDoseSchedule",
      "@type": "rdfs:Class",
      "rdfs:comment": "The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.",
      "rdfs:label": "MaximumDoseSchedule",
      "rdfs:subClassOf": {
        "@id": "schema:DoseSchedule"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:Virus",
      "@type": "schema:InfectiousAgentClass",
      "rdfs:comment": "Pathogenic virus that causes viral infection.",
      "rdfs:label": "Virus",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:ineligibleRegion",
      "@type": "rdf:Property",
      "rdfs:comment": "The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\\n\\nSee also [[eligibleRegion]].\n      ",
      "rdfs:label": "ineligibleRegion",
      "schema:domainIncludes": [
        {
          "@id": "schema:ActionAccessSpecification"
        },
        {
          "@id": "schema:DeliveryChargeSpecification"
        },
        {
          "@id": "schema:Offer"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:MediaObject"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:GeoShape"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2242"
      }
    },
    {
      "@id": "schema:touristType",
      "@type": "rdf:Property",
      "rdfs:comment": "Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc. ",
      "rdfs:label": "touristType",
      "schema:domainIncludes": [
        {
          "@id": "schema:TouristDestination"
        },
        {
          "@id": "schema:TouristAttraction"
        },
        {
          "@id": "schema:TouristTrip"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Audience"
        }
      ],
      "schema:source": [
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it"
        },
        {
          "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism"
        }
      ]
    },
    {
      "@id": "schema:EventMovedOnline",
      "@type": "schema:EventStatusType",
      "rdfs:comment": "Indicates that the event was changed to allow online participation. See [[eventAttendanceMode]] for specifics of whether it is now fully or partially online.",
      "rdfs:label": "EventMovedOnline"
    },
    {
      "@id": "schema:MovieTheater",
      "@type": "rdfs:Class",
      "rdfs:comment": "A movie theater.",
      "rdfs:label": "MovieTheater",
      "rdfs:subClassOf": [
        {
          "@id": "schema:CivicStructure"
        },
        {
          "@id": "schema:EntertainmentBusiness"
        }
      ]
    },
    {
      "@id": "schema:PlaceOfWorship",
      "@type": "rdfs:Class",
      "rdfs:comment": "Place of worship, such as a church, synagogue, or mosque.",
      "rdfs:label": "PlaceOfWorship",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:TelevisionChannel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.",
      "rdfs:label": "TelevisionChannel",
      "rdfs:subClassOf": {
        "@id": "schema:BroadcastChannel"
      }
    },
    {
      "@id": "schema:transcript",
      "@type": "rdf:Property",
      "rdfs:comment": "If this MediaObject is an AudioObject or VideoObject, the transcript of that object.",
      "rdfs:label": "transcript",
      "schema:domainIncludes": [
        {
          "@id": "schema:AudioObject"
        },
        {
          "@id": "schema:VideoObject"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:EntryPoint",
      "@type": "rdfs:Class",
      "rdfs:comment": "An entry point, within some Web-based protocol.",
      "rdfs:label": "EntryPoint",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_ActionCollabClass"
      }
    },
    {
      "@id": "schema:Paperback",
      "@type": "schema:BookFormatType",
      "rdfs:comment": "Book format: Paperback.",
      "rdfs:label": "Paperback"
    },
    {
      "@id": "schema:median",
      "@type": "rdf:Property",
      "rdfs:comment": "The median value.",
      "rdfs:label": "median",
      "schema:domainIncludes": {
        "@id": "schema:QuantitativeValueDistribution"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:archivedAt",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.",
      "rdfs:label": "archivedAt",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:WebPage"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:courseMode",
      "@type": "rdf:Property",
      "rdfs:comment": "The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. \"online\", \"onsite\" or \"blended\"; \"synchronous\" or \"asynchronous\"; \"full-time\" or \"part-time\") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).",
      "rdfs:label": "courseMode",
      "schema:domainIncludes": {
        "@id": "schema:CourseInstance"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:eligibleQuantity",
      "@type": "rdf:Property",
      "rdfs:comment": "The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.",
      "rdfs:label": "eligibleQuantity",
      "schema:domainIncludes": [
        {
          "@id": "schema:PriceSpecification"
        },
        {
          "@id": "schema:Demand"
        },
        {
          "@id": "schema:Offer"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:PreventionIndication",
      "@type": "rdfs:Class",
      "rdfs:comment": "An indication for preventing an underlying condition, symptom, etc.",
      "rdfs:label": "PreventionIndication",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalIndication"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:broker",
      "@type": "rdf:Property",
      "rdfs:comment": "An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.",
      "rdfs:label": "broker",
      "schema:domainIncludes": [
        {
          "@id": "schema:Invoice"
        },
        {
          "@id": "schema:Order"
        },
        {
          "@id": "schema:Reservation"
        },
        {
          "@id": "schema:Service"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:isLocatedInSubcellularLocation",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/BioChemEntity"
      },
      "rdfs:comment": "Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any evidence.",
      "rdfs:label": "isLocatedInSubcellularLocation",
      "schema:domainIncludes": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:PropertyValue"
        }
      ]
    },
    {
      "@id": "schema:GolfCourse",
      "@type": "rdfs:Class",
      "rdfs:comment": "A golf course.",
      "rdfs:label": "GolfCourse",
      "rdfs:subClassOf": {
        "@id": "schema:SportsActivityLocation"
      }
    },
    {
      "@id": "schema:BusinessFunction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\\n\\nCommonly used values:\\n\\n* http://purl.org/goodrelations/v1#ConstructionInstallation\\n* http://purl.org/goodrelations/v1#Dispose\\n* http://purl.org/goodrelations/v1#LeaseOut\\n* http://purl.org/goodrelations/v1#Maintain\\n* http://purl.org/goodrelations/v1#ProvideService\\n* http://purl.org/goodrelations/v1#Repair\\n* http://purl.org/goodrelations/v1#Sell\\n* http://purl.org/goodrelations/v1#Buy\n        ",
      "rdfs:label": "BusinessFunction",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:inBroadcastLineup",
      "@type": "rdf:Property",
      "rdfs:comment": "The CableOrSatelliteService offering the channel.",
      "rdfs:label": "inBroadcastLineup",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastChannel"
      },
      "schema:rangeIncludes": {
        "@id": "schema:CableOrSatelliteService"
      }
    },
    {
      "@id": "schema:OrderCancelled",
      "@type": "schema:OrderStatus",
      "rdfs:comment": "OrderStatus representing cancellation of an order.",
      "rdfs:label": "OrderCancelled"
    },
    {
      "@id": "schema:Schedule",
      "@type": "rdfs:Class",
      "rdfs:comment": "A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.\n      This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also\n      have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.",
      "rdfs:label": "Schedule",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1457"
      }
    },
    {
      "@id": "schema:Ear",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Ear function assessment with clinical examination.",
      "rdfs:label": "Ear",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:issn",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/issn"
      },
      "rdfs:comment": "The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.",
      "rdfs:label": "issn",
      "rdfs:subPropertyOf": {
        "@id": "schema:identifier"
      },
      "schema:domainIncludes": [
        {
          "@id": "schema:Blog"
        },
        {
          "@id": "schema:WebSite"
        },
        {
          "@id": "schema:CreativeWorkSeries"
        },
        {
          "@id": "schema:Dataset"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:CharitableIncorporatedOrganization",
      "@type": "schema:UKNonprofitType",
      "rdfs:comment": "CharitableIncorporatedOrganization: Non-profit type referring to a Charitable Incorporated Organization (UK).",
      "rdfs:label": "CharitableIncorporatedOrganization",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:isrcCode",
      "@type": "rdf:Property",
      "rdfs:comment": "The International Standard Recording Code for the recording.",
      "rdfs:label": "isrcCode",
      "schema:domainIncludes": {
        "@id": "schema:MusicRecording"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ"
      }
    },
    {
      "@id": "schema:warrantyPromise",
      "@type": "rdf:Property",
      "rdfs:comment": "The warranty promise(s) included in the offer.",
      "rdfs:label": "warrantyPromise",
      "schema:domainIncludes": [
        {
          "@id": "schema:SellAction"
        },
        {
          "@id": "schema:BuyAction"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:WarrantyPromise"
      },
      "schema:supersededBy": {
        "@id": "schema:warranty"
      }
    },
    {
      "@id": "schema:itemReviewed",
      "@type": "rdf:Property",
      "rdfs:comment": "The item that is being reviewed/rated.",
      "rdfs:label": "itemReviewed",
      "schema:domainIncludes": [
        {
          "@id": "schema:AggregateRating"
        },
        {
          "@id": "schema:Review"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:Volcano",
      "@type": "rdfs:Class",
      "rdfs:comment": "A volcano, like Fuji san.",
      "rdfs:label": "Volcano",
      "rdfs:subClassOf": {
        "@id": "schema:Landform"
      }
    },
    {
      "@id": "schema:AchieveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.",
      "rdfs:label": "AchieveAction",
      "rdfs:subClassOf": {
        "@id": "schema:Action"
      }
    },
    {
      "@id": "schema:DeliveryEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "An event involving the delivery of an item.",
      "rdfs:label": "DeliveryEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:encoding",
      "@type": "rdf:Property",
      "rdfs:comment": "A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.",
      "rdfs:label": "encoding",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:inverseOf": {
        "@id": "schema:encodesCreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MediaObject"
      }
    },
    {
      "@id": "schema:interactivityType",
      "@type": "rdf:Property",
      "rdfs:comment": "The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.",
      "rdfs:label": "interactivityType",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:legalStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The drug or supplement's legal status, including any controlled substance schedules that apply.",
      "rdfs:label": "legalStatus",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:Drug"
        },
        {
          "@id": "schema:MedicalEntity"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:MedicalEnumeration"
        },
        {
          "@id": "schema:DrugLegalStatus"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:HowToStep",
      "@type": "rdfs:Class",
      "rdfs:comment": "A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.",
      "rdfs:label": "HowToStep",
      "rdfs:subClassOf": [
        {
          "@id": "schema:ItemList"
        },
        {
          "@id": "schema:ListItem"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:RightHandDriving",
      "@type": "schema:SteeringPositionValue",
      "rdfs:comment": "The steering position is on the right side of the vehicle (viewed from the main direction of driving).",
      "rdfs:label": "RightHandDriving",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:hasCourse",
      "@type": "rdf:Property",
      "rdfs:comment": "A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.",
      "rdfs:label": "hasCourse",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalProgram"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Course"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2483"
      }
    },
    {
      "@id": "schema:possibleComplication",
      "@type": "rdf:Property",
      "rdfs:comment": "A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc.",
      "rdfs:label": "possibleComplication",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:isProprietary",
      "@type": "rdf:Property",
      "rdfs:comment": "True if this item's name is a proprietary/brand name (vs. generic name).",
      "rdfs:label": "isProprietary",
      "schema:domainIncludes": [
        {
          "@id": "schema:DietarySupplement"
        },
        {
          "@id": "schema:Drug"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:caption",
      "@type": "rdf:Property",
      "rdfs:comment": "The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].",
      "rdfs:label": "caption",
      "schema:domainIncludes": [
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:AudioObject"
        },
        {
          "@id": "schema:ImageObject"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:MediaObject"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:spatial",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/dc/terms/spatial"
      },
      "rdfs:comment": "The \"spatial\" property can be used in cases when more specific properties\n(e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.",
      "rdfs:label": "spatial",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:BodyMeasurementUnderbust",
      "@type": "schema:BodyMeasurementTypeEnumeration",
      "rdfs:comment": "Girth of body just below the bust. Used, for example, to fit women's swimwear.",
      "rdfs:label": "BodyMeasurementUnderbust",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2811"
      }
    },
    {
      "@id": "schema:UserDownloads",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserDownloads",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:BasicIncome",
      "@type": "schema:GovernmentBenefitsType",
      "rdfs:comment": "BasicIncome: this is a benefit for basic income.",
      "rdfs:label": "BasicIncome",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2534"
      }
    },
    {
      "@id": "schema:RsvpAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of notifying an event organizer as to whether you expect to attend the event.",
      "rdfs:label": "RsvpAction",
      "rdfs:subClassOf": {
        "@id": "schema:InformAction"
      }
    },
    {
      "@id": "schema:orderItemStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "The current status of the order item.",
      "rdfs:label": "orderItemStatus",
      "schema:domainIncludes": {
        "@id": "schema:OrderItem"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OrderStatus"
      }
    },
    {
      "@id": "schema:potentialUse",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/ChemicalSubstance"
      },
      "rdfs:comment": "Intended use of the BioChemEntity by humans.",
      "rdfs:label": "potentialUse",
      "schema:domainIncludes": [
        {
          "@id": "schema:MolecularEntity"
        },
        {
          "@id": "schema:ChemicalSubstance"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DefinedTerm"
      }
    },
    {
      "@id": "schema:AllWheelDriveConfiguration",
      "@type": "schema:DriveWheelConfigurationValue",
      "rdfs:comment": "All-wheel Drive is a transmission layout where the engine drives all four wheels.",
      "rdfs:label": "AllWheelDriveConfiguration",
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:postalCodeBegin",
      "@type": "rdf:Property",
      "rdfs:comment": "First postal code in a range (included).",
      "rdfs:label": "postalCodeBegin",
      "schema:domainIncludes": {
        "@id": "schema:PostalCodeRangeSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:MonetaryAmount",
      "@type": "rdfs:Class",
      "rdfs:comment": "A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.",
      "rdfs:label": "MonetaryAmount",
      "rdfs:subClassOf": {
        "@id": "schema:StructuredValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO"
      }
    },
    {
      "@id": "schema:countryOfAssembly",
      "@type": "rdf:Property",
      "rdfs:comment": "The place where the product was assembled.",
      "rdfs:label": "countryOfAssembly",
      "schema:domainIncludes": {
        "@id": "schema:Product"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/991"
      }
    },
    {
      "@id": "schema:arrivalAirport",
      "@type": "rdf:Property",
      "rdfs:comment": "The airport where the flight terminates.",
      "rdfs:label": "arrivalAirport",
      "schema:domainIncludes": {
        "@id": "schema:Flight"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Airport"
      }
    },
    {
      "@id": "schema:expressedIn",
      "@type": "rdf:Property",
      "http://purl.org/dc/terms/source": {
        "@id": "http://www.bioschemas.org/Gene"
      },
      "rdfs:comment": "Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example brain, digestive system.",
      "rdfs:label": "expressedIn",
      "schema:domainIncludes": {
        "@id": "schema:Gene"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:AnatomicalSystem"
        },
        {
          "@id": "schema:AnatomicalStructure"
        },
        {
          "@id": "schema:BioChemEntity"
        }
      ]
    },
    {
      "@id": "schema:RefurbishedCondition",
      "@type": "schema:OfferItemCondition",
      "rdfs:comment": "Indicates that the item is refurbished.",
      "rdfs:label": "RefurbishedCondition"
    },
    {
      "@id": "schema:NailSalon",
      "@type": "rdfs:Class",
      "rdfs:comment": "A nail salon.",
      "rdfs:label": "NailSalon",
      "rdfs:subClassOf": {
        "@id": "schema:HealthAndBeautyBusiness"
      }
    },
    {
      "@id": "schema:Church",
      "@type": "rdfs:Class",
      "rdfs:comment": "A church.",
      "rdfs:label": "Church",
      "rdfs:subClassOf": {
        "@id": "schema:PlaceOfWorship"
      }
    },
    {
      "@id": "schema:lodgingUnitType",
      "@type": "rdf:Property",
      "rdfs:comment": "Textual description of the unit type (including suite vs. room, size of bed, etc.).",
      "rdfs:label": "lodgingUnitType",
      "schema:domainIncludes": {
        "@id": "schema:LodgingReservation"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:QualitativeValue"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:Gene",
      "@type": "rdfs:Class",
      "http://purl.org/dc/terms/source": {
        "@id": "http://bioschemas.org"
      },
      "rdfs:comment": "A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).",
      "rdfs:label": "Gene",
      "rdfs:subClassOf": {
        "@id": "schema:BioChemEntity"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      }
    },
    {
      "@id": "schema:ParcelDelivery",
      "@type": "rdfs:Class",
      "rdfs:comment": "The delivery of a parcel either via the postal service or a commercial service.",
      "rdfs:label": "ParcelDelivery",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:RsvpResponseMaybe",
      "@type": "schema:RsvpResponseType",
      "rdfs:comment": "The invitee may or may not attend.",
      "rdfs:label": "RsvpResponseMaybe"
    },
    {
      "@id": "schema:ImageObjectSnapshot",
      "@type": "rdfs:Class",
      "rdfs:comment": "A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.",
      "rdfs:label": "ImageObjectSnapshot",
      "rdfs:subClassOf": {
        "@id": "schema:ImageObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2450"
      }
    },
    {
      "@id": "schema:LibrarySystem",
      "@type": "rdfs:Class",
      "rdfs:comment": "A [[LibrarySystem]] is a collaborative system amongst several libraries.",
      "rdfs:label": "LibrarySystem",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1495"
      }
    },
    {
      "@id": "schema:contentLocation",
      "@type": "rdf:Property",
      "rdfs:comment": "The location depicted or described in the content. For example, the location in a photograph or painting.",
      "rdfs:label": "contentLocation",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:codingSystem",
      "@type": "rdf:Property",
      "rdfs:comment": "The coding system, e.g. 'ICD-10'.",
      "rdfs:label": "codingSystem",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCode"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:parents",
      "@type": "rdf:Property",
      "rdfs:comment": "A parents of the person.",
      "rdfs:label": "parents",
      "schema:domainIncludes": {
        "@id": "schema:Person"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      },
      "schema:supersededBy": {
        "@id": "schema:parent"
      }
    },
    {
      "@id": "schema:True",
      "@type": "schema:Boolean",
      "rdfs:comment": "The boolean value true.",
      "rdfs:label": "True"
    },
    {
      "@id": "schema:PaymentChargeSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "The costs of settling the payment using a particular payment method.",
      "rdfs:label": "PaymentChargeSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:tocEntry",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a [[HyperTocEntry]] in a [[HyperToc]].",
      "rdfs:label": "tocEntry",
      "rdfs:subPropertyOf": {
        "@id": "schema:hasPart"
      },
      "schema:domainIncludes": {
        "@id": "schema:HyperToc"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:HyperTocEntry"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2766"
      }
    },
    {
      "@id": "schema:SportsEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Sports event.",
      "rdfs:label": "SportsEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:hasVariant",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).",
      "rdfs:label": "hasVariant",
      "schema:domainIncludes": {
        "@id": "schema:ProductGroup"
      },
      "schema:inverseOf": {
        "@id": "schema:isVariantOf"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Product"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1797"
      }
    },
    {
      "@id": "schema:deliveryStatus",
      "@type": "rdf:Property",
      "rdfs:comment": "New entry added as the package passes through each leg of its journey (from shipment to final delivery).",
      "rdfs:label": "deliveryStatus",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:DeliveryEvent"
      }
    },
    {
      "@id": "schema:followee",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The person or organization being followed.",
      "rdfs:label": "followee",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:FollowAction"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:ReserveAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "Reserving a concrete object.\\n\\nRelated actions:\\n\\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.",
      "rdfs:label": "ReserveAction",
      "rdfs:subClassOf": {
        "@id": "schema:PlanAction"
      }
    },
    {
      "@id": "schema:supersededBy",
      "@type": "rdf:Property",
      "rdfs:comment": "Relates a term (i.e. a property, class or enumeration) to one that supersedes it.",
      "rdfs:label": "supersededBy",
      "schema:domainIncludes": [
        {
          "@id": "schema:Enumeration"
        },
        {
          "@id": "schema:Property"
        },
        {
          "@id": "schema:Class"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://meta.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Class"
        },
        {
          "@id": "schema:Enumeration"
        },
        {
          "@id": "schema:Property"
        }
      ]
    },
    {
      "@id": "schema:Playground",
      "@type": "rdfs:Class",
      "rdfs:comment": "A playground.",
      "rdfs:label": "Playground",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:copyrightHolder",
      "@type": "rdf:Property",
      "rdfs:comment": "The party holding the legal copyright to the CreativeWork.",
      "rdfs:label": "copyrightHolder",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:Casino",
      "@type": "rdfs:Class",
      "rdfs:comment": "A casino.",
      "rdfs:label": "Casino",
      "rdfs:subClassOf": {
        "@id": "schema:EntertainmentBusiness"
      }
    },
    {
      "@id": "schema:credentialCategory",
      "@type": "rdf:Property",
      "rdfs:comment": "The category or type of credential being described, for example \"degree”, “certificate”, “badge”, or more specific term.",
      "rdfs:label": "credentialCategory",
      "schema:domainIncludes": {
        "@id": "schema:EducationalOccupationalCredential"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:DefinedTerm"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:URL"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
      }
    },
    {
      "@id": "schema:GameServer",
      "@type": "rdfs:Class",
      "rdfs:comment": "Server that provides game interaction in a multiplayer game.",
      "rdfs:label": "GameServer",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:UKTrust",
      "@type": "schema:UKNonprofitType",
      "rdfs:comment": "UKTrust: Non-profit type referring to a UK trust.",
      "rdfs:label": "UKTrust",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:Observational",
      "@type": "schema:MedicalObservationalStudyDesign",
      "rdfs:comment": "An observational study design.",
      "rdfs:label": "Observational",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:GatedResidenceCommunity",
      "@type": "rdfs:Class",
      "rdfs:comment": "Residence type: Gated community.",
      "rdfs:label": "GatedResidenceCommunity",
      "rdfs:subClassOf": {
        "@id": "schema:Residence"
      }
    },
    {
      "@id": "schema:educationRequirements",
      "@type": "rdf:Property",
      "rdfs:comment": "Educational background needed for the position or Occupation.",
      "rdfs:label": "educationRequirements",
      "schema:domainIncludes": [
        {
          "@id": "schema:JobPosting"
        },
        {
          "@id": "schema:Occupation"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:EducationalOccupationalCredential"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1779"
        }
      ]
    },
    {
      "@id": "schema:contactOption",
      "@type": "rdf:Property",
      "rdfs:comment": "An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).",
      "rdfs:label": "contactOption",
      "schema:domainIncludes": {
        "@id": "schema:ContactPoint"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ContactPointOption"
      }
    },
    {
      "@id": "schema:ParkingMap",
      "@type": "schema:MapCategoryType",
      "rdfs:comment": "A parking map.",
      "rdfs:label": "ParkingMap"
    },
    {
      "@id": "schema:Seat",
      "@type": "rdfs:Class",
      "rdfs:comment": "Used to describe a seat, such as a reserved seat in an event reservation.",
      "rdfs:label": "Seat",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:inSupportOf",
      "@type": "rdf:Property",
      "rdfs:comment": "Qualification, candidature, degree, application that Thesis supports.",
      "rdfs:label": "inSupportOf",
      "schema:domainIncludes": {
        "@id": "schema:Thesis"
      },
      "schema:isPartOf": {
        "@id": "https://bib.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:CreativeWorkSeries",
      "@type": "rdfs:Class",
      "rdfs:comment": "A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\\n\\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\\n\\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.\n\t  ",
      "rdfs:label": "CreativeWorkSeries",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Series"
        },
        {
          "@id": "schema:CreativeWork"
        }
      ]
    },
    {
      "@id": "schema:currency",
      "@type": "rdf:Property",
      "rdfs:comment": "The currency in which the monetary amount is expressed.\\n\\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. \"BTC\"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. \"Ithaca HOUR\".",
      "rdfs:label": "currency",
      "schema:domainIncludes": [
        {
          "@id": "schema:DatedMoneySpecification"
        },
        {
          "@id": "schema:ExchangeRateSpecification"
        },
        {
          "@id": "schema:LoanOrCredit"
        },
        {
          "@id": "schema:MonetaryAmountDistribution"
        },
        {
          "@id": "schema:MonetaryAmount"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1253"
      }
    },
    {
      "@id": "schema:pagination",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/pages"
      },
      "rdfs:comment": "Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\" or \"10-12, 46-49\".",
      "rdfs:label": "pagination",
      "schema:domainIncludes": [
        {
          "@id": "schema:Article"
        },
        {
          "@id": "schema:PublicationIssue"
        },
        {
          "@id": "schema:PublicationVolume"
        },
        {
          "@id": "schema:Chapter"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:vehicleModelDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The release date of a vehicle model (often used to differentiate versions of the same make and model).",
      "rdfs:label": "vehicleModelDate",
      "schema:domainIncludes": {
        "@id": "schema:Vehicle"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:contributor",
      "@type": "rdf:Property",
      "rdfs:comment": "A secondary contributor to the CreativeWork or Event.",
      "rdfs:label": "contributor",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Event"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:Therapeutic",
      "@type": "schema:MedicalDevicePurpose",
      "rdfs:comment": "A medical device used for therapeutic purposes.",
      "rdfs:label": "Therapeutic",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:broadcastSubChannel",
      "@type": "rdf:Property",
      "rdfs:comment": "The subchannel used for the broadcast.",
      "rdfs:label": "broadcastSubChannel",
      "schema:domainIncludes": {
        "@id": "schema:BroadcastFrequencySpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2111"
      }
    },
    {
      "@id": "schema:cvdNumBedsOcc",
      "@type": "rdf:Property",
      "rdfs:comment": "numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.",
      "rdfs:label": "cvdNumBedsOcc",
      "schema:domainIncludes": {
        "@id": "schema:CDCPMDRecord"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Number"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2521"
      }
    },
    {
      "@id": "schema:CreativeWorkSeason",
      "@type": "rdfs:Class",
      "rdfs:comment": "A media season e.g. tv, radio, video game etc.",
      "rdfs:label": "CreativeWorkSeason",
      "rdfs:subClassOf": {
        "@id": "schema:CreativeWork"
      }
    },
    {
      "@id": "schema:ComedyEvent",
      "@type": "rdfs:Class",
      "rdfs:comment": "Event type: Comedy event.",
      "rdfs:label": "ComedyEvent",
      "rdfs:subClassOf": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:Nonprofit501c14",
      "@type": "schema:USNonprofitType",
      "rdfs:comment": "Nonprofit501c14: Non-profit type referring to State-Chartered Credit Unions, Mutual Reserve Funds.",
      "rdfs:label": "Nonprofit501c14",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2543"
      }
    },
    {
      "@id": "schema:isAccessibleForFree",
      "@type": "rdf:Property",
      "rdfs:comment": "A flag to signal that the item, event, or place is accessible for free.",
      "rdfs:label": "isAccessibleForFree",
      "schema:domainIncludes": [
        {
          "@id": "schema:CreativeWork"
        },
        {
          "@id": "schema:Event"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Boolean"
      }
    },
    {
      "@id": "schema:replacee",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of object. The object that is being replaced.",
      "rdfs:label": "replacee",
      "rdfs:subPropertyOf": {
        "@id": "schema:object"
      },
      "schema:domainIncludes": {
        "@id": "schema:ReplaceAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Thing"
      }
    },
    {
      "@id": "schema:EUEnergyEfficiencyCategoryA",
      "@type": "schema:EUEnergyEfficiencyEnumeration",
      "rdfs:comment": "Represents EU Energy Efficiency Class A as defined in EU energy labeling regulations.",
      "rdfs:label": "EUEnergyEfficiencyCategoryA",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2670"
      }
    },
    {
      "@id": "schema:tickerSymbol",
      "@type": "rdf:Property",
      "rdfs:comment": "The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022.",
      "rdfs:label": "tickerSymbol",
      "schema:domainIncludes": {
        "@id": "schema:Corporation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:knowsAbout",
      "@type": "rdf:Property",
      "rdfs:comment": "Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.",
      "rdfs:label": "knowsAbout",
      "schema:domainIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:Person"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Thing"
        }
      ],
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1688"
        },
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP"
        }
      ]
    },
    {
      "@id": "schema:specialty",
      "@type": "rdf:Property",
      "rdfs:comment": "One of the domain specialities to which this web page's content applies.",
      "rdfs:label": "specialty",
      "schema:domainIncludes": {
        "@id": "schema:WebPage"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Specialty"
      }
    },
    {
      "@id": "schema:event",
      "@type": "rdf:Property",
      "rdfs:comment": "Upcoming or past event associated with this place, organization, or action.",
      "rdfs:label": "event",
      "schema:domainIncludes": [
        {
          "@id": "schema:InviteAction"
        },
        {
          "@id": "schema:LeaveAction"
        },
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:PlayAction"
        },
        {
          "@id": "schema:JoinAction"
        },
        {
          "@id": "schema:InformAction"
        },
        {
          "@id": "schema:Place"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Event"
      }
    },
    {
      "@id": "schema:musicBy",
      "@type": "rdf:Property",
      "rdfs:comment": "The composer of the soundtrack.",
      "rdfs:label": "musicBy",
      "schema:domainIncludes": [
        {
          "@id": "schema:TVSeries"
        },
        {
          "@id": "schema:Clip"
        },
        {
          "@id": "schema:VideoGame"
        },
        {
          "@id": "schema:VideoGameSeries"
        },
        {
          "@id": "schema:VideoObject"
        },
        {
          "@id": "schema:Episode"
        },
        {
          "@id": "schema:MovieSeries"
        },
        {
          "@id": "schema:Movie"
        },
        {
          "@id": "schema:RadioSeries"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:MusicGroup"
        }
      ]
    },
    {
      "@id": "schema:SingleBlindedTrial",
      "@type": "schema:MedicalTrialDesign",
      "rdfs:comment": "A trial design in which the researcher knows which treatment the patient was randomly assigned to but the patient does not.",
      "rdfs:label": "SingleBlindedTrial",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:guidelineSubject",
      "@type": "rdf:Property",
      "rdfs:comment": "The medical conditions, treatments, etc. that are the subject of the guideline.",
      "rdfs:label": "guidelineSubject",
      "schema:domainIncludes": {
        "@id": "schema:MedicalGuideline"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalEntity"
      }
    },
    {
      "@id": "schema:legislationDateVersion",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://data.europa.eu/eli/ontology#version_date"
      },
      "http://www.w3.org/2004/02/skos/core#exactMatch": {
        "@id": "http://data.europa.eu/eli/ontology#version_date"
      },
      "rdfs:comment": "The point-in-time at which the provided description of the legislation is valid (e.g. : when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the \"National Insurance Contributions Act 2015\")",
      "rdfs:label": "legislationDateVersion",
      "schema:domainIncludes": {
        "@id": "schema:Legislation"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": [
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/1156"
        },
        {
          "@id": "http://publications.europa.eu/mdr/eli/index.html"
        }
      ]
    },
    {
      "@id": "schema:EventScheduled",
      "@type": "schema:EventStatusType",
      "rdfs:comment": "The event is taking place or has taken place on the startDate as scheduled. Use of this value is optional, as it is assumed by default.",
      "rdfs:label": "EventScheduled"
    },
    {
      "@id": "schema:GovernmentService",
      "@type": "rdfs:Class",
      "rdfs:comment": "A service provided by a government organization, e.g. food stamps, veterans benefits, etc.",
      "rdfs:label": "GovernmentService",
      "rdfs:subClassOf": {
        "@id": "schema:Service"
      }
    },
    {
      "@id": "schema:Project",
      "@type": "rdfs:Class",
      "rdfs:comment": "An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.\nUse properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures. \n   ",
      "rdfs:label": "Project",
      "rdfs:subClassOf": {
        "@id": "schema:Organization"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": [
        {
          "@id": "https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FundInfoCollab"
        },
        {
          "@id": "https://github.com/schemaorg/schemaorg/issues/383"
        }
      ]
    },
    {
      "@id": "schema:Bridge",
      "@type": "rdfs:Class",
      "rdfs:comment": "A bridge.",
      "rdfs:label": "Bridge",
      "rdfs:subClassOf": {
        "@id": "schema:CivicStructure"
      }
    },
    {
      "@id": "schema:ListItem",
      "@type": "rdfs:Class",
      "rdfs:comment": "An list item, e.g. a step in a checklist or how-to description.",
      "rdfs:label": "ListItem",
      "rdfs:subClassOf": {
        "@id": "schema:Intangible"
      }
    },
    {
      "@id": "schema:enginePower",
      "@type": "rdf:Property",
      "rdfs:comment": "The power of the vehicle's engine.\n    Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)\\n\\n* Note 1: There are many different ways of measuring an engine's power. For an overview, see  [http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\\n* Note 2: You can link to information about how the given value has been determined using the [[valueReference]] property.\\n* Note 3: You can use [[minValue]] and [[maxValue]] to indicate ranges.",
      "rdfs:label": "enginePower",
      "schema:domainIncludes": {
        "@id": "schema:EngineSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://auto.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:QuantitativeValue"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:partOfOrder",
      "@type": "rdf:Property",
      "rdfs:comment": "The overall order the items in this delivery were included in.",
      "rdfs:label": "partOfOrder",
      "schema:domainIncludes": {
        "@id": "schema:ParcelDelivery"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Order"
      }
    },
    {
      "@id": "schema:shippingDetails",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates information about the shipping policies and options associated with an [[Offer]].",
      "rdfs:label": "shippingDetails",
      "schema:domainIncludes": {
        "@id": "schema:Offer"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:OfferShippingDetails"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2506"
      }
    },
    {
      "@id": "schema:countriesSupported",
      "@type": "rdf:Property",
      "rdfs:comment": "Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.",
      "rdfs:label": "countriesSupported",
      "schema:domainIncludes": {
        "@id": "schema:SoftwareApplication"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:Landform",
      "@type": "rdfs:Class",
      "rdfs:comment": "A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.",
      "rdfs:label": "Landform",
      "rdfs:subClassOf": {
        "@id": "schema:Place"
      }
    },
    {
      "@id": "schema:hasMap",
      "@type": "rdf:Property",
      "rdfs:comment": "A URL to a map of the place.",
      "rdfs:label": "hasMap",
      "schema:domainIncludes": {
        "@id": "schema:Place"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Map"
        },
        {
          "@id": "schema:URL"
        }
      ]
    },
    {
      "@id": "schema:Text",
      "@type": [
        "schema:DataType",
        "rdfs:Class"
      ],
      "rdfs:comment": "Data type: Text.",
      "rdfs:label": "Text"
    },
    {
      "@id": "schema:accessibilityControl",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifies input methods that are sufficient to fully control the described resource ([WebSchemas wiki lists possible values](http://www.w3.org/wiki/WebSchemas/Accessibility)).",
      "rdfs:label": "accessibilityControl",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:PhysicalActivityCategory",
      "@type": "rdfs:Class",
      "rdfs:comment": "Categories of physical activity, organized by physiologic classification.",
      "rdfs:label": "PhysicalActivityCategory",
      "rdfs:subClassOf": {
        "@id": "schema:Enumeration"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:associatedAnatomy",
      "@type": "rdf:Property",
      "rdfs:comment": "The anatomy of the underlying organ system or structures associated with this entity.",
      "rdfs:label": "associatedAnatomy",
      "schema:domainIncludes": [
        {
          "@id": "schema:PhysicalActivity"
        },
        {
          "@id": "schema:MedicalCondition"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:AnatomicalSystem"
        },
        {
          "@id": "schema:SuperficialAnatomy"
        },
        {
          "@id": "schema:AnatomicalStructure"
        }
      ]
    },
    {
      "@id": "schema:winner",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of participant. The winner of the action.",
      "rdfs:label": "winner",
      "rdfs:subPropertyOf": {
        "@id": "schema:participant"
      },
      "schema:domainIncludes": {
        "@id": "schema:LoseAction"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Person"
      }
    },
    {
      "@id": "schema:Oncologic",
      "@type": "schema:MedicalSpecialty",
      "rdfs:comment": "A specific branch of medical science that deals with benign and malignant tumors, including the study of their development, diagnosis, treatment and prevention.",
      "rdfs:label": "Oncologic",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalBusiness"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:pageEnd",
      "@type": "rdf:Property",
      "http://www.w3.org/2002/07/owl#equivalentProperty": {
        "@id": "http://purl.org/ontology/bibo/pageEnd"
      },
      "rdfs:comment": "The page on which the work ends; for example \"138\" or \"xvi\".",
      "rdfs:label": "pageEnd",
      "schema:domainIncludes": [
        {
          "@id": "schema:PublicationIssue"
        },
        {
          "@id": "schema:PublicationVolume"
        },
        {
          "@id": "schema:Article"
        },
        {
          "@id": "schema:Chapter"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Integer"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex"
      }
    },
    {
      "@id": "schema:infectiousAgentClass",
      "@type": "rdf:Property",
      "rdfs:comment": "The class of infectious agent (bacteria, prion, etc.) that causes the disease.",
      "rdfs:label": "infectiousAgentClass",
      "schema:domainIncludes": {
        "@id": "schema:InfectiousDisease"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:InfectiousAgentClass"
      }
    },
    {
      "@id": "schema:reservedTicket",
      "@type": "rdf:Property",
      "rdfs:comment": "A ticket associated with the reservation.",
      "rdfs:label": "reservedTicket",
      "schema:domainIncludes": {
        "@id": "schema:Reservation"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Ticket"
      }
    },
    {
      "@id": "schema:geoRadius",
      "@type": "rdf:Property",
      "rdfs:comment": "Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).",
      "rdfs:label": "geoRadius",
      "schema:domainIncludes": {
        "@id": "schema:GeoCircle"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Distance"
        },
        {
          "@id": "schema:Number"
        }
      ]
    },
    {
      "@id": "schema:commentCount",
      "@type": "rdf:Property",
      "rdfs:comment": "The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.",
      "rdfs:label": "commentCount",
      "schema:domainIncludes": {
        "@id": "schema:CreativeWork"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Integer"
      }
    },
    {
      "@id": "schema:defaultValue",
      "@type": "rdf:Property",
      "rdfs:comment": "The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.",
      "rdfs:label": "defaultValue",
      "schema:domainIncludes": {
        "@id": "schema:PropertyValueSpecification"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Thing"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:faxNumber",
      "@type": "rdf:Property",
      "rdfs:comment": "The fax number.",
      "rdfs:label": "faxNumber",
      "schema:domainIncludes": [
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Place"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      }
    },
    {
      "@id": "schema:UserComments",
      "@type": "rdfs:Class",
      "rdfs:comment": "UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].",
      "rdfs:label": "UserComments",
      "rdfs:subClassOf": {
        "@id": "schema:UserInteraction"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews"
      },
      "schema:supersededBy": {
        "@id": "schema:InteractionCounter"
      }
    },
    {
      "@id": "schema:applicationContact",
      "@type": "rdf:Property",
      "rdfs:comment": "Contact details for further information relevant to this job posting.",
      "rdfs:label": "applicationContact",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:ContactPoint"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2396"
      }
    },
    {
      "@id": "schema:signOrSymptom",
      "@type": "rdf:Property",
      "rdfs:comment": "A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition.",
      "rdfs:label": "signOrSymptom",
      "schema:domainIncludes": {
        "@id": "schema:MedicalCondition"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:MedicalSignOrSymptom"
      }
    },
    {
      "@id": "schema:warning",
      "@type": "rdf:Property",
      "rdfs:comment": "Any FDA or other warnings about the drug (text or URL).",
      "rdfs:label": "warning",
      "schema:domainIncludes": {
        "@id": "schema:Drug"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:URL"
        },
        {
          "@id": "schema:Text"
        }
      ]
    },
    {
      "@id": "schema:purchaseDate",
      "@type": "rdf:Property",
      "rdfs:comment": "The date the item e.g. vehicle was purchased by the current owner.",
      "rdfs:label": "purchaseDate",
      "schema:domainIncludes": [
        {
          "@id": "schema:Vehicle"
        },
        {
          "@id": "schema:Product"
        }
      ],
      "schema:rangeIncludes": {
        "@id": "schema:Date"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group"
      }
    },
    {
      "@id": "schema:serviceAudience",
      "@type": "rdf:Property",
      "rdfs:comment": "The audience eligible for this service.",
      "rdfs:label": "serviceAudience",
      "schema:domainIncludes": {
        "@id": "schema:Service"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Audience"
      },
      "schema:supersededBy": {
        "@id": "schema:audience"
      }
    },
    {
      "@id": "schema:PhotographAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of capturing still images of objects using a camera.",
      "rdfs:label": "PhotographAction",
      "rdfs:subClassOf": {
        "@id": "schema:CreateAction"
      }
    },
    {
      "@id": "schema:MinimumAdvertisedPrice",
      "@type": "schema:PriceTypeEnumeration",
      "rdfs:comment": "Represents the minimum advertised price (\"MAP\") (as dictated by the manufacturer) of an offered product.",
      "rdfs:label": "MinimumAdvertisedPrice",
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2712"
      }
    },
    {
      "@id": "schema:priceComponentType",
      "@type": "rdf:Property",
      "rdfs:comment": "Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.",
      "rdfs:label": "priceComponentType",
      "schema:domainIncludes": {
        "@id": "schema:UnitPriceSpecification"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:PriceComponentTypeEnumeration"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2689"
      }
    },
    {
      "@id": "schema:OfficeEquipmentStore",
      "@type": "rdfs:Class",
      "rdfs:comment": "An office equipment store.",
      "rdfs:label": "OfficeEquipmentStore",
      "rdfs:subClassOf": {
        "@id": "schema:Store"
      }
    },
    {
      "@id": "schema:productSupported",
      "@type": "rdf:Property",
      "rdfs:comment": "The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. \"iPhone\") or a general category of products or services (e.g. \"smartphones\").",
      "rdfs:label": "productSupported",
      "schema:domainIncludes": {
        "@id": "schema:ContactPoint"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Text"
        },
        {
          "@id": "schema:Product"
        }
      ]
    },
    {
      "@id": "schema:bccRecipient",
      "@type": "rdf:Property",
      "rdfs:comment": "A sub property of recipient. The recipient blind copied on a message.",
      "rdfs:label": "bccRecipient",
      "rdfs:subPropertyOf": {
        "@id": "schema:recipient"
      },
      "schema:domainIncludes": {
        "@id": "schema:Message"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:Organization"
        },
        {
          "@id": "schema:ContactPoint"
        },
        {
          "@id": "schema:Person"
        }
      ]
    },
    {
      "@id": "schema:ProductCollection",
      "@type": "rdfs:Class",
      "rdfs:comment": "A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].",
      "rdfs:label": "ProductCollection",
      "rdfs:subClassOf": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:Collection"
        }
      ],
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2597"
      }
    },
    {
      "@id": "schema:ActivateAction",
      "@type": "rdfs:Class",
      "rdfs:comment": "The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).",
      "rdfs:label": "ActivateAction",
      "rdfs:subClassOf": {
        "@id": "schema:ControlAction"
      }
    },
    {
      "@id": "schema:EvidenceLevelA",
      "@type": "schema:MedicalEvidenceLevel",
      "rdfs:comment": "Data derived from multiple randomized clinical trials or meta-analyses.",
      "rdfs:label": "EvidenceLevelA",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:CompoundPriceSpecification",
      "@type": "rdfs:Class",
      "rdfs:comment": "A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. \"electricity\" or \"final cleaning\").",
      "rdfs:label": "CompoundPriceSpecification",
      "rdfs:subClassOf": {
        "@id": "schema:PriceSpecification"
      },
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass"
      }
    },
    {
      "@id": "schema:owns",
      "@type": "rdf:Property",
      "rdfs:comment": "Products owned by the organization or person.",
      "rdfs:label": "owns",
      "schema:domainIncludes": [
        {
          "@id": "schema:Person"
        },
        {
          "@id": "schema:Organization"
        }
      ],
      "schema:rangeIncludes": [
        {
          "@id": "schema:Product"
        },
        {
          "@id": "schema:OwnershipInfo"
        }
      ],
      "schema:source": {
        "@id": "http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms"
      }
    },
    {
      "@id": "schema:variableMeasured",
      "@type": "rdf:Property",
      "rdfs:comment": "The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue.",
      "rdfs:label": "variableMeasured",
      "schema:domainIncludes": {
        "@id": "schema:Dataset"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": [
        {
          "@id": "schema:PropertyValue"
        },
        {
          "@id": "schema:Text"
        }
      ],
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1083"
      }
    },
    {
      "@id": "schema:3DModel",
      "@type": "rdfs:Class",
      "rdfs:comment": "A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more [[MediaObject]]s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats)); specific encoding formats can be represented using the [[encodingFormat]] property applied to the relevant [[MediaObject]]. For the\ncase of a single file published after Zip compression, the convention of appending '+zip' to the [[encodingFormat]] can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using [[3DModel]].",
      "rdfs:label": "3DModel",
      "rdfs:subClassOf": {
        "@id": "schema:MediaObject"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2140"
      }
    },
    {
      "@id": "schema:MedicalTrial",
      "@type": "rdfs:Class",
      "rdfs:comment": "A medical trial is a type of medical study that uses scientific process used to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.",
      "rdfs:label": "MedicalTrial",
      "rdfs:subClassOf": {
        "@id": "schema:MedicalStudy"
      },
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:DataFeed",
      "@type": "rdfs:Class",
      "rdfs:comment": "A single feed providing structured information about one or more entities or topics.",
      "rdfs:label": "DataFeed",
      "rdfs:subClassOf": {
        "@id": "schema:Dataset"
      }
    },
    {
      "@id": "schema:Throat",
      "@type": "schema:PhysicalExam",
      "rdfs:comment": "Throat assessment with  clinical examination.",
      "rdfs:label": "Throat",
      "schema:isPartOf": {
        "@id": "https://health-lifesci.schema.org"
      }
    },
    {
      "@id": "schema:relevantOccupation",
      "@type": "rdf:Property",
      "rdfs:comment": "The Occupation for the JobPosting.",
      "rdfs:label": "relevantOccupation",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Occupation"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/1698"
      }
    },
    {
      "@id": "schema:eligibilityToWorkRequirement",
      "@type": "rdf:Property",
      "rdfs:comment": "The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.",
      "rdfs:label": "eligibilityToWorkRequirement",
      "schema:domainIncludes": {
        "@id": "schema:JobPosting"
      },
      "schema:isPartOf": {
        "@id": "https://pending.schema.org"
      },
      "schema:rangeIncludes": {
        "@id": "schema:Text"
      },
      "schema:source": {
        "@id": "https://github.com/schemaorg/schemaorg/issues/2384"
      }
    }
  ]
}
  recorded_at: Sun, 14 Nov 2021 15:10:33 GMT
recorded_with: VCR 6.0.0
